
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_SoC_GHRD(

    //////////// CLOCK //////////
    input               FPGA_CLK1_50,
    input               FPGA_CLK2_50,
    input               FPGA_CLK3_50,

    //////////// HDMI //////////
    inout               HDMI_I2C_SCL,
    inout               HDMI_I2C_SDA,
    inout               HDMI_I2S,
    inout               HDMI_LRCLK,
    inout               HDMI_MCLK,
    inout               HDMI_SCLK,
    output              HDMI_TX_CLK,
    output   [23: 0]    HDMI_TX_D,
    output              HDMI_TX_DE,
    output              HDMI_TX_HS,
    input               HDMI_TX_INT,
    output              HDMI_TX_VS,

    //////////// HPS //////////
    inout               HPS_CONV_USB_N,
    output   [14: 0]    HPS_DDR3_ADDR,
    output   [ 2: 0]    HPS_DDR3_BA,
    output              HPS_DDR3_CAS_N,
    output              HPS_DDR3_CK_N,
    output              HPS_DDR3_CK_P,
    output              HPS_DDR3_CKE,
    output              HPS_DDR3_CS_N,
    output   [ 3: 0]    HPS_DDR3_DM,
    inout    [31: 0]    HPS_DDR3_DQ,
    inout    [ 3: 0]    HPS_DDR3_DQS_N,
    inout    [ 3: 0]    HPS_DDR3_DQS_P,
    output              HPS_DDR3_ODT,
    output              HPS_DDR3_RAS_N,
    output              HPS_DDR3_RESET_N,
    input               HPS_DDR3_RZQ,
    output              HPS_DDR3_WE_N,
    output              HPS_ENET_GTX_CLK,
    inout               HPS_ENET_INT_N,
    output              HPS_ENET_MDC,
    inout               HPS_ENET_MDIO,
    input               HPS_ENET_RX_CLK,
    input    [ 3: 0]    HPS_ENET_RX_DATA,
    input               HPS_ENET_RX_DV,
    output   [ 3: 0]    HPS_ENET_TX_DATA,
    output              HPS_ENET_TX_EN,
    inout               HPS_GSENSOR_INT,
    inout               HPS_I2C0_SCLK,
    inout               HPS_I2C0_SDAT,
    inout               HPS_I2C1_SCLK,
    inout               HPS_I2C1_SDAT,
    inout               HPS_KEY,
    inout               HPS_LED,
    inout               HPS_LTC_GPIO,
    output              HPS_SD_CLK,
    inout               HPS_SD_CMD,
    inout    [ 3: 0]    HPS_SD_DATA,
    output              HPS_SPIM_CLK,
    input               HPS_SPIM_MISO,
    output              HPS_SPIM_MOSI,
    inout               HPS_SPIM_SS,
    input               HPS_UART_RX,
    output              HPS_UART_TX,
    input               HPS_USB_CLKOUT,
    inout    [ 7: 0]    HPS_USB_DATA,
    input               HPS_USB_DIR,
    input               HPS_USB_NXT,
    output              HPS_USB_STP,

    //////////// KEY //////////
    input    [ 1: 0]    KEY,

    //////////// LED //////////
    output   [ 7: 0]    LED,

    //////////// SW //////////
    input    [ 3: 0]    SW,
    
    //////////// ARDUINO /////
    inout    [ 15:0]    ARDUINO,
//    output              ARD13,
    
    //////////// ADC /////////
    output              ADC_NCS,
    output              ADC_SCK,
    input               ADC_OUT,
    output              ADC_IN
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire hps_fpga_reset_n;
wire     [1: 0]     fpga_debounced_buttons;
wire     [6: 0]     fpga_led_internal;
wire     [2: 0]     hps_reset_req;
wire                hps_cold_reset;
wire                hps_warm_reset;
wire                hps_debug_reset;
wire     [27: 0]    stm_hw_events;
wire                fpga_clk_50;
// connection of internal logics
assign LED[7: 1]     = fpga_led_internal;
assign fpga_clk_50   = FPGA_CLK1_50;
assign stm_hw_events = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};


//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
//Clock&Reset
    .clk_clk(FPGA_CLK1_50),                                      //                            clk.clk
    .reset_reset_n(hps_fpga_reset_n),                            //                          reset.reset_n
    //HPS ddr3
    .memory_mem_a(HPS_DDR3_ADDR),                                //                         memory.mem_a
    .memory_mem_ba(HPS_DDR3_BA),                                 //                               .mem_ba
    .memory_mem_ck(HPS_DDR3_CK_P),                               //                               .mem_ck
    .memory_mem_ck_n(HPS_DDR3_CK_N),                             //                               .mem_ck_n
    .memory_mem_cke(HPS_DDR3_CKE),                               //                               .mem_cke
    .memory_mem_cs_n(HPS_DDR3_CS_N),                             //                               .mem_cs_n
    .memory_mem_ras_n(HPS_DDR3_RAS_N),                           //                               .mem_ras_n
    .memory_mem_cas_n(HPS_DDR3_CAS_N),                           //                               .mem_cas_n
    .memory_mem_we_n(HPS_DDR3_WE_N),                             //                               .mem_we_n
    .memory_mem_reset_n(HPS_DDR3_RESET_N),                       //                               .mem_reset_n
    .memory_mem_dq(HPS_DDR3_DQ),                                 //                               .mem_dq
    .memory_mem_dqs(HPS_DDR3_DQS_P),                             //                               .mem_dqs
    .memory_mem_dqs_n(HPS_DDR3_DQS_N),                           //                               .mem_dqs_n
    .memory_mem_odt(HPS_DDR3_ODT),                               //                               .mem_odt
    .memory_mem_dm(HPS_DDR3_DM),                                 //                               .mem_dm
    .memory_oct_rzqin(HPS_DDR3_RZQ),                             //                               .oct_rzqin
    //HPS ethernet
    .hps_0_hps_io_hps_io_emac1_inst_TX_CLK(HPS_ENET_GTX_CLK),    //                   hps_0_hps_io.hps_io_emac1_inst_TX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_TXD0(HPS_ENET_TX_DATA[0]),   //                               .hps_io_emac1_inst_TXD0
    .hps_0_hps_io_hps_io_emac1_inst_TXD1(HPS_ENET_TX_DATA[1]),   //                               .hps_io_emac1_inst_TXD1
    .hps_0_hps_io_hps_io_emac1_inst_TXD2(HPS_ENET_TX_DATA[2]),   //                               .hps_io_emac1_inst_TXD2
    .hps_0_hps_io_hps_io_emac1_inst_TXD3(HPS_ENET_TX_DATA[3]),   //                               .hps_io_emac1_inst_TXD3
    .hps_0_hps_io_hps_io_emac1_inst_RXD0(HPS_ENET_RX_DATA[0]),   //                               .hps_io_emac1_inst_RXD0
    .hps_0_hps_io_hps_io_emac1_inst_MDIO(HPS_ENET_MDIO),         //                               .hps_io_emac1_inst_MDIO
    .hps_0_hps_io_hps_io_emac1_inst_MDC(HPS_ENET_MDC),           //                               .hps_io_emac1_inst_MDC
    .hps_0_hps_io_hps_io_emac1_inst_RX_CTL(HPS_ENET_RX_DV),      //                               .hps_io_emac1_inst_RX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_TX_CTL(HPS_ENET_TX_EN),      //                               .hps_io_emac1_inst_TX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_RX_CLK(HPS_ENET_RX_CLK),     //                               .hps_io_emac1_inst_RX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_RXD1(HPS_ENET_RX_DATA[1]),   //                               .hps_io_emac1_inst_RXD1
    .hps_0_hps_io_hps_io_emac1_inst_RXD2(HPS_ENET_RX_DATA[2]),   //                               .hps_io_emac1_inst_RXD2
    .hps_0_hps_io_hps_io_emac1_inst_RXD3(HPS_ENET_RX_DATA[3]),   //                               .hps_io_emac1_inst_RXD3
    //HPS SD card
    .hps_0_hps_io_hps_io_sdio_inst_CMD(HPS_SD_CMD),              //                               .hps_io_sdio_inst_CMD
    .hps_0_hps_io_hps_io_sdio_inst_D0(HPS_SD_DATA[0]),           //                               .hps_io_sdio_inst_D0
    .hps_0_hps_io_hps_io_sdio_inst_D1(HPS_SD_DATA[1]),           //                               .hps_io_sdio_inst_D1
    .hps_0_hps_io_hps_io_sdio_inst_CLK(HPS_SD_CLK),              //                               .hps_io_sdio_inst_CLK
    .hps_0_hps_io_hps_io_sdio_inst_D2(HPS_SD_DATA[2]),           //                               .hps_io_sdio_inst_D2
    .hps_0_hps_io_hps_io_sdio_inst_D3(HPS_SD_DATA[3]),           //                               .hps_io_sdio_inst_D3
    //HPS USB
    .hps_0_hps_io_hps_io_usb1_inst_D0(HPS_USB_DATA[0]),          //                               .hps_io_usb1_inst_D0
    .hps_0_hps_io_hps_io_usb1_inst_D1(HPS_USB_DATA[1]),          //                               .hps_io_usb1_inst_D1
    .hps_0_hps_io_hps_io_usb1_inst_D2(HPS_USB_DATA[2]),          //                               .hps_io_usb1_inst_D2
    .hps_0_hps_io_hps_io_usb1_inst_D3(HPS_USB_DATA[3]),          //                               .hps_io_usb1_inst_D3
    .hps_0_hps_io_hps_io_usb1_inst_D4(HPS_USB_DATA[4]),          //                               .hps_io_usb1_inst_D4
    .hps_0_hps_io_hps_io_usb1_inst_D5(HPS_USB_DATA[5]),          //                               .hps_io_usb1_inst_D5
    .hps_0_hps_io_hps_io_usb1_inst_D6(HPS_USB_DATA[6]),          //                               .hps_io_usb1_inst_D6
    .hps_0_hps_io_hps_io_usb1_inst_D7(HPS_USB_DATA[7]),          //                               .hps_io_usb1_inst_D7
    .hps_0_hps_io_hps_io_usb1_inst_CLK(HPS_USB_CLKOUT),          //                               .hps_io_usb1_inst_CLK
    .hps_0_hps_io_hps_io_usb1_inst_STP(HPS_USB_STP),             //                               .hps_io_usb1_inst_STP
    .hps_0_hps_io_hps_io_usb1_inst_DIR(HPS_USB_DIR),             //                               .hps_io_usb1_inst_DIR
    .hps_0_hps_io_hps_io_usb1_inst_NXT(HPS_USB_NXT),             //                               .hps_io_usb1_inst_NXT
    //HPS SPI
    .hps_0_hps_io_hps_io_spim1_inst_CLK(HPS_SPIM_CLK),           //                               .hps_io_spim1_inst_CLK
    .hps_0_hps_io_hps_io_spim1_inst_MOSI(HPS_SPIM_MOSI),         //                               .hps_io_spim1_inst_MOSI
    .hps_0_hps_io_hps_io_spim1_inst_MISO(HPS_SPIM_MISO),         //                               .hps_io_spim1_inst_MISO
    .hps_0_hps_io_hps_io_spim1_inst_SS0(HPS_SPIM_SS),            //                               .hps_io_spim1_inst_SS0
    //HPS UART
    .hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),             //                               .hps_io_uart0_inst_RX
    .hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),             //                               .hps_io_uart0_inst_TX
    //HPS I2C1
    .hps_0_hps_io_hps_io_i2c0_inst_SDA(HPS_I2C0_SDAT),           //                               .hps_io_i2c0_inst_SDA
    .hps_0_hps_io_hps_io_i2c0_inst_SCL(HPS_I2C0_SCLK),           //                               .hps_io_i2c0_inst_SCL
    //HPS I2C2
    .hps_0_hps_io_hps_io_i2c1_inst_SDA(HPS_I2C1_SDAT),           //                               .hps_io_i2c1_inst_SDA
    .hps_0_hps_io_hps_io_i2c1_inst_SCL(HPS_I2C1_SCLK),           //                               .hps_io_i2c1_inst_SCL
    //GPIO
    .hps_0_hps_io_hps_io_gpio_inst_GPIO09(HPS_CONV_USB_N),       //                               .hps_io_gpio_inst_GPIO09
    .hps_0_hps_io_hps_io_gpio_inst_GPIO35(HPS_ENET_INT_N),       //                               .hps_io_gpio_inst_GPIO35
    .hps_0_hps_io_hps_io_gpio_inst_GPIO40(HPS_LTC_GPIO),         //                               .hps_io_gpio_inst_GPIO40
    .hps_0_hps_io_hps_io_gpio_inst_GPIO53(HPS_LED),              //                               .hps_io_gpio_inst_GPIO53
    .hps_0_hps_io_hps_io_gpio_inst_GPIO54(HPS_KEY),              //                               .hps_io_gpio_inst_GPIO54
    .hps_0_hps_io_hps_io_gpio_inst_GPIO61(HPS_GSENSOR_INT),      //                               .hps_io_gpio_inst_GPIO61
    //FPGA Partion
    .led_pio_external_connection_export(fpga_led_internal),      //    led_pio_external_connection.export
    .dipsw_pio_external_connection_export(SW),                   //  dipsw_pio_external_connection.export
    .button_pio_external_connection_export(fpga_debounced_buttons),

    .adc_external_interface_sclk(ADC_SCK),                       //         adc_external_interface.sclk
    .adc_external_interface_cs_n(ADC_NCS),                       //                               .cs_n
    .adc_external_interface_dout(ADC_OUT),                       //                               .dout
    .adc_external_interface_din(ADC_IN),                         //                               .din

    // button_pio_external_connection.export
    .hps_0_h2f_reset_reset_n(hps_fpga_reset_n),                  //                hps_0_h2f_reset.reset_n
    .hps_0_f2h_cold_reset_req_reset_n(~hps_cold_reset),          //       hps_0_f2h_cold_reset_req.reset_n
    .hps_0_f2h_debug_reset_req_reset_n(~hps_debug_reset),        //      hps_0_f2h_debug_reset_req.reset_n
    .hps_0_f2h_stm_hw_events_stm_hwevents(stm_hw_events),        //        hps_0_f2h_stm_hw_events.stm_hwevents
    .hps_0_f2h_warm_reset_req_reset_n(~hps_warm_reset),          //       hps_0_f2h_warm_reset_req.reset_n
    //               .pwm_export_sel(pwm_sel),                          //                               .sig
//    .pwm_export_sig(pwm_controller),
    // PWM test component
    //               .pwm_export_writeresponsevalid_n(ARD13)                      //                   pwm_output.writeresponsevalid_n
    //               
    .pwm_sig_writeresponsevalid_n(pwm_controller),          //                        pwm_sig.writeresponsevalid_n
    //               .gpio_sig_gpio_direction({i2c_gpio_dir, spi_gpio_dir, uart_gpio_dir, pwm_gpio_dir}),               //                       gpio_sig.gpio_direction
    //               .gpio_sig_export({i2c_gpio_val, spi_gpio_val, uart_gpio_val, pwm_gpio_val}),               //                       .export
    .gpio_sig_gpio_direction(gpio_dir),              //                       gpio_sig.gpio_direction
    .gpio_sig_gpio_output_sig(gpio_out),             //                               .gpio_output_sig
    .gpio_sig_gpio_input_sig(gpio_in),               //                               .gpio_input_sig

    .select_sig_i2c_select(i2c_sel),                 //                     select_sig.i2c_select
    .select_sig_pwm_select(pwm_sel),                 //                               .pwm_select
    .select_sig_spi_select(spi_sel),                 //                               .spi_select
    .select_sig_uart_select(uart_sel),               //                               .uart_select

    .uart_external_rxd                     (rx_controller),                    //                  uart_external.rxd
    .uart_external_txd                     (tx_controller),                    //                               .txd
    .spi_external_MISO                     (miso_controller),                  //                   spi_external.MISO
    .spi_external_MOSI                     (mosi_controller),                  //                               .MOSI
    .spi_external_SCLK                     (sck_controller),                   //                               .SCLK
    .spi_external_SS_n                     (ss_controller),                    //                               .SS_n
    .i2c_external_sda_in                   (sda_controller),                   //                   i2c_external.sda_in
    .i2c_external_scl_in                   (scl_controller),                   //                               .scl_in
    .i2c_external_sda_oe                   (sda_oe),                           //                               .sda_oe
    .i2c_external_scl_oe                   (scl_oe)                            //                               .scl_oe
);

wire [13 : 0] throwaway0;

wire [13 : 0] throwaway1;

wire [1 : 0] i2c_gpio_dir;
wire [1 : 0] i2c_gpio_in;
wire [1 : 0] i2c_gpio_out;
wire [3 : 0] spi_gpio_dir;
wire [3 : 0] spi_gpio_in;
wire [3 : 0] spi_gpio_out;
wire [1 : 0] uart_gpio_dir;
wire [1 : 0] uart_gpio_in;
wire [1 : 0] uart_gpio_out;

wire [7 : 0] pwm_gpio_dir;
wire [7 : 0] pwm_gpio_in;
wire [7 : 0] pwm_gpio_out;

wire i2c_sel, spi_sel, uart_sel;
wire [7 : 0] pwm_sel;

wire scl_controller;
wire sda_controller;
wire sck_controller;
wire mosi_controller;
wire miso_controller;
wire ss_controller;
wire tx_controller;
wire rx_controller;
wire [7 : 0] pwm_controller;

wire scl_oe, sda_oe;

wire pin_scl;
wire pin_sda;
wire pin_sck;
wire pin_mosi;
wire pin_miso;
wire pin_ss;
wire pin_tx;
wire pin_rx;
wire [7 : 0] pin_pwm;

wire [15 : 0] gpio_dir;
wire [15 : 0] gpio_in;
wire [15 : 0] gpio_out;

assign gpio_dir = {i2c_gpio_dir[0], i2c_gpio_dir[1], spi_gpio_dir[0], spi_gpio_dir[2], spi_gpio_dir[1], spi_gpio_dir[3], pwm_gpio_dir, uart_gpio_dir[0], uart_gpio_dir[1]};
assign gpio_in =  {i2c_gpio_in [0], i2c_gpio_in [1], spi_gpio_in [0], spi_gpio_in [2], spi_gpio_in [1], spi_gpio_in [3], pwm_gpio_in,  uart_gpio_in [0], uart_gpio_in [1]};
assign gpio_out = {i2c_gpio_out[0], i2c_gpio_out[1], spi_gpio_out[0], spi_gpio_out[2], spi_gpio_out[1], spi_gpio_out[3], pwm_gpio_out, uart_gpio_out[0], uart_gpio_out[1]};

//assign gpio_dir = {i2c_gpio_dir[0], i2c_gpio_dir[1], spi_gpio_dir[0], spi_gpio_dir[1], spi_gpio_dir[2], spi_gpio_dir[3], pwm_gpio_dir, uart_gpio_dir[0:1]};
//assign gpio_in =  {i2c_gpio_in [0:1], spi_gpio_in [0:3], pwm_gpio_in,  uart_gpio_in [0:1]};
//assign gpio_out = {i2c_gpio_out[0:1], spi_gpio_out[0:3], pwm_gpio_out, uart_gpio_out[0:1]};

//gpio_test gpio_test_instance(
//    .clk(fpga_clk_50),
//    .rst(!hps_fpga_reset_n),
//    .gpio_out(gpio_out),
//    .gpio_in(gpio_in),
//    .gpio_dir(gpio_dir),
//    .arduino_io(ARDUINO)
//);

//assign ARDUINO[15]    = pin_scl;
//assign ARDUINO[14]    = pin_sda;
//assign ARDUINO[13]    = pin_sck;
//assign ARDUINO[12]    = pin_miso;
//assign ARDUINO[11]    = pin_mosi;
//assign ARDUINO[10]    = pin_ss;
//assign ARDUINO[9 : 2] = pin_pwm;
//assign ARDUINO[1]     = pin_tx;
//assign ARDUINO[0]     = pin_rx;


i2c_header i2c_header_inst(
    .clk            (fpga_clk_50),
    .rst            (!hps_fpga_reset_n),
    .i2c_sel        (i2c_sel),
    .gpio_dir       (i2c_gpio_dir),
    .gpio_in        (i2c_gpio_in),
    .gpio_out       (i2c_gpio_out),
    .scl_controller (scl_controller),
    .sda_controller (sda_controller),
//    .pin_scl        (pin_scl),
//    .pin_sda        (pin_sda)
    .scl_oe         (scl_oe),
    .sda_oe         (sda_oe),
    .pin_scl        (ARDUINO[15]),
    .pin_sda        (ARDUINO[14])
);

//// these work just fine
//altiobuf altiobuf_i2c_scl(
//    .datain(1'b0),
//    .dataio(ARDUINO[15]),
//    .dataout(scl_controller),
//    .oe(scl_oe)
//);
//
//altiobuf altiobuf_i2c_sda(
//    .datain(1'b0),
//    .dataio(ARDUINO[14]),
//    .dataout(sda_controller),
//    .oe(sda_oe)
//);

/*
ALT_IOBUF i2c_buffer(
    .i(),
    .o(),
    .oe(),
    .io()
);
*/


spi_header spi_header_inst(
    .clk             (fpga_clk_50),
    .rst             (!hps_fpga_reset_n),
    .spi_sel         (spi_sel),
    .gpio_dir        (spi_gpio_dir),
    .gpio_in         (spi_gpio_in),
    .gpio_out        (spi_gpio_out),
    .sck_controller  (sck_controller),
    .mosi_controller (mosi_controller),
    .miso_controller (miso_controller),
    .ss_controller   (ss_controller),
//    .pin_sck         (pin_sck),
//    .pin_mosi        (pin_mosi),
//    .pin_miso        (pin_miso),
//    .pin_ss          (pin_ss)
    .pin_sck         (ARDUINO[13]),
    .pin_mosi        (ARDUINO[11]),
    .pin_miso        (ARDUINO[12]),
    .pin_ss          (ARDUINO[10])
);

uart_header uart_header_inst(
    .clk           (fpga_clk_50),
    .rst           (!hps_fpga_reset_n),
    .uart_sel      (uart_sel),
    .gpio_dir      (uart_gpio_dir),
    .gpio_in       (uart_gpio_in),
    .gpio_out      (uart_gpio_out),
    .tx_controller (tx_controller),
    .rx_controller (rx_controller),
//    .pin_tx        (pin_tx),
//    .pin_rx        (pin_rx)
    .pin_tx        (ARDUINO[1]),
    .pin_rx        (ARDUINO[0])
);

pwm_header pwm_header_inst(
    .clk            (fpga_clk_50),
    .rst            (!hps_fpga_reset_n),
    .gpio_dir       (pwm_gpio_dir),
    .gpio_in        (pwm_gpio_in),
    .gpio_out       (pwm_gpio_out),
    .pwm_sel        (pwm_sel),
    .pwm_controller (pwm_controller),
//    .pin_pwm        (pin_pwm)
    .pin_pwm        (ARDUINO[9:2])
);
           
// Debounce logic to clean out glitches within 1ms
debounce debounce_inst(
             .clk(fpga_clk_50),
             .reset_n(hps_fpga_reset_n),
             .data_in(KEY),
             .data_out(fpga_debounced_buttons)
         );
defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst(
              .source_clk(fpga_clk_50),
              .source(hps_reset_req)
          );

altera_edge_detector pulse_cold_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[0]),
                         .pulse_out(hps_cold_reset)
                     );
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[1]),
                         .pulse_out(hps_warm_reset)
                     );
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[2]),
                         .pulse_out(hps_debug_reset)
                     );
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;

reg [25: 0] counter;
reg led_level;
always @(posedge fpga_clk_50 or negedge hps_fpga_reset_n) begin
    if (~hps_fpga_reset_n) begin
        counter <= 0;
        led_level <= 0;
    end

    else if (counter == 24999999) begin
        counter <= 0;
        led_level <= ~led_level;
    end
    else
        counter <= counter + 1'b1;
end

assign LED[0] = led_level;


endmodule
