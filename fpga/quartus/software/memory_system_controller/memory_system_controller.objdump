
memory_system_controller.elf:     file format elf32-littlenios2
memory_system_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00007fb0 memsz 0x00007fb0 flags r-x
    LOAD off    0x00008fd0 vaddr 0x00027fd0 paddr 0x00029ab0 align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x0000b590 vaddr 0x0002b590 paddr 0x0002b590 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007b44  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000025c  00027d74  00027d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  00027fd0  00029ab0  00008fd0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002b590  0002b590  0000b590  2**2
                  ALLOC, SMALL_DATA
  6 .nios_mem     00000000  0002b6e4  0002b6e4  0000aab0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000aab0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b00  00000000  00000000  0000aad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019cd3  00000000  00000000  0000b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006acf  00000000  00000000  000252ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000774d  00000000  00000000  0002bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c98  00000000  00000000  000334c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000033c5  00000000  00000000  00035160  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004eb0  00000000  00000000  00038525  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003d3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006f8  00000000  00000000  0003d418  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000409ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  000409ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000409f1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000409f2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000409f3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000409fc  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00040a05  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00040a0e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00040a18  2**0
                  CONTENTS, READONLY
 26 .jdi          0000cf2b  00000000  00000000  00040a51  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002d0b53  00000000  00000000  0004d97c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00027d74 l    d  .rodata	00000000 .rodata
00027fd0 l    d  .rwdata	00000000 .rwdata
0002b590 l    d  .bss	00000000 .bss
0002b6e4 l    d  .nios_mem	00000000 .nios_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memory_system_controller_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0002040c l     F .text	00000008 __fp_unlock
00020420 l     F .text	0000019c __sinit.part.1
000205bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00027fd0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000230ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000231c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000231ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000232e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000233c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000234b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029a98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023a40 l     F .text	00000034 alt_dev_reg
000289b0 l     O .rwdata	00001060 jtag_uart
00029a10 l     O .rwdata	00000060 msgdma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023d5c l     F .text	0000020c altera_avalon_jtag_uart_irq
00023f68 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000245a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
00024694 l     F .text	0000003c alt_get_errno
000246d0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
00024764 l     F .text	0000012c alt_msgdma_write_extended_descriptor
00024890 l     F .text	00000184 alt_msgdma_irq
00024a14 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
00024aa0 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
00024bf4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
00024ec4 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
0002550c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
000255b0 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000267b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00026ca4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00026e04 l     F .text	0000003c alt_get_errno
00026e40 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002b5b8 g     O .bss	00000004 alt_instruction_exception_handler
00026420 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
00022e7c g     F .text	00000054 _isatty_r
000235cc g     F .text	0000007c alt_main
000202a0 g     F .text	000000c0 _puts_r
0002b5e4 g     O .bss	00000100 alt_irq
00022ba4 g     F .text	00000060 _lseek_r
00029ab0 g       *ABS*	00000000 __flash_rwdata_start
000252ec g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
0002b6e4 g       *ABS*	00000000 __alt_heap_start
00022158 g     F .text	0000005c __sseek
0002076c g     F .text	00000010 __sinit
00027950 g     F .text	00000140 __swbuf_r
000205c4 g     F .text	00000078 __sfmoreglue
0002366c g     F .text	00000024 __malloc_unlock
00021844 g     F .text	0000015c memmove
00020754 g     F .text	00000018 _cleanup
0002523c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
00027494 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022e20 g     F .text	0000005c _fstat_r
0002b59c g     O .bss	00000004 errno
000220d4 g     F .text	00000008 __seofread
0002b5a4 g     O .bss	00000004 alt_argv
00031a70 g       *ABS*	00000000 _gp
00025d5c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00028824 g     O .rwdata	00000180 alt_fd_list
00026954 g     F .text	00000090 alt_find_dev
000216fc g     F .text	00000148 memcpy
00020414 g     F .text	0000000c _cleanup_r
00026d88 g     F .text	0000007c alt_io_redirect
00027d74 g       *ABS*	00000000 __DTOR_END__
0002617c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
0002645c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
000263cc g     F .text	00000054 alt_msgdma_register_callback
00020360 g     F .text	00000014 puts
00027684 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00024160 g     F .text	0000021c altera_avalon_jtag_uart_read
00025a3c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
00022fc8 g     F .text	00000064 .hidden __udivsi3
0002331c g     F .text	000000ac isatty
0002b598 g     O .bss	00000004 __malloc_top_pad
000207bc g     F .text	000004c8 __sfvwrite_r
0002202c g     F .text	00000054 _sbrk_r
00022dc0 g     F .text	00000060 _read_r
00029a90 g     O .rwdata	00000004 alt_max_fd
000223c4 g     F .text	000000f0 _fclose_r
00022740 g     F .text	00000030 fflush
0002b594 g     O .bss	00000004 __malloc_max_sbrked_mem
0002579c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
000234f0 g     F .text	000000dc lseek
00029a70 g     O .rwdata	00000004 _global_impure_ptr
00021ac8 g     F .text	00000564 _realloc_r
0002b6e4 g       *ABS*	00000000 __bss_end
00026bb4 g     F .text	000000f0 alt_iic_isr_register
0002738c g     F .text	00000108 alt_tick
00026260 g     F .text	0000016c alt_msgdma_init
000264d4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
0002078c g     F .text	00000018 __fp_lock_all
00026b68 g     F .text	0000004c alt_ic_irq_enabled
000272f0 g     F .text	0000009c alt_alarm_stop
0002b5ac g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000287fc g     O .rwdata	00000028 alt_dev_null
000253d4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
000260f0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
00026794 g     F .text	00000020 alt_dcache_flush_all
00029ab0 g       *ABS*	00000000 __ram_rwdata_end
00029a88 g     O .rwdata	00000008 alt_dev_list
00023940 g     F .text	00000100 write
000277e8 g     F .text	000000a0 _putc_r
00027fd0 g       *ABS*	00000000 __ram_rodata_end
00023228 g     F .text	000000b8 fstat
0002302c g     F .text	00000058 .hidden __umodsi3
000257f4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
0002b6e4 g       *ABS*	00000000 end
00023c9c g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00027d74 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00024618 g     F .text	0000007c alt_avalon_timer_sc_init
0002437c g     F .text	00000224 altera_avalon_jtag_uart_write
0002077c g     F .text	00000004 __sfp_lock_acquire
00021618 g     F .text	000000e4 memchr
00022894 g     F .text	00000310 _free_r
00027088 g     F .text	0000022c alt_printf
00027bc0 g     F .text	00000180 __call_exitprocs
00029a78 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002b5b0 g     O .bss	00000004 _alt_tick_rate
0002b5b4 g     O .bss	00000004 _alt_nticks
00025294 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
000236cc g     F .text	00000104 read
00023aac g     F .text	0000008c alt_sys_init
00027aa8 g     F .text	00000118 __register_exitproc
00024008 g     F .text	00000068 altera_avalon_jtag_uart_close
00023084 g     F .text	00000028 .hidden __mulsi3
00027fd0 g       *ABS*	00000000 __ram_rwdata_start
00027d74 g       *ABS*	00000000 __ram_rodata_start
0002b5bc g     O .bss	00000028 __malloc_current_mallinfo
00023b38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000275c0 g     F .text	000000c4 alt_get_fd
0002663c g     F .text	00000158 alt_busy_sleep
00022370 g     F .text	00000054 _close_r
00025744 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
0002776c g     F .text	0000007c memcmp
00023bf8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002b6e4 g       *ABS*	00000000 __alt_stack_base
00023c48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002584c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
0002221c g     F .text	00000154 __swsetup_r
0002063c g     F .text	00000118 __sfp
000283f4 g     O .rwdata	00000408 __malloc_av_
00020788 g     F .text	00000004 __sinit_lock_release
00022080 g     F .text	00000054 __sread
000274b8 g     F .text	00000108 alt_find_file
000267f0 g     F .text	000000a4 alt_dev_llist_insert
00023648 g     F .text	00000024 __malloc_lock
00023854 g     F .text	000000b0 sbrk
000226e4 g     F .text	0000005c _fflush_r
0002b590 g       *ABS*	00000000 __bss_start
000219a0 g     F .text	00000128 memset
00026208 g     F .text	00000058 alt_msgdma_open
0002026c g     F .text	00000034 main
0002b5a8 g     O .bss	00000004 alt_envp
0002b590 g     O .bss	00000004 __malloc_max_total_mem
00025b2c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
00023b98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00027a90 g     F .text	00000018 __swbuf
000221b4 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
000224b4 g     F .text	00000014 fclose
00025e30 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
00020e0c g     F .text	0000080c _malloc_r
00029a94 g     O .rwdata	00000004 alt_errno
00025984 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
00020c84 g     F .text	000000c4 _fwalk
00027888 g     F .text	000000c8 putc
00022ed0 g     F .text	00000084 .hidden __divsi3
00022770 g     F .text	00000124 _malloc_trim_r
00027d74 g       *ABS*	00000000 __CTOR_END__
00027d74 g       *ABS*	00000000 __flash_rodata_start
00027d74 g       *ABS*	00000000 __DTOR_LIST__
00023a74 g     F .text	00000038 alt_irq_init
000237d0 g     F .text	00000084 alt_release_fd
00026498 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
00027720 g     F .text	00000014 atexit
000221bc g     F .text	00000060 _write_r
000258ec g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00029a74 g     O .rwdata	00000004 _impure_ptr
0002b5a0 g     O .bss	00000004 alt_argc
000224c8 g     F .text	0000021c __sflush_r
000268f4 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000207a4 g     F .text	00000018 __fp_unlock_all
00029a80 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00026a04 g     F .text	00000050 alt_ic_isr_register
00020000 g       *ABS*	00000000 __alt_mem_nios_mem
00029ab0 g       *ABS*	00000000 _edata
0002b6e4 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00024070 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00026adc g     F .text	0000008c alt_ic_irq_disable
000220dc g     F .text	0000007c __swrite
00029a7c g     O .rwdata	00000004 __malloc_trim_threshold
00027734 g     F .text	00000038 exit
00020d48 g     F .text	000000c4 _fwalk_reent
00025cc4 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
00022f54 g     F .text	00000074 .hidden __modsi3
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020780 g     F .text	00000004 __sfp_lock_release
00025464 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
00025344 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
00027d40 g     F .text	00000034 _exit
00026510 g     F .text	0000012c alt_alarm_start
00022c04 g     F .text	000001bc __smakebuf_r
00029a9c g     O .rwdata	00000008 alt_msgdma_list
00020374 g     F .text	00000098 strlen
00026f2c g     F .text	0000015c open
000272b4 g     F .text	0000003c alt_putchar
000269e4 g     F .text	00000020 alt_icache_flush_all
00029aa4 g     O .rwdata	00000004 alt_priority_mask
00026a54 g     F .text	00000088 alt_ic_irq_enable
00029aa8 g     O .rwdata	00000008 alt_alarm_list
00026894 g     F .text	00000060 _do_ctors
000230e8 g     F .text	000000d8 close
00023430 g     F .text	00000084 alt_load
00020784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10ad7904 	addi	r2,r2,-18972
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10ad7904 	addi	r2,r2,-18972
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6d217 	ldw	r2,-25784(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6d217 	ldw	r2,-25784(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6869c14 	ori	gp,gp,6768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10ad6414 	ori	r2,r2,46480

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18edb914 	ori	r3,r3,46820

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00234300 	call	23430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00235cc0 	call	235cc <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <main>:
#include <sys/alt_irq.h>
#include <io.h>


int main()
{
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   2027c:	010000b4 	movhi	r4,2
   20280:	211f5d04 	addi	r4,r4,32116
   20284:	00203600 	call	20360 <puts>

  return 0;
   20288:	0005883a 	mov	r2,zero
}
   2028c:	e037883a 	mov	sp,fp
   20290:	dfc00117 	ldw	ra,4(sp)
   20294:	df000017 	ldw	fp,0(sp)
   20298:	dec00204 	addi	sp,sp,8
   2029c:	f800283a 	ret

000202a0 <_puts_r>:
   202a0:	defff604 	addi	sp,sp,-40
   202a4:	dc000715 	stw	r16,28(sp)
   202a8:	2021883a 	mov	r16,r4
   202ac:	2809883a 	mov	r4,r5
   202b0:	dc400815 	stw	r17,32(sp)
   202b4:	dfc00915 	stw	ra,36(sp)
   202b8:	2823883a 	mov	r17,r5
   202bc:	00203740 	call	20374 <strlen>
   202c0:	10c00044 	addi	r3,r2,1
   202c4:	d8800115 	stw	r2,4(sp)
   202c8:	008000b4 	movhi	r2,2
   202cc:	109f6204 	addi	r2,r2,32136
   202d0:	d8800215 	stw	r2,8(sp)
   202d4:	00800044 	movi	r2,1
   202d8:	d8800315 	stw	r2,12(sp)
   202dc:	00800084 	movi	r2,2
   202e0:	dc400015 	stw	r17,0(sp)
   202e4:	d8c00615 	stw	r3,24(sp)
   202e8:	dec00415 	stw	sp,16(sp)
   202ec:	d8800515 	stw	r2,20(sp)
   202f0:	80000226 	beq	r16,zero,202fc <_puts_r+0x5c>
   202f4:	80800e17 	ldw	r2,56(r16)
   202f8:	10001426 	beq	r2,zero,2034c <_puts_r+0xac>
   202fc:	81400217 	ldw	r5,8(r16)
   20300:	2880030b 	ldhu	r2,12(r5)
   20304:	10c8000c 	andi	r3,r2,8192
   20308:	1800061e 	bne	r3,zero,20324 <_puts_r+0x84>
   2030c:	29001917 	ldw	r4,100(r5)
   20310:	00f7ffc4 	movi	r3,-8193
   20314:	10880014 	ori	r2,r2,8192
   20318:	20c6703a 	and	r3,r4,r3
   2031c:	2880030d 	sth	r2,12(r5)
   20320:	28c01915 	stw	r3,100(r5)
   20324:	d9800404 	addi	r6,sp,16
   20328:	8009883a 	mov	r4,r16
   2032c:	00207bc0 	call	207bc <__sfvwrite_r>
   20330:	1000091e 	bne	r2,zero,20358 <_puts_r+0xb8>
   20334:	00800284 	movi	r2,10
   20338:	dfc00917 	ldw	ra,36(sp)
   2033c:	dc400817 	ldw	r17,32(sp)
   20340:	dc000717 	ldw	r16,28(sp)
   20344:	dec00a04 	addi	sp,sp,40
   20348:	f800283a 	ret
   2034c:	8009883a 	mov	r4,r16
   20350:	002076c0 	call	2076c <__sinit>
   20354:	003fe906 	br	202fc <__alt_data_end+0xfffe72fc>
   20358:	00bfffc4 	movi	r2,-1
   2035c:	003ff606 	br	20338 <__alt_data_end+0xfffe7338>

00020360 <puts>:
   20360:	008000f4 	movhi	r2,3
   20364:	10a69d04 	addi	r2,r2,-25996
   20368:	200b883a 	mov	r5,r4
   2036c:	11000017 	ldw	r4,0(r2)
   20370:	00202a01 	jmpi	202a0 <_puts_r>

00020374 <strlen>:
   20374:	208000cc 	andi	r2,r4,3
   20378:	10002026 	beq	r2,zero,203fc <strlen+0x88>
   2037c:	20800007 	ldb	r2,0(r4)
   20380:	10002026 	beq	r2,zero,20404 <strlen+0x90>
   20384:	2005883a 	mov	r2,r4
   20388:	00000206 	br	20394 <strlen+0x20>
   2038c:	10c00007 	ldb	r3,0(r2)
   20390:	18001826 	beq	r3,zero,203f4 <strlen+0x80>
   20394:	10800044 	addi	r2,r2,1
   20398:	10c000cc 	andi	r3,r2,3
   2039c:	183ffb1e 	bne	r3,zero,2038c <__alt_data_end+0xfffe738c>
   203a0:	10c00017 	ldw	r3,0(r2)
   203a4:	01ffbff4 	movhi	r7,65279
   203a8:	39ffbfc4 	addi	r7,r7,-257
   203ac:	00ca303a 	nor	r5,zero,r3
   203b0:	01a02074 	movhi	r6,32897
   203b4:	19c7883a 	add	r3,r3,r7
   203b8:	31a02004 	addi	r6,r6,-32640
   203bc:	1946703a 	and	r3,r3,r5
   203c0:	1986703a 	and	r3,r3,r6
   203c4:	1800091e 	bne	r3,zero,203ec <strlen+0x78>
   203c8:	10800104 	addi	r2,r2,4
   203cc:	10c00017 	ldw	r3,0(r2)
   203d0:	19cb883a 	add	r5,r3,r7
   203d4:	00c6303a 	nor	r3,zero,r3
   203d8:	28c6703a 	and	r3,r5,r3
   203dc:	1986703a 	and	r3,r3,r6
   203e0:	183ff926 	beq	r3,zero,203c8 <__alt_data_end+0xfffe73c8>
   203e4:	00000106 	br	203ec <strlen+0x78>
   203e8:	10800044 	addi	r2,r2,1
   203ec:	10c00007 	ldb	r3,0(r2)
   203f0:	183ffd1e 	bne	r3,zero,203e8 <__alt_data_end+0xfffe73e8>
   203f4:	1105c83a 	sub	r2,r2,r4
   203f8:	f800283a 	ret
   203fc:	2005883a 	mov	r2,r4
   20400:	003fe706 	br	203a0 <__alt_data_end+0xfffe73a0>
   20404:	0005883a 	mov	r2,zero
   20408:	f800283a 	ret

0002040c <__fp_unlock>:
   2040c:	0005883a 	mov	r2,zero
   20410:	f800283a 	ret

00020414 <_cleanup_r>:
   20414:	014000b4 	movhi	r5,2
   20418:	2948f104 	addi	r5,r5,9156
   2041c:	0020d481 	jmpi	20d48 <_fwalk_reent>

00020420 <__sinit.part.1>:
   20420:	defff704 	addi	sp,sp,-36
   20424:	00c000b4 	movhi	r3,2
   20428:	dfc00815 	stw	ra,32(sp)
   2042c:	ddc00715 	stw	r23,28(sp)
   20430:	dd800615 	stw	r22,24(sp)
   20434:	dd400515 	stw	r21,20(sp)
   20438:	dd000415 	stw	r20,16(sp)
   2043c:	dcc00315 	stw	r19,12(sp)
   20440:	dc800215 	stw	r18,8(sp)
   20444:	dc400115 	stw	r17,4(sp)
   20448:	dc000015 	stw	r16,0(sp)
   2044c:	18c10504 	addi	r3,r3,1044
   20450:	24000117 	ldw	r16,4(r4)
   20454:	20c00f15 	stw	r3,60(r4)
   20458:	2080bb04 	addi	r2,r4,748
   2045c:	00c000c4 	movi	r3,3
   20460:	20c0b915 	stw	r3,740(r4)
   20464:	2080ba15 	stw	r2,744(r4)
   20468:	2000b815 	stw	zero,736(r4)
   2046c:	05c00204 	movi	r23,8
   20470:	00800104 	movi	r2,4
   20474:	2025883a 	mov	r18,r4
   20478:	b80d883a 	mov	r6,r23
   2047c:	81001704 	addi	r4,r16,92
   20480:	000b883a 	mov	r5,zero
   20484:	80000015 	stw	zero,0(r16)
   20488:	80000115 	stw	zero,4(r16)
   2048c:	80000215 	stw	zero,8(r16)
   20490:	8080030d 	sth	r2,12(r16)
   20494:	80001915 	stw	zero,100(r16)
   20498:	8000038d 	sth	zero,14(r16)
   2049c:	80000415 	stw	zero,16(r16)
   204a0:	80000515 	stw	zero,20(r16)
   204a4:	80000615 	stw	zero,24(r16)
   204a8:	00219a00 	call	219a0 <memset>
   204ac:	058000b4 	movhi	r22,2
   204b0:	94400217 	ldw	r17,8(r18)
   204b4:	054000b4 	movhi	r21,2
   204b8:	050000b4 	movhi	r20,2
   204bc:	04c000b4 	movhi	r19,2
   204c0:	b5882004 	addi	r22,r22,8320
   204c4:	ad483704 	addi	r21,r21,8412
   204c8:	a5085604 	addi	r20,r20,8536
   204cc:	9cc86d04 	addi	r19,r19,8628
   204d0:	85800815 	stw	r22,32(r16)
   204d4:	85400915 	stw	r21,36(r16)
   204d8:	85000a15 	stw	r20,40(r16)
   204dc:	84c00b15 	stw	r19,44(r16)
   204e0:	84000715 	stw	r16,28(r16)
   204e4:	00800284 	movi	r2,10
   204e8:	8880030d 	sth	r2,12(r17)
   204ec:	00800044 	movi	r2,1
   204f0:	b80d883a 	mov	r6,r23
   204f4:	89001704 	addi	r4,r17,92
   204f8:	000b883a 	mov	r5,zero
   204fc:	88000015 	stw	zero,0(r17)
   20500:	88000115 	stw	zero,4(r17)
   20504:	88000215 	stw	zero,8(r17)
   20508:	88001915 	stw	zero,100(r17)
   2050c:	8880038d 	sth	r2,14(r17)
   20510:	88000415 	stw	zero,16(r17)
   20514:	88000515 	stw	zero,20(r17)
   20518:	88000615 	stw	zero,24(r17)
   2051c:	00219a00 	call	219a0 <memset>
   20520:	94000317 	ldw	r16,12(r18)
   20524:	00800484 	movi	r2,18
   20528:	8c400715 	stw	r17,28(r17)
   2052c:	8d800815 	stw	r22,32(r17)
   20530:	8d400915 	stw	r21,36(r17)
   20534:	8d000a15 	stw	r20,40(r17)
   20538:	8cc00b15 	stw	r19,44(r17)
   2053c:	8080030d 	sth	r2,12(r16)
   20540:	00800084 	movi	r2,2
   20544:	80000015 	stw	zero,0(r16)
   20548:	80000115 	stw	zero,4(r16)
   2054c:	80000215 	stw	zero,8(r16)
   20550:	80001915 	stw	zero,100(r16)
   20554:	8080038d 	sth	r2,14(r16)
   20558:	80000415 	stw	zero,16(r16)
   2055c:	80000515 	stw	zero,20(r16)
   20560:	80000615 	stw	zero,24(r16)
   20564:	b80d883a 	mov	r6,r23
   20568:	000b883a 	mov	r5,zero
   2056c:	81001704 	addi	r4,r16,92
   20570:	00219a00 	call	219a0 <memset>
   20574:	00800044 	movi	r2,1
   20578:	84000715 	stw	r16,28(r16)
   2057c:	85800815 	stw	r22,32(r16)
   20580:	85400915 	stw	r21,36(r16)
   20584:	85000a15 	stw	r20,40(r16)
   20588:	84c00b15 	stw	r19,44(r16)
   2058c:	90800e15 	stw	r2,56(r18)
   20590:	dfc00817 	ldw	ra,32(sp)
   20594:	ddc00717 	ldw	r23,28(sp)
   20598:	dd800617 	ldw	r22,24(sp)
   2059c:	dd400517 	ldw	r21,20(sp)
   205a0:	dd000417 	ldw	r20,16(sp)
   205a4:	dcc00317 	ldw	r19,12(sp)
   205a8:	dc800217 	ldw	r18,8(sp)
   205ac:	dc400117 	ldw	r17,4(sp)
   205b0:	dc000017 	ldw	r16,0(sp)
   205b4:	dec00904 	addi	sp,sp,36
   205b8:	f800283a 	ret

000205bc <__fp_lock>:
   205bc:	0005883a 	mov	r2,zero
   205c0:	f800283a 	ret

000205c4 <__sfmoreglue>:
   205c4:	defffc04 	addi	sp,sp,-16
   205c8:	dc800215 	stw	r18,8(sp)
   205cc:	2825883a 	mov	r18,r5
   205d0:	dc000015 	stw	r16,0(sp)
   205d4:	01401a04 	movi	r5,104
   205d8:	2021883a 	mov	r16,r4
   205dc:	913fffc4 	addi	r4,r18,-1
   205e0:	dfc00315 	stw	ra,12(sp)
   205e4:	dc400115 	stw	r17,4(sp)
   205e8:	00230840 	call	23084 <__mulsi3>
   205ec:	8009883a 	mov	r4,r16
   205f0:	11401d04 	addi	r5,r2,116
   205f4:	1023883a 	mov	r17,r2
   205f8:	0020e0c0 	call	20e0c <_malloc_r>
   205fc:	1021883a 	mov	r16,r2
   20600:	10000726 	beq	r2,zero,20620 <__sfmoreglue+0x5c>
   20604:	11000304 	addi	r4,r2,12
   20608:	10000015 	stw	zero,0(r2)
   2060c:	14800115 	stw	r18,4(r2)
   20610:	11000215 	stw	r4,8(r2)
   20614:	89801a04 	addi	r6,r17,104
   20618:	000b883a 	mov	r5,zero
   2061c:	00219a00 	call	219a0 <memset>
   20620:	8005883a 	mov	r2,r16
   20624:	dfc00317 	ldw	ra,12(sp)
   20628:	dc800217 	ldw	r18,8(sp)
   2062c:	dc400117 	ldw	r17,4(sp)
   20630:	dc000017 	ldw	r16,0(sp)
   20634:	dec00404 	addi	sp,sp,16
   20638:	f800283a 	ret

0002063c <__sfp>:
   2063c:	defffb04 	addi	sp,sp,-20
   20640:	dc000015 	stw	r16,0(sp)
   20644:	040000f4 	movhi	r16,3
   20648:	84269c04 	addi	r16,r16,-26000
   2064c:	dcc00315 	stw	r19,12(sp)
   20650:	2027883a 	mov	r19,r4
   20654:	81000017 	ldw	r4,0(r16)
   20658:	dfc00415 	stw	ra,16(sp)
   2065c:	dc800215 	stw	r18,8(sp)
   20660:	20800e17 	ldw	r2,56(r4)
   20664:	dc400115 	stw	r17,4(sp)
   20668:	1000021e 	bne	r2,zero,20674 <__sfp+0x38>
   2066c:	00204200 	call	20420 <__sinit.part.1>
   20670:	81000017 	ldw	r4,0(r16)
   20674:	2480b804 	addi	r18,r4,736
   20678:	047fffc4 	movi	r17,-1
   2067c:	91000117 	ldw	r4,4(r18)
   20680:	94000217 	ldw	r16,8(r18)
   20684:	213fffc4 	addi	r4,r4,-1
   20688:	20000a16 	blt	r4,zero,206b4 <__sfp+0x78>
   2068c:	8080030f 	ldh	r2,12(r16)
   20690:	10000c26 	beq	r2,zero,206c4 <__sfp+0x88>
   20694:	80c01d04 	addi	r3,r16,116
   20698:	00000206 	br	206a4 <__sfp+0x68>
   2069c:	18bfe60f 	ldh	r2,-104(r3)
   206a0:	10000826 	beq	r2,zero,206c4 <__sfp+0x88>
   206a4:	213fffc4 	addi	r4,r4,-1
   206a8:	1c3ffd04 	addi	r16,r3,-12
   206ac:	18c01a04 	addi	r3,r3,104
   206b0:	247ffa1e 	bne	r4,r17,2069c <__alt_data_end+0xfffe769c>
   206b4:	90800017 	ldw	r2,0(r18)
   206b8:	10001d26 	beq	r2,zero,20730 <__sfp+0xf4>
   206bc:	1025883a 	mov	r18,r2
   206c0:	003fee06 	br	2067c <__alt_data_end+0xfffe767c>
   206c4:	00bfffc4 	movi	r2,-1
   206c8:	8080038d 	sth	r2,14(r16)
   206cc:	00800044 	movi	r2,1
   206d0:	8080030d 	sth	r2,12(r16)
   206d4:	80001915 	stw	zero,100(r16)
   206d8:	80000015 	stw	zero,0(r16)
   206dc:	80000215 	stw	zero,8(r16)
   206e0:	80000115 	stw	zero,4(r16)
   206e4:	80000415 	stw	zero,16(r16)
   206e8:	80000515 	stw	zero,20(r16)
   206ec:	80000615 	stw	zero,24(r16)
   206f0:	01800204 	movi	r6,8
   206f4:	000b883a 	mov	r5,zero
   206f8:	81001704 	addi	r4,r16,92
   206fc:	00219a00 	call	219a0 <memset>
   20700:	8005883a 	mov	r2,r16
   20704:	80000c15 	stw	zero,48(r16)
   20708:	80000d15 	stw	zero,52(r16)
   2070c:	80001115 	stw	zero,68(r16)
   20710:	80001215 	stw	zero,72(r16)
   20714:	dfc00417 	ldw	ra,16(sp)
   20718:	dcc00317 	ldw	r19,12(sp)
   2071c:	dc800217 	ldw	r18,8(sp)
   20720:	dc400117 	ldw	r17,4(sp)
   20724:	dc000017 	ldw	r16,0(sp)
   20728:	dec00504 	addi	sp,sp,20
   2072c:	f800283a 	ret
   20730:	01400104 	movi	r5,4
   20734:	9809883a 	mov	r4,r19
   20738:	00205c40 	call	205c4 <__sfmoreglue>
   2073c:	90800015 	stw	r2,0(r18)
   20740:	103fde1e 	bne	r2,zero,206bc <__alt_data_end+0xfffe76bc>
   20744:	00800304 	movi	r2,12
   20748:	98800015 	stw	r2,0(r19)
   2074c:	0005883a 	mov	r2,zero
   20750:	003ff006 	br	20714 <__alt_data_end+0xfffe7714>

00020754 <_cleanup>:
   20754:	008000f4 	movhi	r2,3
   20758:	10a69c04 	addi	r2,r2,-26000
   2075c:	11000017 	ldw	r4,0(r2)
   20760:	014000b4 	movhi	r5,2
   20764:	2948f104 	addi	r5,r5,9156
   20768:	0020d481 	jmpi	20d48 <_fwalk_reent>

0002076c <__sinit>:
   2076c:	20800e17 	ldw	r2,56(r4)
   20770:	10000126 	beq	r2,zero,20778 <__sinit+0xc>
   20774:	f800283a 	ret
   20778:	00204201 	jmpi	20420 <__sinit.part.1>

0002077c <__sfp_lock_acquire>:
   2077c:	f800283a 	ret

00020780 <__sfp_lock_release>:
   20780:	f800283a 	ret

00020784 <__sinit_lock_acquire>:
   20784:	f800283a 	ret

00020788 <__sinit_lock_release>:
   20788:	f800283a 	ret

0002078c <__fp_lock_all>:
   2078c:	008000f4 	movhi	r2,3
   20790:	10a69d04 	addi	r2,r2,-25996
   20794:	11000017 	ldw	r4,0(r2)
   20798:	014000b4 	movhi	r5,2
   2079c:	29416f04 	addi	r5,r5,1468
   207a0:	0020c841 	jmpi	20c84 <_fwalk>

000207a4 <__fp_unlock_all>:
   207a4:	008000f4 	movhi	r2,3
   207a8:	10a69d04 	addi	r2,r2,-25996
   207ac:	11000017 	ldw	r4,0(r2)
   207b0:	014000b4 	movhi	r5,2
   207b4:	29410304 	addi	r5,r5,1036
   207b8:	0020c841 	jmpi	20c84 <_fwalk>

000207bc <__sfvwrite_r>:
   207bc:	30800217 	ldw	r2,8(r6)
   207c0:	10006726 	beq	r2,zero,20960 <__sfvwrite_r+0x1a4>
   207c4:	28c0030b 	ldhu	r3,12(r5)
   207c8:	defff404 	addi	sp,sp,-48
   207cc:	dd400715 	stw	r21,28(sp)
   207d0:	dd000615 	stw	r20,24(sp)
   207d4:	dc000215 	stw	r16,8(sp)
   207d8:	dfc00b15 	stw	ra,44(sp)
   207dc:	df000a15 	stw	fp,40(sp)
   207e0:	ddc00915 	stw	r23,36(sp)
   207e4:	dd800815 	stw	r22,32(sp)
   207e8:	dcc00515 	stw	r19,20(sp)
   207ec:	dc800415 	stw	r18,16(sp)
   207f0:	dc400315 	stw	r17,12(sp)
   207f4:	1880020c 	andi	r2,r3,8
   207f8:	2821883a 	mov	r16,r5
   207fc:	202b883a 	mov	r21,r4
   20800:	3029883a 	mov	r20,r6
   20804:	10002726 	beq	r2,zero,208a4 <__sfvwrite_r+0xe8>
   20808:	28800417 	ldw	r2,16(r5)
   2080c:	10002526 	beq	r2,zero,208a4 <__sfvwrite_r+0xe8>
   20810:	1880008c 	andi	r2,r3,2
   20814:	a4400017 	ldw	r17,0(r20)
   20818:	10002a26 	beq	r2,zero,208c4 <__sfvwrite_r+0x108>
   2081c:	05a00034 	movhi	r22,32768
   20820:	0027883a 	mov	r19,zero
   20824:	0025883a 	mov	r18,zero
   20828:	b5bf0004 	addi	r22,r22,-1024
   2082c:	980d883a 	mov	r6,r19
   20830:	a809883a 	mov	r4,r21
   20834:	90004626 	beq	r18,zero,20950 <__sfvwrite_r+0x194>
   20838:	900f883a 	mov	r7,r18
   2083c:	b480022e 	bgeu	r22,r18,20848 <__sfvwrite_r+0x8c>
   20840:	01e00034 	movhi	r7,32768
   20844:	39ff0004 	addi	r7,r7,-1024
   20848:	80800917 	ldw	r2,36(r16)
   2084c:	81400717 	ldw	r5,28(r16)
   20850:	103ee83a 	callr	r2
   20854:	00805a0e 	bge	zero,r2,209c0 <__sfvwrite_r+0x204>
   20858:	a0c00217 	ldw	r3,8(r20)
   2085c:	98a7883a 	add	r19,r19,r2
   20860:	90a5c83a 	sub	r18,r18,r2
   20864:	1885c83a 	sub	r2,r3,r2
   20868:	a0800215 	stw	r2,8(r20)
   2086c:	103fef1e 	bne	r2,zero,2082c <__alt_data_end+0xfffe782c>
   20870:	0005883a 	mov	r2,zero
   20874:	dfc00b17 	ldw	ra,44(sp)
   20878:	df000a17 	ldw	fp,40(sp)
   2087c:	ddc00917 	ldw	r23,36(sp)
   20880:	dd800817 	ldw	r22,32(sp)
   20884:	dd400717 	ldw	r21,28(sp)
   20888:	dd000617 	ldw	r20,24(sp)
   2088c:	dcc00517 	ldw	r19,20(sp)
   20890:	dc800417 	ldw	r18,16(sp)
   20894:	dc400317 	ldw	r17,12(sp)
   20898:	dc000217 	ldw	r16,8(sp)
   2089c:	dec00c04 	addi	sp,sp,48
   208a0:	f800283a 	ret
   208a4:	800b883a 	mov	r5,r16
   208a8:	a809883a 	mov	r4,r21
   208ac:	002221c0 	call	2221c <__swsetup_r>
   208b0:	1000ee1e 	bne	r2,zero,20c6c <__sfvwrite_r+0x4b0>
   208b4:	80c0030b 	ldhu	r3,12(r16)
   208b8:	a4400017 	ldw	r17,0(r20)
   208bc:	1880008c 	andi	r2,r3,2
   208c0:	103fd61e 	bne	r2,zero,2081c <__alt_data_end+0xfffe781c>
   208c4:	1880004c 	andi	r2,r3,1
   208c8:	1000421e 	bne	r2,zero,209d4 <__sfvwrite_r+0x218>
   208cc:	0039883a 	mov	fp,zero
   208d0:	0025883a 	mov	r18,zero
   208d4:	90001a26 	beq	r18,zero,20940 <__sfvwrite_r+0x184>
   208d8:	1880800c 	andi	r2,r3,512
   208dc:	84c00217 	ldw	r19,8(r16)
   208e0:	10002126 	beq	r2,zero,20968 <__sfvwrite_r+0x1ac>
   208e4:	982f883a 	mov	r23,r19
   208e8:	94c09636 	bltu	r18,r19,20b44 <__sfvwrite_r+0x388>
   208ec:	1881200c 	andi	r2,r3,1152
   208f0:	1000a11e 	bne	r2,zero,20b78 <__sfvwrite_r+0x3bc>
   208f4:	81000017 	ldw	r4,0(r16)
   208f8:	b80d883a 	mov	r6,r23
   208fc:	e00b883a 	mov	r5,fp
   20900:	00218440 	call	21844 <memmove>
   20904:	80c00217 	ldw	r3,8(r16)
   20908:	81000017 	ldw	r4,0(r16)
   2090c:	9005883a 	mov	r2,r18
   20910:	1ce7c83a 	sub	r19,r3,r19
   20914:	25cf883a 	add	r7,r4,r23
   20918:	84c00215 	stw	r19,8(r16)
   2091c:	81c00015 	stw	r7,0(r16)
   20920:	a0c00217 	ldw	r3,8(r20)
   20924:	e0b9883a 	add	fp,fp,r2
   20928:	90a5c83a 	sub	r18,r18,r2
   2092c:	18a7c83a 	sub	r19,r3,r2
   20930:	a4c00215 	stw	r19,8(r20)
   20934:	983fce26 	beq	r19,zero,20870 <__alt_data_end+0xfffe7870>
   20938:	80c0030b 	ldhu	r3,12(r16)
   2093c:	903fe61e 	bne	r18,zero,208d8 <__alt_data_end+0xfffe78d8>
   20940:	8f000017 	ldw	fp,0(r17)
   20944:	8c800117 	ldw	r18,4(r17)
   20948:	8c400204 	addi	r17,r17,8
   2094c:	003fe106 	br	208d4 <__alt_data_end+0xfffe78d4>
   20950:	8cc00017 	ldw	r19,0(r17)
   20954:	8c800117 	ldw	r18,4(r17)
   20958:	8c400204 	addi	r17,r17,8
   2095c:	003fb306 	br	2082c <__alt_data_end+0xfffe782c>
   20960:	0005883a 	mov	r2,zero
   20964:	f800283a 	ret
   20968:	81000017 	ldw	r4,0(r16)
   2096c:	80800417 	ldw	r2,16(r16)
   20970:	11005a36 	bltu	r2,r4,20adc <__sfvwrite_r+0x320>
   20974:	85c00517 	ldw	r23,20(r16)
   20978:	95c05836 	bltu	r18,r23,20adc <__sfvwrite_r+0x320>
   2097c:	00a00034 	movhi	r2,32768
   20980:	10bfffc4 	addi	r2,r2,-1
   20984:	9009883a 	mov	r4,r18
   20988:	1480012e 	bgeu	r2,r18,20990 <__sfvwrite_r+0x1d4>
   2098c:	1009883a 	mov	r4,r2
   20990:	b80b883a 	mov	r5,r23
   20994:	0022ed00 	call	22ed0 <__divsi3>
   20998:	b80b883a 	mov	r5,r23
   2099c:	1009883a 	mov	r4,r2
   209a0:	00230840 	call	23084 <__mulsi3>
   209a4:	81400717 	ldw	r5,28(r16)
   209a8:	80c00917 	ldw	r3,36(r16)
   209ac:	100f883a 	mov	r7,r2
   209b0:	e00d883a 	mov	r6,fp
   209b4:	a809883a 	mov	r4,r21
   209b8:	183ee83a 	callr	r3
   209bc:	00bfd816 	blt	zero,r2,20920 <__alt_data_end+0xfffe7920>
   209c0:	8080030b 	ldhu	r2,12(r16)
   209c4:	10801014 	ori	r2,r2,64
   209c8:	8080030d 	sth	r2,12(r16)
   209cc:	00bfffc4 	movi	r2,-1
   209d0:	003fa806 	br	20874 <__alt_data_end+0xfffe7874>
   209d4:	0027883a 	mov	r19,zero
   209d8:	0011883a 	mov	r8,zero
   209dc:	0039883a 	mov	fp,zero
   209e0:	0025883a 	mov	r18,zero
   209e4:	90001f26 	beq	r18,zero,20a64 <__sfvwrite_r+0x2a8>
   209e8:	40005a26 	beq	r8,zero,20b54 <__sfvwrite_r+0x398>
   209ec:	982d883a 	mov	r22,r19
   209f0:	94c0012e 	bgeu	r18,r19,209f8 <__sfvwrite_r+0x23c>
   209f4:	902d883a 	mov	r22,r18
   209f8:	81000017 	ldw	r4,0(r16)
   209fc:	80800417 	ldw	r2,16(r16)
   20a00:	b02f883a 	mov	r23,r22
   20a04:	81c00517 	ldw	r7,20(r16)
   20a08:	1100032e 	bgeu	r2,r4,20a18 <__sfvwrite_r+0x25c>
   20a0c:	80c00217 	ldw	r3,8(r16)
   20a10:	38c7883a 	add	r3,r7,r3
   20a14:	1d801816 	blt	r3,r22,20a78 <__sfvwrite_r+0x2bc>
   20a18:	b1c03e16 	blt	r22,r7,20b14 <__sfvwrite_r+0x358>
   20a1c:	80800917 	ldw	r2,36(r16)
   20a20:	81400717 	ldw	r5,28(r16)
   20a24:	e00d883a 	mov	r6,fp
   20a28:	da000115 	stw	r8,4(sp)
   20a2c:	a809883a 	mov	r4,r21
   20a30:	103ee83a 	callr	r2
   20a34:	102f883a 	mov	r23,r2
   20a38:	da000117 	ldw	r8,4(sp)
   20a3c:	00bfe00e 	bge	zero,r2,209c0 <__alt_data_end+0xfffe79c0>
   20a40:	9de7c83a 	sub	r19,r19,r23
   20a44:	98001f26 	beq	r19,zero,20ac4 <__sfvwrite_r+0x308>
   20a48:	a0800217 	ldw	r2,8(r20)
   20a4c:	e5f9883a 	add	fp,fp,r23
   20a50:	95e5c83a 	sub	r18,r18,r23
   20a54:	15efc83a 	sub	r23,r2,r23
   20a58:	a5c00215 	stw	r23,8(r20)
   20a5c:	b83f8426 	beq	r23,zero,20870 <__alt_data_end+0xfffe7870>
   20a60:	903fe11e 	bne	r18,zero,209e8 <__alt_data_end+0xfffe79e8>
   20a64:	8f000017 	ldw	fp,0(r17)
   20a68:	8c800117 	ldw	r18,4(r17)
   20a6c:	0011883a 	mov	r8,zero
   20a70:	8c400204 	addi	r17,r17,8
   20a74:	003fdb06 	br	209e4 <__alt_data_end+0xfffe79e4>
   20a78:	180d883a 	mov	r6,r3
   20a7c:	e00b883a 	mov	r5,fp
   20a80:	da000115 	stw	r8,4(sp)
   20a84:	d8c00015 	stw	r3,0(sp)
   20a88:	00218440 	call	21844 <memmove>
   20a8c:	d8c00017 	ldw	r3,0(sp)
   20a90:	80800017 	ldw	r2,0(r16)
   20a94:	800b883a 	mov	r5,r16
   20a98:	a809883a 	mov	r4,r21
   20a9c:	10c5883a 	add	r2,r2,r3
   20aa0:	80800015 	stw	r2,0(r16)
   20aa4:	d8c00015 	stw	r3,0(sp)
   20aa8:	00226e40 	call	226e4 <_fflush_r>
   20aac:	d8c00017 	ldw	r3,0(sp)
   20ab0:	da000117 	ldw	r8,4(sp)
   20ab4:	103fc21e 	bne	r2,zero,209c0 <__alt_data_end+0xfffe79c0>
   20ab8:	182f883a 	mov	r23,r3
   20abc:	9de7c83a 	sub	r19,r19,r23
   20ac0:	983fe11e 	bne	r19,zero,20a48 <__alt_data_end+0xfffe7a48>
   20ac4:	800b883a 	mov	r5,r16
   20ac8:	a809883a 	mov	r4,r21
   20acc:	00226e40 	call	226e4 <_fflush_r>
   20ad0:	103fbb1e 	bne	r2,zero,209c0 <__alt_data_end+0xfffe79c0>
   20ad4:	0011883a 	mov	r8,zero
   20ad8:	003fdb06 	br	20a48 <__alt_data_end+0xfffe7a48>
   20adc:	94c0012e 	bgeu	r18,r19,20ae4 <__sfvwrite_r+0x328>
   20ae0:	9027883a 	mov	r19,r18
   20ae4:	980d883a 	mov	r6,r19
   20ae8:	e00b883a 	mov	r5,fp
   20aec:	00218440 	call	21844 <memmove>
   20af0:	80800217 	ldw	r2,8(r16)
   20af4:	80c00017 	ldw	r3,0(r16)
   20af8:	14c5c83a 	sub	r2,r2,r19
   20afc:	1cc7883a 	add	r3,r3,r19
   20b00:	80800215 	stw	r2,8(r16)
   20b04:	80c00015 	stw	r3,0(r16)
   20b08:	10004326 	beq	r2,zero,20c18 <__sfvwrite_r+0x45c>
   20b0c:	9805883a 	mov	r2,r19
   20b10:	003f8306 	br	20920 <__alt_data_end+0xfffe7920>
   20b14:	b00d883a 	mov	r6,r22
   20b18:	e00b883a 	mov	r5,fp
   20b1c:	da000115 	stw	r8,4(sp)
   20b20:	00218440 	call	21844 <memmove>
   20b24:	80800217 	ldw	r2,8(r16)
   20b28:	80c00017 	ldw	r3,0(r16)
   20b2c:	da000117 	ldw	r8,4(sp)
   20b30:	1585c83a 	sub	r2,r2,r22
   20b34:	1dad883a 	add	r22,r3,r22
   20b38:	80800215 	stw	r2,8(r16)
   20b3c:	85800015 	stw	r22,0(r16)
   20b40:	003fbf06 	br	20a40 <__alt_data_end+0xfffe7a40>
   20b44:	81000017 	ldw	r4,0(r16)
   20b48:	9027883a 	mov	r19,r18
   20b4c:	902f883a 	mov	r23,r18
   20b50:	003f6906 	br	208f8 <__alt_data_end+0xfffe78f8>
   20b54:	900d883a 	mov	r6,r18
   20b58:	01400284 	movi	r5,10
   20b5c:	e009883a 	mov	r4,fp
   20b60:	00216180 	call	21618 <memchr>
   20b64:	10003e26 	beq	r2,zero,20c60 <__sfvwrite_r+0x4a4>
   20b68:	10800044 	addi	r2,r2,1
   20b6c:	1727c83a 	sub	r19,r2,fp
   20b70:	02000044 	movi	r8,1
   20b74:	003f9d06 	br	209ec <__alt_data_end+0xfffe79ec>
   20b78:	80800517 	ldw	r2,20(r16)
   20b7c:	81400417 	ldw	r5,16(r16)
   20b80:	81c00017 	ldw	r7,0(r16)
   20b84:	10a7883a 	add	r19,r2,r2
   20b88:	9885883a 	add	r2,r19,r2
   20b8c:	1026d7fa 	srli	r19,r2,31
   20b90:	396dc83a 	sub	r22,r7,r5
   20b94:	b1000044 	addi	r4,r22,1
   20b98:	9885883a 	add	r2,r19,r2
   20b9c:	1027d07a 	srai	r19,r2,1
   20ba0:	2485883a 	add	r2,r4,r18
   20ba4:	980d883a 	mov	r6,r19
   20ba8:	9880022e 	bgeu	r19,r2,20bb4 <__sfvwrite_r+0x3f8>
   20bac:	1027883a 	mov	r19,r2
   20bb0:	100d883a 	mov	r6,r2
   20bb4:	18c1000c 	andi	r3,r3,1024
   20bb8:	18001c26 	beq	r3,zero,20c2c <__sfvwrite_r+0x470>
   20bbc:	300b883a 	mov	r5,r6
   20bc0:	a809883a 	mov	r4,r21
   20bc4:	0020e0c0 	call	20e0c <_malloc_r>
   20bc8:	102f883a 	mov	r23,r2
   20bcc:	10002926 	beq	r2,zero,20c74 <__sfvwrite_r+0x4b8>
   20bd0:	81400417 	ldw	r5,16(r16)
   20bd4:	b00d883a 	mov	r6,r22
   20bd8:	1009883a 	mov	r4,r2
   20bdc:	00216fc0 	call	216fc <memcpy>
   20be0:	8080030b 	ldhu	r2,12(r16)
   20be4:	00fedfc4 	movi	r3,-1153
   20be8:	10c4703a 	and	r2,r2,r3
   20bec:	10802014 	ori	r2,r2,128
   20bf0:	8080030d 	sth	r2,12(r16)
   20bf4:	bd89883a 	add	r4,r23,r22
   20bf8:	9d8fc83a 	sub	r7,r19,r22
   20bfc:	85c00415 	stw	r23,16(r16)
   20c00:	84c00515 	stw	r19,20(r16)
   20c04:	81000015 	stw	r4,0(r16)
   20c08:	9027883a 	mov	r19,r18
   20c0c:	81c00215 	stw	r7,8(r16)
   20c10:	902f883a 	mov	r23,r18
   20c14:	003f3806 	br	208f8 <__alt_data_end+0xfffe78f8>
   20c18:	800b883a 	mov	r5,r16
   20c1c:	a809883a 	mov	r4,r21
   20c20:	00226e40 	call	226e4 <_fflush_r>
   20c24:	103fb926 	beq	r2,zero,20b0c <__alt_data_end+0xfffe7b0c>
   20c28:	003f6506 	br	209c0 <__alt_data_end+0xfffe79c0>
   20c2c:	a809883a 	mov	r4,r21
   20c30:	0021ac80 	call	21ac8 <_realloc_r>
   20c34:	102f883a 	mov	r23,r2
   20c38:	103fee1e 	bne	r2,zero,20bf4 <__alt_data_end+0xfffe7bf4>
   20c3c:	81400417 	ldw	r5,16(r16)
   20c40:	a809883a 	mov	r4,r21
   20c44:	00228940 	call	22894 <_free_r>
   20c48:	8080030b 	ldhu	r2,12(r16)
   20c4c:	00ffdfc4 	movi	r3,-129
   20c50:	1884703a 	and	r2,r3,r2
   20c54:	00c00304 	movi	r3,12
   20c58:	a8c00015 	stw	r3,0(r21)
   20c5c:	003f5906 	br	209c4 <__alt_data_end+0xfffe79c4>
   20c60:	94c00044 	addi	r19,r18,1
   20c64:	02000044 	movi	r8,1
   20c68:	003f6006 	br	209ec <__alt_data_end+0xfffe79ec>
   20c6c:	00bfffc4 	movi	r2,-1
   20c70:	003f0006 	br	20874 <__alt_data_end+0xfffe7874>
   20c74:	00800304 	movi	r2,12
   20c78:	a8800015 	stw	r2,0(r21)
   20c7c:	8080030b 	ldhu	r2,12(r16)
   20c80:	003f5006 	br	209c4 <__alt_data_end+0xfffe79c4>

00020c84 <_fwalk>:
   20c84:	defff704 	addi	sp,sp,-36
   20c88:	dd000415 	stw	r20,16(sp)
   20c8c:	dfc00815 	stw	ra,32(sp)
   20c90:	ddc00715 	stw	r23,28(sp)
   20c94:	dd800615 	stw	r22,24(sp)
   20c98:	dd400515 	stw	r21,20(sp)
   20c9c:	dcc00315 	stw	r19,12(sp)
   20ca0:	dc800215 	stw	r18,8(sp)
   20ca4:	dc400115 	stw	r17,4(sp)
   20ca8:	dc000015 	stw	r16,0(sp)
   20cac:	2500b804 	addi	r20,r4,736
   20cb0:	a0002326 	beq	r20,zero,20d40 <_fwalk+0xbc>
   20cb4:	282b883a 	mov	r21,r5
   20cb8:	002f883a 	mov	r23,zero
   20cbc:	05800044 	movi	r22,1
   20cc0:	04ffffc4 	movi	r19,-1
   20cc4:	a4400117 	ldw	r17,4(r20)
   20cc8:	a4800217 	ldw	r18,8(r20)
   20ccc:	8c7fffc4 	addi	r17,r17,-1
   20cd0:	88000d16 	blt	r17,zero,20d08 <_fwalk+0x84>
   20cd4:	94000304 	addi	r16,r18,12
   20cd8:	94800384 	addi	r18,r18,14
   20cdc:	8080000b 	ldhu	r2,0(r16)
   20ce0:	8c7fffc4 	addi	r17,r17,-1
   20ce4:	813ffd04 	addi	r4,r16,-12
   20ce8:	b080042e 	bgeu	r22,r2,20cfc <_fwalk+0x78>
   20cec:	9080000f 	ldh	r2,0(r18)
   20cf0:	14c00226 	beq	r2,r19,20cfc <_fwalk+0x78>
   20cf4:	a83ee83a 	callr	r21
   20cf8:	b8aeb03a 	or	r23,r23,r2
   20cfc:	84001a04 	addi	r16,r16,104
   20d00:	94801a04 	addi	r18,r18,104
   20d04:	8cfff51e 	bne	r17,r19,20cdc <__alt_data_end+0xfffe7cdc>
   20d08:	a5000017 	ldw	r20,0(r20)
   20d0c:	a03fed1e 	bne	r20,zero,20cc4 <__alt_data_end+0xfffe7cc4>
   20d10:	b805883a 	mov	r2,r23
   20d14:	dfc00817 	ldw	ra,32(sp)
   20d18:	ddc00717 	ldw	r23,28(sp)
   20d1c:	dd800617 	ldw	r22,24(sp)
   20d20:	dd400517 	ldw	r21,20(sp)
   20d24:	dd000417 	ldw	r20,16(sp)
   20d28:	dcc00317 	ldw	r19,12(sp)
   20d2c:	dc800217 	ldw	r18,8(sp)
   20d30:	dc400117 	ldw	r17,4(sp)
   20d34:	dc000017 	ldw	r16,0(sp)
   20d38:	dec00904 	addi	sp,sp,36
   20d3c:	f800283a 	ret
   20d40:	002f883a 	mov	r23,zero
   20d44:	003ff206 	br	20d10 <__alt_data_end+0xfffe7d10>

00020d48 <_fwalk_reent>:
   20d48:	defff704 	addi	sp,sp,-36
   20d4c:	dd000415 	stw	r20,16(sp)
   20d50:	dfc00815 	stw	ra,32(sp)
   20d54:	ddc00715 	stw	r23,28(sp)
   20d58:	dd800615 	stw	r22,24(sp)
   20d5c:	dd400515 	stw	r21,20(sp)
   20d60:	dcc00315 	stw	r19,12(sp)
   20d64:	dc800215 	stw	r18,8(sp)
   20d68:	dc400115 	stw	r17,4(sp)
   20d6c:	dc000015 	stw	r16,0(sp)
   20d70:	2500b804 	addi	r20,r4,736
   20d74:	a0002326 	beq	r20,zero,20e04 <_fwalk_reent+0xbc>
   20d78:	282b883a 	mov	r21,r5
   20d7c:	2027883a 	mov	r19,r4
   20d80:	002f883a 	mov	r23,zero
   20d84:	05800044 	movi	r22,1
   20d88:	04bfffc4 	movi	r18,-1
   20d8c:	a4400117 	ldw	r17,4(r20)
   20d90:	a4000217 	ldw	r16,8(r20)
   20d94:	8c7fffc4 	addi	r17,r17,-1
   20d98:	88000c16 	blt	r17,zero,20dcc <_fwalk_reent+0x84>
   20d9c:	84000304 	addi	r16,r16,12
   20da0:	8080000b 	ldhu	r2,0(r16)
   20da4:	8c7fffc4 	addi	r17,r17,-1
   20da8:	817ffd04 	addi	r5,r16,-12
   20dac:	b080052e 	bgeu	r22,r2,20dc4 <_fwalk_reent+0x7c>
   20db0:	8080008f 	ldh	r2,2(r16)
   20db4:	9809883a 	mov	r4,r19
   20db8:	14800226 	beq	r2,r18,20dc4 <_fwalk_reent+0x7c>
   20dbc:	a83ee83a 	callr	r21
   20dc0:	b8aeb03a 	or	r23,r23,r2
   20dc4:	84001a04 	addi	r16,r16,104
   20dc8:	8cbff51e 	bne	r17,r18,20da0 <__alt_data_end+0xfffe7da0>
   20dcc:	a5000017 	ldw	r20,0(r20)
   20dd0:	a03fee1e 	bne	r20,zero,20d8c <__alt_data_end+0xfffe7d8c>
   20dd4:	b805883a 	mov	r2,r23
   20dd8:	dfc00817 	ldw	ra,32(sp)
   20ddc:	ddc00717 	ldw	r23,28(sp)
   20de0:	dd800617 	ldw	r22,24(sp)
   20de4:	dd400517 	ldw	r21,20(sp)
   20de8:	dd000417 	ldw	r20,16(sp)
   20dec:	dcc00317 	ldw	r19,12(sp)
   20df0:	dc800217 	ldw	r18,8(sp)
   20df4:	dc400117 	ldw	r17,4(sp)
   20df8:	dc000017 	ldw	r16,0(sp)
   20dfc:	dec00904 	addi	sp,sp,36
   20e00:	f800283a 	ret
   20e04:	002f883a 	mov	r23,zero
   20e08:	003ff206 	br	20dd4 <__alt_data_end+0xfffe7dd4>

00020e0c <_malloc_r>:
   20e0c:	defff504 	addi	sp,sp,-44
   20e10:	dc800315 	stw	r18,12(sp)
   20e14:	dfc00a15 	stw	ra,40(sp)
   20e18:	df000915 	stw	fp,36(sp)
   20e1c:	ddc00815 	stw	r23,32(sp)
   20e20:	dd800715 	stw	r22,28(sp)
   20e24:	dd400615 	stw	r21,24(sp)
   20e28:	dd000515 	stw	r20,20(sp)
   20e2c:	dcc00415 	stw	r19,16(sp)
   20e30:	dc400215 	stw	r17,8(sp)
   20e34:	dc000115 	stw	r16,4(sp)
   20e38:	288002c4 	addi	r2,r5,11
   20e3c:	00c00584 	movi	r3,22
   20e40:	2025883a 	mov	r18,r4
   20e44:	18807f2e 	bgeu	r3,r2,21044 <_malloc_r+0x238>
   20e48:	047ffe04 	movi	r17,-8
   20e4c:	1462703a 	and	r17,r2,r17
   20e50:	8800a316 	blt	r17,zero,210e0 <_malloc_r+0x2d4>
   20e54:	8940a236 	bltu	r17,r5,210e0 <_malloc_r+0x2d4>
   20e58:	00236480 	call	23648 <__malloc_lock>
   20e5c:	00807dc4 	movi	r2,503
   20e60:	1441e92e 	bgeu	r2,r17,21608 <_malloc_r+0x7fc>
   20e64:	8804d27a 	srli	r2,r17,9
   20e68:	1000a126 	beq	r2,zero,210f0 <_malloc_r+0x2e4>
   20e6c:	00c00104 	movi	r3,4
   20e70:	18811e36 	bltu	r3,r2,212ec <_malloc_r+0x4e0>
   20e74:	8804d1ba 	srli	r2,r17,6
   20e78:	12000e44 	addi	r8,r2,57
   20e7c:	11c00e04 	addi	r7,r2,56
   20e80:	4209883a 	add	r4,r8,r8
   20e84:	04c000f4 	movhi	r19,3
   20e88:	2109883a 	add	r4,r4,r4
   20e8c:	9ce0fd04 	addi	r19,r19,-31756
   20e90:	2109883a 	add	r4,r4,r4
   20e94:	9909883a 	add	r4,r19,r4
   20e98:	24000117 	ldw	r16,4(r4)
   20e9c:	213ffe04 	addi	r4,r4,-8
   20ea0:	24009726 	beq	r4,r16,21100 <_malloc_r+0x2f4>
   20ea4:	80800117 	ldw	r2,4(r16)
   20ea8:	01bfff04 	movi	r6,-4
   20eac:	014003c4 	movi	r5,15
   20eb0:	1184703a 	and	r2,r2,r6
   20eb4:	1447c83a 	sub	r3,r2,r17
   20eb8:	28c00716 	blt	r5,r3,20ed8 <_malloc_r+0xcc>
   20ebc:	1800920e 	bge	r3,zero,21108 <_malloc_r+0x2fc>
   20ec0:	84000317 	ldw	r16,12(r16)
   20ec4:	24008e26 	beq	r4,r16,21100 <_malloc_r+0x2f4>
   20ec8:	80800117 	ldw	r2,4(r16)
   20ecc:	1184703a 	and	r2,r2,r6
   20ed0:	1447c83a 	sub	r3,r2,r17
   20ed4:	28fff90e 	bge	r5,r3,20ebc <__alt_data_end+0xfffe7ebc>
   20ed8:	3809883a 	mov	r4,r7
   20edc:	018000f4 	movhi	r6,3
   20ee0:	9c000417 	ldw	r16,16(r19)
   20ee4:	31a0fd04 	addi	r6,r6,-31756
   20ee8:	32000204 	addi	r8,r6,8
   20eec:	82013426 	beq	r16,r8,213c0 <_malloc_r+0x5b4>
   20ef0:	80c00117 	ldw	r3,4(r16)
   20ef4:	00bfff04 	movi	r2,-4
   20ef8:	188e703a 	and	r7,r3,r2
   20efc:	3c45c83a 	sub	r2,r7,r17
   20f00:	00c003c4 	movi	r3,15
   20f04:	18811f16 	blt	r3,r2,21384 <_malloc_r+0x578>
   20f08:	32000515 	stw	r8,20(r6)
   20f0c:	32000415 	stw	r8,16(r6)
   20f10:	10007f0e 	bge	r2,zero,21110 <_malloc_r+0x304>
   20f14:	00807fc4 	movi	r2,511
   20f18:	11c0fd36 	bltu	r2,r7,21310 <_malloc_r+0x504>
   20f1c:	3806d0fa 	srli	r3,r7,3
   20f20:	01c00044 	movi	r7,1
   20f24:	30800117 	ldw	r2,4(r6)
   20f28:	19400044 	addi	r5,r3,1
   20f2c:	294b883a 	add	r5,r5,r5
   20f30:	1807d0ba 	srai	r3,r3,2
   20f34:	294b883a 	add	r5,r5,r5
   20f38:	294b883a 	add	r5,r5,r5
   20f3c:	298b883a 	add	r5,r5,r6
   20f40:	38c6983a 	sll	r3,r7,r3
   20f44:	29c00017 	ldw	r7,0(r5)
   20f48:	2a7ffe04 	addi	r9,r5,-8
   20f4c:	1886b03a 	or	r3,r3,r2
   20f50:	82400315 	stw	r9,12(r16)
   20f54:	81c00215 	stw	r7,8(r16)
   20f58:	30c00115 	stw	r3,4(r6)
   20f5c:	2c000015 	stw	r16,0(r5)
   20f60:	3c000315 	stw	r16,12(r7)
   20f64:	2005d0ba 	srai	r2,r4,2
   20f68:	01400044 	movi	r5,1
   20f6c:	288a983a 	sll	r5,r5,r2
   20f70:	19406f36 	bltu	r3,r5,21130 <_malloc_r+0x324>
   20f74:	28c4703a 	and	r2,r5,r3
   20f78:	10000a1e 	bne	r2,zero,20fa4 <_malloc_r+0x198>
   20f7c:	00bfff04 	movi	r2,-4
   20f80:	294b883a 	add	r5,r5,r5
   20f84:	2088703a 	and	r4,r4,r2
   20f88:	28c4703a 	and	r2,r5,r3
   20f8c:	21000104 	addi	r4,r4,4
   20f90:	1000041e 	bne	r2,zero,20fa4 <_malloc_r+0x198>
   20f94:	294b883a 	add	r5,r5,r5
   20f98:	28c4703a 	and	r2,r5,r3
   20f9c:	21000104 	addi	r4,r4,4
   20fa0:	103ffc26 	beq	r2,zero,20f94 <__alt_data_end+0xfffe7f94>
   20fa4:	02bfff04 	movi	r10,-4
   20fa8:	024003c4 	movi	r9,15
   20fac:	21800044 	addi	r6,r4,1
   20fb0:	318d883a 	add	r6,r6,r6
   20fb4:	318d883a 	add	r6,r6,r6
   20fb8:	318d883a 	add	r6,r6,r6
   20fbc:	998d883a 	add	r6,r19,r6
   20fc0:	333ffe04 	addi	r12,r6,-8
   20fc4:	2017883a 	mov	r11,r4
   20fc8:	31800104 	addi	r6,r6,4
   20fcc:	34000017 	ldw	r16,0(r6)
   20fd0:	31fffd04 	addi	r7,r6,-12
   20fd4:	81c0041e 	bne	r16,r7,20fe8 <_malloc_r+0x1dc>
   20fd8:	0000fb06 	br	213c8 <_malloc_r+0x5bc>
   20fdc:	1801030e 	bge	r3,zero,213ec <_malloc_r+0x5e0>
   20fe0:	84000317 	ldw	r16,12(r16)
   20fe4:	81c0f826 	beq	r16,r7,213c8 <_malloc_r+0x5bc>
   20fe8:	80800117 	ldw	r2,4(r16)
   20fec:	1284703a 	and	r2,r2,r10
   20ff0:	1447c83a 	sub	r3,r2,r17
   20ff4:	48fff90e 	bge	r9,r3,20fdc <__alt_data_end+0xfffe7fdc>
   20ff8:	80800317 	ldw	r2,12(r16)
   20ffc:	81000217 	ldw	r4,8(r16)
   21000:	89400054 	ori	r5,r17,1
   21004:	81400115 	stw	r5,4(r16)
   21008:	20800315 	stw	r2,12(r4)
   2100c:	11000215 	stw	r4,8(r2)
   21010:	8463883a 	add	r17,r16,r17
   21014:	9c400515 	stw	r17,20(r19)
   21018:	9c400415 	stw	r17,16(r19)
   2101c:	18800054 	ori	r2,r3,1
   21020:	88800115 	stw	r2,4(r17)
   21024:	8a000315 	stw	r8,12(r17)
   21028:	8a000215 	stw	r8,8(r17)
   2102c:	88e3883a 	add	r17,r17,r3
   21030:	88c00015 	stw	r3,0(r17)
   21034:	9009883a 	mov	r4,r18
   21038:	002366c0 	call	2366c <__malloc_unlock>
   2103c:	80800204 	addi	r2,r16,8
   21040:	00001b06 	br	210b0 <_malloc_r+0x2a4>
   21044:	04400404 	movi	r17,16
   21048:	89402536 	bltu	r17,r5,210e0 <_malloc_r+0x2d4>
   2104c:	00236480 	call	23648 <__malloc_lock>
   21050:	00800184 	movi	r2,6
   21054:	01000084 	movi	r4,2
   21058:	04c000f4 	movhi	r19,3
   2105c:	1085883a 	add	r2,r2,r2
   21060:	9ce0fd04 	addi	r19,r19,-31756
   21064:	1085883a 	add	r2,r2,r2
   21068:	9885883a 	add	r2,r19,r2
   2106c:	14000117 	ldw	r16,4(r2)
   21070:	10fffe04 	addi	r3,r2,-8
   21074:	80c0d926 	beq	r16,r3,213dc <_malloc_r+0x5d0>
   21078:	80c00117 	ldw	r3,4(r16)
   2107c:	81000317 	ldw	r4,12(r16)
   21080:	00bfff04 	movi	r2,-4
   21084:	1884703a 	and	r2,r3,r2
   21088:	81400217 	ldw	r5,8(r16)
   2108c:	8085883a 	add	r2,r16,r2
   21090:	10c00117 	ldw	r3,4(r2)
   21094:	29000315 	stw	r4,12(r5)
   21098:	21400215 	stw	r5,8(r4)
   2109c:	18c00054 	ori	r3,r3,1
   210a0:	10c00115 	stw	r3,4(r2)
   210a4:	9009883a 	mov	r4,r18
   210a8:	002366c0 	call	2366c <__malloc_unlock>
   210ac:	80800204 	addi	r2,r16,8
   210b0:	dfc00a17 	ldw	ra,40(sp)
   210b4:	df000917 	ldw	fp,36(sp)
   210b8:	ddc00817 	ldw	r23,32(sp)
   210bc:	dd800717 	ldw	r22,28(sp)
   210c0:	dd400617 	ldw	r21,24(sp)
   210c4:	dd000517 	ldw	r20,20(sp)
   210c8:	dcc00417 	ldw	r19,16(sp)
   210cc:	dc800317 	ldw	r18,12(sp)
   210d0:	dc400217 	ldw	r17,8(sp)
   210d4:	dc000117 	ldw	r16,4(sp)
   210d8:	dec00b04 	addi	sp,sp,44
   210dc:	f800283a 	ret
   210e0:	00800304 	movi	r2,12
   210e4:	90800015 	stw	r2,0(r18)
   210e8:	0005883a 	mov	r2,zero
   210ec:	003ff006 	br	210b0 <__alt_data_end+0xfffe80b0>
   210f0:	01002004 	movi	r4,128
   210f4:	02001004 	movi	r8,64
   210f8:	01c00fc4 	movi	r7,63
   210fc:	003f6106 	br	20e84 <__alt_data_end+0xfffe7e84>
   21100:	4009883a 	mov	r4,r8
   21104:	003f7506 	br	20edc <__alt_data_end+0xfffe7edc>
   21108:	81000317 	ldw	r4,12(r16)
   2110c:	003fde06 	br	21088 <__alt_data_end+0xfffe8088>
   21110:	81c5883a 	add	r2,r16,r7
   21114:	11400117 	ldw	r5,4(r2)
   21118:	9009883a 	mov	r4,r18
   2111c:	29400054 	ori	r5,r5,1
   21120:	11400115 	stw	r5,4(r2)
   21124:	002366c0 	call	2366c <__malloc_unlock>
   21128:	80800204 	addi	r2,r16,8
   2112c:	003fe006 	br	210b0 <__alt_data_end+0xfffe80b0>
   21130:	9c000217 	ldw	r16,8(r19)
   21134:	00bfff04 	movi	r2,-4
   21138:	85800117 	ldw	r22,4(r16)
   2113c:	b0ac703a 	and	r22,r22,r2
   21140:	b4400336 	bltu	r22,r17,21150 <_malloc_r+0x344>
   21144:	b445c83a 	sub	r2,r22,r17
   21148:	00c003c4 	movi	r3,15
   2114c:	18805d16 	blt	r3,r2,212c4 <_malloc_r+0x4b8>
   21150:	05c000f4 	movhi	r23,3
   21154:	008000f4 	movhi	r2,3
   21158:	10ad6604 	addi	r2,r2,-19048
   2115c:	bde69e04 	addi	r23,r23,-25992
   21160:	15400017 	ldw	r21,0(r2)
   21164:	b8c00017 	ldw	r3,0(r23)
   21168:	00bfffc4 	movi	r2,-1
   2116c:	858d883a 	add	r6,r16,r22
   21170:	8d6b883a 	add	r21,r17,r21
   21174:	1880ea26 	beq	r3,r2,21520 <_malloc_r+0x714>
   21178:	ad4403c4 	addi	r21,r21,4111
   2117c:	00bc0004 	movi	r2,-4096
   21180:	a8aa703a 	and	r21,r21,r2
   21184:	a80b883a 	mov	r5,r21
   21188:	9009883a 	mov	r4,r18
   2118c:	d9800015 	stw	r6,0(sp)
   21190:	002202c0 	call	2202c <_sbrk_r>
   21194:	1029883a 	mov	r20,r2
   21198:	00bfffc4 	movi	r2,-1
   2119c:	d9800017 	ldw	r6,0(sp)
   211a0:	a080e826 	beq	r20,r2,21544 <_malloc_r+0x738>
   211a4:	a180a636 	bltu	r20,r6,21440 <_malloc_r+0x634>
   211a8:	070000f4 	movhi	fp,3
   211ac:	e72d6f04 	addi	fp,fp,-19012
   211b0:	e0800017 	ldw	r2,0(fp)
   211b4:	a887883a 	add	r3,r21,r2
   211b8:	e0c00015 	stw	r3,0(fp)
   211bc:	3500e626 	beq	r6,r20,21558 <_malloc_r+0x74c>
   211c0:	b9000017 	ldw	r4,0(r23)
   211c4:	00bfffc4 	movi	r2,-1
   211c8:	2080ee26 	beq	r4,r2,21584 <_malloc_r+0x778>
   211cc:	a185c83a 	sub	r2,r20,r6
   211d0:	10c5883a 	add	r2,r2,r3
   211d4:	e0800015 	stw	r2,0(fp)
   211d8:	a0c001cc 	andi	r3,r20,7
   211dc:	1800bc26 	beq	r3,zero,214d0 <_malloc_r+0x6c4>
   211e0:	a0e9c83a 	sub	r20,r20,r3
   211e4:	00840204 	movi	r2,4104
   211e8:	a5000204 	addi	r20,r20,8
   211ec:	10c7c83a 	sub	r3,r2,r3
   211f0:	a545883a 	add	r2,r20,r21
   211f4:	1083ffcc 	andi	r2,r2,4095
   211f8:	18abc83a 	sub	r21,r3,r2
   211fc:	a80b883a 	mov	r5,r21
   21200:	9009883a 	mov	r4,r18
   21204:	002202c0 	call	2202c <_sbrk_r>
   21208:	00ffffc4 	movi	r3,-1
   2120c:	10c0e126 	beq	r2,r3,21594 <_malloc_r+0x788>
   21210:	1505c83a 	sub	r2,r2,r20
   21214:	1545883a 	add	r2,r2,r21
   21218:	10800054 	ori	r2,r2,1
   2121c:	e0c00017 	ldw	r3,0(fp)
   21220:	9d000215 	stw	r20,8(r19)
   21224:	a0800115 	stw	r2,4(r20)
   21228:	a8c7883a 	add	r3,r21,r3
   2122c:	e0c00015 	stw	r3,0(fp)
   21230:	84c00e26 	beq	r16,r19,2126c <_malloc_r+0x460>
   21234:	018003c4 	movi	r6,15
   21238:	3580a72e 	bgeu	r6,r22,214d8 <_malloc_r+0x6cc>
   2123c:	81400117 	ldw	r5,4(r16)
   21240:	013ffe04 	movi	r4,-8
   21244:	b0bffd04 	addi	r2,r22,-12
   21248:	1104703a 	and	r2,r2,r4
   2124c:	2900004c 	andi	r4,r5,1
   21250:	2088b03a 	or	r4,r4,r2
   21254:	81000115 	stw	r4,4(r16)
   21258:	01400144 	movi	r5,5
   2125c:	8089883a 	add	r4,r16,r2
   21260:	21400115 	stw	r5,4(r4)
   21264:	21400215 	stw	r5,8(r4)
   21268:	3080cd36 	bltu	r6,r2,215a0 <_malloc_r+0x794>
   2126c:	008000f4 	movhi	r2,3
   21270:	10ad6504 	addi	r2,r2,-19052
   21274:	11000017 	ldw	r4,0(r2)
   21278:	20c0012e 	bgeu	r4,r3,21280 <_malloc_r+0x474>
   2127c:	10c00015 	stw	r3,0(r2)
   21280:	008000f4 	movhi	r2,3
   21284:	10ad6404 	addi	r2,r2,-19056
   21288:	11000017 	ldw	r4,0(r2)
   2128c:	9c000217 	ldw	r16,8(r19)
   21290:	20c0012e 	bgeu	r4,r3,21298 <_malloc_r+0x48c>
   21294:	10c00015 	stw	r3,0(r2)
   21298:	80c00117 	ldw	r3,4(r16)
   2129c:	00bfff04 	movi	r2,-4
   212a0:	1886703a 	and	r3,r3,r2
   212a4:	1c45c83a 	sub	r2,r3,r17
   212a8:	1c400236 	bltu	r3,r17,212b4 <_malloc_r+0x4a8>
   212ac:	00c003c4 	movi	r3,15
   212b0:	18800416 	blt	r3,r2,212c4 <_malloc_r+0x4b8>
   212b4:	9009883a 	mov	r4,r18
   212b8:	002366c0 	call	2366c <__malloc_unlock>
   212bc:	0005883a 	mov	r2,zero
   212c0:	003f7b06 	br	210b0 <__alt_data_end+0xfffe80b0>
   212c4:	88c00054 	ori	r3,r17,1
   212c8:	80c00115 	stw	r3,4(r16)
   212cc:	8463883a 	add	r17,r16,r17
   212d0:	10800054 	ori	r2,r2,1
   212d4:	9c400215 	stw	r17,8(r19)
   212d8:	88800115 	stw	r2,4(r17)
   212dc:	9009883a 	mov	r4,r18
   212e0:	002366c0 	call	2366c <__malloc_unlock>
   212e4:	80800204 	addi	r2,r16,8
   212e8:	003f7106 	br	210b0 <__alt_data_end+0xfffe80b0>
   212ec:	00c00504 	movi	r3,20
   212f0:	18804a2e 	bgeu	r3,r2,2141c <_malloc_r+0x610>
   212f4:	00c01504 	movi	r3,84
   212f8:	18806e36 	bltu	r3,r2,214b4 <_malloc_r+0x6a8>
   212fc:	8804d33a 	srli	r2,r17,12
   21300:	12001bc4 	addi	r8,r2,111
   21304:	11c01b84 	addi	r7,r2,110
   21308:	4209883a 	add	r4,r8,r8
   2130c:	003edd06 	br	20e84 <__alt_data_end+0xfffe7e84>
   21310:	3804d27a 	srli	r2,r7,9
   21314:	00c00104 	movi	r3,4
   21318:	1880442e 	bgeu	r3,r2,2142c <_malloc_r+0x620>
   2131c:	00c00504 	movi	r3,20
   21320:	18808136 	bltu	r3,r2,21528 <_malloc_r+0x71c>
   21324:	11401704 	addi	r5,r2,92
   21328:	10c016c4 	addi	r3,r2,91
   2132c:	294b883a 	add	r5,r5,r5
   21330:	294b883a 	add	r5,r5,r5
   21334:	294b883a 	add	r5,r5,r5
   21338:	994b883a 	add	r5,r19,r5
   2133c:	28800017 	ldw	r2,0(r5)
   21340:	018000f4 	movhi	r6,3
   21344:	297ffe04 	addi	r5,r5,-8
   21348:	31a0fd04 	addi	r6,r6,-31756
   2134c:	28806526 	beq	r5,r2,214e4 <_malloc_r+0x6d8>
   21350:	01bfff04 	movi	r6,-4
   21354:	10c00117 	ldw	r3,4(r2)
   21358:	1986703a 	and	r3,r3,r6
   2135c:	38c0022e 	bgeu	r7,r3,21368 <_malloc_r+0x55c>
   21360:	10800217 	ldw	r2,8(r2)
   21364:	28bffb1e 	bne	r5,r2,21354 <__alt_data_end+0xfffe8354>
   21368:	11400317 	ldw	r5,12(r2)
   2136c:	98c00117 	ldw	r3,4(r19)
   21370:	81400315 	stw	r5,12(r16)
   21374:	80800215 	stw	r2,8(r16)
   21378:	2c000215 	stw	r16,8(r5)
   2137c:	14000315 	stw	r16,12(r2)
   21380:	003ef806 	br	20f64 <__alt_data_end+0xfffe7f64>
   21384:	88c00054 	ori	r3,r17,1
   21388:	80c00115 	stw	r3,4(r16)
   2138c:	8463883a 	add	r17,r16,r17
   21390:	34400515 	stw	r17,20(r6)
   21394:	34400415 	stw	r17,16(r6)
   21398:	10c00054 	ori	r3,r2,1
   2139c:	8a000315 	stw	r8,12(r17)
   213a0:	8a000215 	stw	r8,8(r17)
   213a4:	88c00115 	stw	r3,4(r17)
   213a8:	88a3883a 	add	r17,r17,r2
   213ac:	88800015 	stw	r2,0(r17)
   213b0:	9009883a 	mov	r4,r18
   213b4:	002366c0 	call	2366c <__malloc_unlock>
   213b8:	80800204 	addi	r2,r16,8
   213bc:	003f3c06 	br	210b0 <__alt_data_end+0xfffe80b0>
   213c0:	30c00117 	ldw	r3,4(r6)
   213c4:	003ee706 	br	20f64 <__alt_data_end+0xfffe7f64>
   213c8:	5ac00044 	addi	r11,r11,1
   213cc:	588000cc 	andi	r2,r11,3
   213d0:	31800204 	addi	r6,r6,8
   213d4:	103efd1e 	bne	r2,zero,20fcc <__alt_data_end+0xfffe7fcc>
   213d8:	00002406 	br	2146c <_malloc_r+0x660>
   213dc:	14000317 	ldw	r16,12(r2)
   213e0:	143f251e 	bne	r2,r16,21078 <__alt_data_end+0xfffe8078>
   213e4:	21000084 	addi	r4,r4,2
   213e8:	003ebc06 	br	20edc <__alt_data_end+0xfffe7edc>
   213ec:	8085883a 	add	r2,r16,r2
   213f0:	10c00117 	ldw	r3,4(r2)
   213f4:	81000317 	ldw	r4,12(r16)
   213f8:	81400217 	ldw	r5,8(r16)
   213fc:	18c00054 	ori	r3,r3,1
   21400:	10c00115 	stw	r3,4(r2)
   21404:	29000315 	stw	r4,12(r5)
   21408:	21400215 	stw	r5,8(r4)
   2140c:	9009883a 	mov	r4,r18
   21410:	002366c0 	call	2366c <__malloc_unlock>
   21414:	80800204 	addi	r2,r16,8
   21418:	003f2506 	br	210b0 <__alt_data_end+0xfffe80b0>
   2141c:	12001704 	addi	r8,r2,92
   21420:	11c016c4 	addi	r7,r2,91
   21424:	4209883a 	add	r4,r8,r8
   21428:	003e9606 	br	20e84 <__alt_data_end+0xfffe7e84>
   2142c:	3804d1ba 	srli	r2,r7,6
   21430:	11400e44 	addi	r5,r2,57
   21434:	10c00e04 	addi	r3,r2,56
   21438:	294b883a 	add	r5,r5,r5
   2143c:	003fbc06 	br	21330 <__alt_data_end+0xfffe8330>
   21440:	84ff5926 	beq	r16,r19,211a8 <__alt_data_end+0xfffe81a8>
   21444:	008000f4 	movhi	r2,3
   21448:	10a0fd04 	addi	r2,r2,-31756
   2144c:	14000217 	ldw	r16,8(r2)
   21450:	00bfff04 	movi	r2,-4
   21454:	80c00117 	ldw	r3,4(r16)
   21458:	1886703a 	and	r3,r3,r2
   2145c:	003f9106 	br	212a4 <__alt_data_end+0xfffe82a4>
   21460:	60800217 	ldw	r2,8(r12)
   21464:	213fffc4 	addi	r4,r4,-1
   21468:	1300651e 	bne	r2,r12,21600 <_malloc_r+0x7f4>
   2146c:	208000cc 	andi	r2,r4,3
   21470:	633ffe04 	addi	r12,r12,-8
   21474:	103ffa1e 	bne	r2,zero,21460 <__alt_data_end+0xfffe8460>
   21478:	98800117 	ldw	r2,4(r19)
   2147c:	0146303a 	nor	r3,zero,r5
   21480:	1884703a 	and	r2,r3,r2
   21484:	98800115 	stw	r2,4(r19)
   21488:	294b883a 	add	r5,r5,r5
   2148c:	117f2836 	bltu	r2,r5,21130 <__alt_data_end+0xfffe8130>
   21490:	283f2726 	beq	r5,zero,21130 <__alt_data_end+0xfffe8130>
   21494:	2886703a 	and	r3,r5,r2
   21498:	5809883a 	mov	r4,r11
   2149c:	183ec31e 	bne	r3,zero,20fac <__alt_data_end+0xfffe7fac>
   214a0:	294b883a 	add	r5,r5,r5
   214a4:	2886703a 	and	r3,r5,r2
   214a8:	21000104 	addi	r4,r4,4
   214ac:	183ffc26 	beq	r3,zero,214a0 <__alt_data_end+0xfffe84a0>
   214b0:	003ebe06 	br	20fac <__alt_data_end+0xfffe7fac>
   214b4:	00c05504 	movi	r3,340
   214b8:	18801236 	bltu	r3,r2,21504 <_malloc_r+0x6f8>
   214bc:	8804d3fa 	srli	r2,r17,15
   214c0:	12001e04 	addi	r8,r2,120
   214c4:	11c01dc4 	addi	r7,r2,119
   214c8:	4209883a 	add	r4,r8,r8
   214cc:	003e6d06 	br	20e84 <__alt_data_end+0xfffe7e84>
   214d0:	00c40004 	movi	r3,4096
   214d4:	003f4606 	br	211f0 <__alt_data_end+0xfffe81f0>
   214d8:	00800044 	movi	r2,1
   214dc:	a0800115 	stw	r2,4(r20)
   214e0:	003f7406 	br	212b4 <__alt_data_end+0xfffe82b4>
   214e4:	1805d0ba 	srai	r2,r3,2
   214e8:	01c00044 	movi	r7,1
   214ec:	30c00117 	ldw	r3,4(r6)
   214f0:	388e983a 	sll	r7,r7,r2
   214f4:	2805883a 	mov	r2,r5
   214f8:	38c6b03a 	or	r3,r7,r3
   214fc:	30c00115 	stw	r3,4(r6)
   21500:	003f9b06 	br	21370 <__alt_data_end+0xfffe8370>
   21504:	00c15504 	movi	r3,1364
   21508:	18801a36 	bltu	r3,r2,21574 <_malloc_r+0x768>
   2150c:	8804d4ba 	srli	r2,r17,18
   21510:	12001f44 	addi	r8,r2,125
   21514:	11c01f04 	addi	r7,r2,124
   21518:	4209883a 	add	r4,r8,r8
   2151c:	003e5906 	br	20e84 <__alt_data_end+0xfffe7e84>
   21520:	ad400404 	addi	r21,r21,16
   21524:	003f1706 	br	21184 <__alt_data_end+0xfffe8184>
   21528:	00c01504 	movi	r3,84
   2152c:	18802336 	bltu	r3,r2,215bc <_malloc_r+0x7b0>
   21530:	3804d33a 	srli	r2,r7,12
   21534:	11401bc4 	addi	r5,r2,111
   21538:	10c01b84 	addi	r3,r2,110
   2153c:	294b883a 	add	r5,r5,r5
   21540:	003f7b06 	br	21330 <__alt_data_end+0xfffe8330>
   21544:	9c000217 	ldw	r16,8(r19)
   21548:	00bfff04 	movi	r2,-4
   2154c:	80c00117 	ldw	r3,4(r16)
   21550:	1886703a 	and	r3,r3,r2
   21554:	003f5306 	br	212a4 <__alt_data_end+0xfffe82a4>
   21558:	3083ffcc 	andi	r2,r6,4095
   2155c:	103f181e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe81c0>
   21560:	99000217 	ldw	r4,8(r19)
   21564:	b545883a 	add	r2,r22,r21
   21568:	10800054 	ori	r2,r2,1
   2156c:	20800115 	stw	r2,4(r4)
   21570:	003f3e06 	br	2126c <__alt_data_end+0xfffe826c>
   21574:	01003f84 	movi	r4,254
   21578:	02001fc4 	movi	r8,127
   2157c:	01c01f84 	movi	r7,126
   21580:	003e4006 	br	20e84 <__alt_data_end+0xfffe7e84>
   21584:	008000f4 	movhi	r2,3
   21588:	10a69e04 	addi	r2,r2,-25992
   2158c:	15000015 	stw	r20,0(r2)
   21590:	003f1106 	br	211d8 <__alt_data_end+0xfffe81d8>
   21594:	00800044 	movi	r2,1
   21598:	002b883a 	mov	r21,zero
   2159c:	003f1f06 	br	2121c <__alt_data_end+0xfffe821c>
   215a0:	81400204 	addi	r5,r16,8
   215a4:	9009883a 	mov	r4,r18
   215a8:	00228940 	call	22894 <_free_r>
   215ac:	008000f4 	movhi	r2,3
   215b0:	10ad6f04 	addi	r2,r2,-19012
   215b4:	10c00017 	ldw	r3,0(r2)
   215b8:	003f2c06 	br	2126c <__alt_data_end+0xfffe826c>
   215bc:	00c05504 	movi	r3,340
   215c0:	18800536 	bltu	r3,r2,215d8 <_malloc_r+0x7cc>
   215c4:	3804d3fa 	srli	r2,r7,15
   215c8:	11401e04 	addi	r5,r2,120
   215cc:	10c01dc4 	addi	r3,r2,119
   215d0:	294b883a 	add	r5,r5,r5
   215d4:	003f5606 	br	21330 <__alt_data_end+0xfffe8330>
   215d8:	00c15504 	movi	r3,1364
   215dc:	18800536 	bltu	r3,r2,215f4 <_malloc_r+0x7e8>
   215e0:	3804d4ba 	srli	r2,r7,18
   215e4:	11401f44 	addi	r5,r2,125
   215e8:	10c01f04 	addi	r3,r2,124
   215ec:	294b883a 	add	r5,r5,r5
   215f0:	003f4f06 	br	21330 <__alt_data_end+0xfffe8330>
   215f4:	01403f84 	movi	r5,254
   215f8:	00c01f84 	movi	r3,126
   215fc:	003f4c06 	br	21330 <__alt_data_end+0xfffe8330>
   21600:	98800117 	ldw	r2,4(r19)
   21604:	003fa006 	br	21488 <__alt_data_end+0xfffe8488>
   21608:	8808d0fa 	srli	r4,r17,3
   2160c:	20800044 	addi	r2,r4,1
   21610:	1085883a 	add	r2,r2,r2
   21614:	003e9006 	br	21058 <__alt_data_end+0xfffe8058>

00021618 <memchr>:
   21618:	208000cc 	andi	r2,r4,3
   2161c:	280f883a 	mov	r7,r5
   21620:	10003426 	beq	r2,zero,216f4 <memchr+0xdc>
   21624:	30bfffc4 	addi	r2,r6,-1
   21628:	30001a26 	beq	r6,zero,21694 <memchr+0x7c>
   2162c:	20c00003 	ldbu	r3,0(r4)
   21630:	29803fcc 	andi	r6,r5,255
   21634:	30c0051e 	bne	r6,r3,2164c <memchr+0x34>
   21638:	00001806 	br	2169c <memchr+0x84>
   2163c:	10001526 	beq	r2,zero,21694 <memchr+0x7c>
   21640:	20c00003 	ldbu	r3,0(r4)
   21644:	10bfffc4 	addi	r2,r2,-1
   21648:	30c01426 	beq	r6,r3,2169c <memchr+0x84>
   2164c:	21000044 	addi	r4,r4,1
   21650:	20c000cc 	andi	r3,r4,3
   21654:	183ff91e 	bne	r3,zero,2163c <__alt_data_end+0xfffe863c>
   21658:	020000c4 	movi	r8,3
   2165c:	40801136 	bltu	r8,r2,216a4 <memchr+0x8c>
   21660:	10000c26 	beq	r2,zero,21694 <memchr+0x7c>
   21664:	20c00003 	ldbu	r3,0(r4)
   21668:	29403fcc 	andi	r5,r5,255
   2166c:	28c00b26 	beq	r5,r3,2169c <memchr+0x84>
   21670:	20c00044 	addi	r3,r4,1
   21674:	39803fcc 	andi	r6,r7,255
   21678:	2089883a 	add	r4,r4,r2
   2167c:	00000306 	br	2168c <memchr+0x74>
   21680:	18c00044 	addi	r3,r3,1
   21684:	197fffc3 	ldbu	r5,-1(r3)
   21688:	31400526 	beq	r6,r5,216a0 <memchr+0x88>
   2168c:	1805883a 	mov	r2,r3
   21690:	20fffb1e 	bne	r4,r3,21680 <__alt_data_end+0xfffe8680>
   21694:	0005883a 	mov	r2,zero
   21698:	f800283a 	ret
   2169c:	2005883a 	mov	r2,r4
   216a0:	f800283a 	ret
   216a4:	28c03fcc 	andi	r3,r5,255
   216a8:	1812923a 	slli	r9,r3,8
   216ac:	02ffbff4 	movhi	r11,65279
   216b0:	02a02074 	movhi	r10,32897
   216b4:	48d2b03a 	or	r9,r9,r3
   216b8:	4806943a 	slli	r3,r9,16
   216bc:	5affbfc4 	addi	r11,r11,-257
   216c0:	52a02004 	addi	r10,r10,-32640
   216c4:	48d2b03a 	or	r9,r9,r3
   216c8:	20c00017 	ldw	r3,0(r4)
   216cc:	48c6f03a 	xor	r3,r9,r3
   216d0:	1acd883a 	add	r6,r3,r11
   216d4:	00c6303a 	nor	r3,zero,r3
   216d8:	30c6703a 	and	r3,r6,r3
   216dc:	1a86703a 	and	r3,r3,r10
   216e0:	183fe01e 	bne	r3,zero,21664 <__alt_data_end+0xfffe8664>
   216e4:	10bfff04 	addi	r2,r2,-4
   216e8:	21000104 	addi	r4,r4,4
   216ec:	40bff636 	bltu	r8,r2,216c8 <__alt_data_end+0xfffe86c8>
   216f0:	003fdb06 	br	21660 <__alt_data_end+0xfffe8660>
   216f4:	3005883a 	mov	r2,r6
   216f8:	003fd706 	br	21658 <__alt_data_end+0xfffe8658>

000216fc <memcpy>:
   216fc:	defffd04 	addi	sp,sp,-12
   21700:	dfc00215 	stw	ra,8(sp)
   21704:	dc400115 	stw	r17,4(sp)
   21708:	dc000015 	stw	r16,0(sp)
   2170c:	00c003c4 	movi	r3,15
   21710:	2005883a 	mov	r2,r4
   21714:	1980452e 	bgeu	r3,r6,2182c <memcpy+0x130>
   21718:	2906b03a 	or	r3,r5,r4
   2171c:	18c000cc 	andi	r3,r3,3
   21720:	1800441e 	bne	r3,zero,21834 <memcpy+0x138>
   21724:	347ffc04 	addi	r17,r6,-16
   21728:	8822d13a 	srli	r17,r17,4
   2172c:	28c00104 	addi	r3,r5,4
   21730:	23400104 	addi	r13,r4,4
   21734:	8820913a 	slli	r16,r17,4
   21738:	2b000204 	addi	r12,r5,8
   2173c:	22c00204 	addi	r11,r4,8
   21740:	84000504 	addi	r16,r16,20
   21744:	2a800304 	addi	r10,r5,12
   21748:	22400304 	addi	r9,r4,12
   2174c:	2c21883a 	add	r16,r5,r16
   21750:	2811883a 	mov	r8,r5
   21754:	200f883a 	mov	r7,r4
   21758:	41000017 	ldw	r4,0(r8)
   2175c:	1fc00017 	ldw	ra,0(r3)
   21760:	63c00017 	ldw	r15,0(r12)
   21764:	39000015 	stw	r4,0(r7)
   21768:	53800017 	ldw	r14,0(r10)
   2176c:	6fc00015 	stw	ra,0(r13)
   21770:	5bc00015 	stw	r15,0(r11)
   21774:	4b800015 	stw	r14,0(r9)
   21778:	18c00404 	addi	r3,r3,16
   2177c:	39c00404 	addi	r7,r7,16
   21780:	42000404 	addi	r8,r8,16
   21784:	6b400404 	addi	r13,r13,16
   21788:	63000404 	addi	r12,r12,16
   2178c:	5ac00404 	addi	r11,r11,16
   21790:	52800404 	addi	r10,r10,16
   21794:	4a400404 	addi	r9,r9,16
   21798:	1c3fef1e 	bne	r3,r16,21758 <__alt_data_end+0xfffe8758>
   2179c:	89c00044 	addi	r7,r17,1
   217a0:	380e913a 	slli	r7,r7,4
   217a4:	310003cc 	andi	r4,r6,15
   217a8:	02c000c4 	movi	r11,3
   217ac:	11c7883a 	add	r3,r2,r7
   217b0:	29cb883a 	add	r5,r5,r7
   217b4:	5900212e 	bgeu	r11,r4,2183c <memcpy+0x140>
   217b8:	1813883a 	mov	r9,r3
   217bc:	2811883a 	mov	r8,r5
   217c0:	200f883a 	mov	r7,r4
   217c4:	42800017 	ldw	r10,0(r8)
   217c8:	4a400104 	addi	r9,r9,4
   217cc:	39ffff04 	addi	r7,r7,-4
   217d0:	4abfff15 	stw	r10,-4(r9)
   217d4:	42000104 	addi	r8,r8,4
   217d8:	59fffa36 	bltu	r11,r7,217c4 <__alt_data_end+0xfffe87c4>
   217dc:	213fff04 	addi	r4,r4,-4
   217e0:	2008d0ba 	srli	r4,r4,2
   217e4:	318000cc 	andi	r6,r6,3
   217e8:	21000044 	addi	r4,r4,1
   217ec:	2109883a 	add	r4,r4,r4
   217f0:	2109883a 	add	r4,r4,r4
   217f4:	1907883a 	add	r3,r3,r4
   217f8:	290b883a 	add	r5,r5,r4
   217fc:	30000626 	beq	r6,zero,21818 <memcpy+0x11c>
   21800:	198d883a 	add	r6,r3,r6
   21804:	29c00003 	ldbu	r7,0(r5)
   21808:	18c00044 	addi	r3,r3,1
   2180c:	29400044 	addi	r5,r5,1
   21810:	19ffffc5 	stb	r7,-1(r3)
   21814:	19bffb1e 	bne	r3,r6,21804 <__alt_data_end+0xfffe8804>
   21818:	dfc00217 	ldw	ra,8(sp)
   2181c:	dc400117 	ldw	r17,4(sp)
   21820:	dc000017 	ldw	r16,0(sp)
   21824:	dec00304 	addi	sp,sp,12
   21828:	f800283a 	ret
   2182c:	2007883a 	mov	r3,r4
   21830:	003ff206 	br	217fc <__alt_data_end+0xfffe87fc>
   21834:	2007883a 	mov	r3,r4
   21838:	003ff106 	br	21800 <__alt_data_end+0xfffe8800>
   2183c:	200d883a 	mov	r6,r4
   21840:	003fee06 	br	217fc <__alt_data_end+0xfffe87fc>

00021844 <memmove>:
   21844:	2005883a 	mov	r2,r4
   21848:	29000b2e 	bgeu	r5,r4,21878 <memmove+0x34>
   2184c:	298f883a 	add	r7,r5,r6
   21850:	21c0092e 	bgeu	r4,r7,21878 <memmove+0x34>
   21854:	2187883a 	add	r3,r4,r6
   21858:	198bc83a 	sub	r5,r3,r6
   2185c:	30004826 	beq	r6,zero,21980 <memmove+0x13c>
   21860:	39ffffc4 	addi	r7,r7,-1
   21864:	39000003 	ldbu	r4,0(r7)
   21868:	18ffffc4 	addi	r3,r3,-1
   2186c:	19000005 	stb	r4,0(r3)
   21870:	28fffb1e 	bne	r5,r3,21860 <__alt_data_end+0xfffe8860>
   21874:	f800283a 	ret
   21878:	00c003c4 	movi	r3,15
   2187c:	1980412e 	bgeu	r3,r6,21984 <memmove+0x140>
   21880:	2886b03a 	or	r3,r5,r2
   21884:	18c000cc 	andi	r3,r3,3
   21888:	1800401e 	bne	r3,zero,2198c <memmove+0x148>
   2188c:	33fffc04 	addi	r15,r6,-16
   21890:	781ed13a 	srli	r15,r15,4
   21894:	28c00104 	addi	r3,r5,4
   21898:	13400104 	addi	r13,r2,4
   2189c:	781c913a 	slli	r14,r15,4
   218a0:	2b000204 	addi	r12,r5,8
   218a4:	12c00204 	addi	r11,r2,8
   218a8:	73800504 	addi	r14,r14,20
   218ac:	2a800304 	addi	r10,r5,12
   218b0:	12400304 	addi	r9,r2,12
   218b4:	2b9d883a 	add	r14,r5,r14
   218b8:	2811883a 	mov	r8,r5
   218bc:	100f883a 	mov	r7,r2
   218c0:	41000017 	ldw	r4,0(r8)
   218c4:	39c00404 	addi	r7,r7,16
   218c8:	18c00404 	addi	r3,r3,16
   218cc:	393ffc15 	stw	r4,-16(r7)
   218d0:	193ffc17 	ldw	r4,-16(r3)
   218d4:	6b400404 	addi	r13,r13,16
   218d8:	5ac00404 	addi	r11,r11,16
   218dc:	693ffc15 	stw	r4,-16(r13)
   218e0:	61000017 	ldw	r4,0(r12)
   218e4:	4a400404 	addi	r9,r9,16
   218e8:	42000404 	addi	r8,r8,16
   218ec:	593ffc15 	stw	r4,-16(r11)
   218f0:	51000017 	ldw	r4,0(r10)
   218f4:	63000404 	addi	r12,r12,16
   218f8:	52800404 	addi	r10,r10,16
   218fc:	493ffc15 	stw	r4,-16(r9)
   21900:	1bbfef1e 	bne	r3,r14,218c0 <__alt_data_end+0xfffe88c0>
   21904:	79000044 	addi	r4,r15,1
   21908:	2008913a 	slli	r4,r4,4
   2190c:	328003cc 	andi	r10,r6,15
   21910:	02c000c4 	movi	r11,3
   21914:	1107883a 	add	r3,r2,r4
   21918:	290b883a 	add	r5,r5,r4
   2191c:	5a801e2e 	bgeu	r11,r10,21998 <memmove+0x154>
   21920:	1813883a 	mov	r9,r3
   21924:	2811883a 	mov	r8,r5
   21928:	500f883a 	mov	r7,r10
   2192c:	41000017 	ldw	r4,0(r8)
   21930:	4a400104 	addi	r9,r9,4
   21934:	39ffff04 	addi	r7,r7,-4
   21938:	493fff15 	stw	r4,-4(r9)
   2193c:	42000104 	addi	r8,r8,4
   21940:	59fffa36 	bltu	r11,r7,2192c <__alt_data_end+0xfffe892c>
   21944:	513fff04 	addi	r4,r10,-4
   21948:	2008d0ba 	srli	r4,r4,2
   2194c:	318000cc 	andi	r6,r6,3
   21950:	21000044 	addi	r4,r4,1
   21954:	2109883a 	add	r4,r4,r4
   21958:	2109883a 	add	r4,r4,r4
   2195c:	1907883a 	add	r3,r3,r4
   21960:	290b883a 	add	r5,r5,r4
   21964:	30000b26 	beq	r6,zero,21994 <memmove+0x150>
   21968:	198d883a 	add	r6,r3,r6
   2196c:	29c00003 	ldbu	r7,0(r5)
   21970:	18c00044 	addi	r3,r3,1
   21974:	29400044 	addi	r5,r5,1
   21978:	19ffffc5 	stb	r7,-1(r3)
   2197c:	19bffb1e 	bne	r3,r6,2196c <__alt_data_end+0xfffe896c>
   21980:	f800283a 	ret
   21984:	1007883a 	mov	r3,r2
   21988:	003ff606 	br	21964 <__alt_data_end+0xfffe8964>
   2198c:	1007883a 	mov	r3,r2
   21990:	003ff506 	br	21968 <__alt_data_end+0xfffe8968>
   21994:	f800283a 	ret
   21998:	500d883a 	mov	r6,r10
   2199c:	003ff106 	br	21964 <__alt_data_end+0xfffe8964>

000219a0 <memset>:
   219a0:	20c000cc 	andi	r3,r4,3
   219a4:	2005883a 	mov	r2,r4
   219a8:	18004426 	beq	r3,zero,21abc <memset+0x11c>
   219ac:	31ffffc4 	addi	r7,r6,-1
   219b0:	30004026 	beq	r6,zero,21ab4 <memset+0x114>
   219b4:	2813883a 	mov	r9,r5
   219b8:	200d883a 	mov	r6,r4
   219bc:	2007883a 	mov	r3,r4
   219c0:	00000406 	br	219d4 <memset+0x34>
   219c4:	3a3fffc4 	addi	r8,r7,-1
   219c8:	31800044 	addi	r6,r6,1
   219cc:	38003926 	beq	r7,zero,21ab4 <memset+0x114>
   219d0:	400f883a 	mov	r7,r8
   219d4:	18c00044 	addi	r3,r3,1
   219d8:	32400005 	stb	r9,0(r6)
   219dc:	1a0000cc 	andi	r8,r3,3
   219e0:	403ff81e 	bne	r8,zero,219c4 <__alt_data_end+0xfffe89c4>
   219e4:	010000c4 	movi	r4,3
   219e8:	21c02d2e 	bgeu	r4,r7,21aa0 <memset+0x100>
   219ec:	29003fcc 	andi	r4,r5,255
   219f0:	200c923a 	slli	r6,r4,8
   219f4:	3108b03a 	or	r4,r6,r4
   219f8:	200c943a 	slli	r6,r4,16
   219fc:	218cb03a 	or	r6,r4,r6
   21a00:	010003c4 	movi	r4,15
   21a04:	21c0182e 	bgeu	r4,r7,21a68 <memset+0xc8>
   21a08:	3b3ffc04 	addi	r12,r7,-16
   21a0c:	6018d13a 	srli	r12,r12,4
   21a10:	1a000104 	addi	r8,r3,4
   21a14:	1ac00204 	addi	r11,r3,8
   21a18:	6008913a 	slli	r4,r12,4
   21a1c:	1a800304 	addi	r10,r3,12
   21a20:	1813883a 	mov	r9,r3
   21a24:	21000504 	addi	r4,r4,20
   21a28:	1909883a 	add	r4,r3,r4
   21a2c:	49800015 	stw	r6,0(r9)
   21a30:	41800015 	stw	r6,0(r8)
   21a34:	59800015 	stw	r6,0(r11)
   21a38:	51800015 	stw	r6,0(r10)
   21a3c:	42000404 	addi	r8,r8,16
   21a40:	4a400404 	addi	r9,r9,16
   21a44:	5ac00404 	addi	r11,r11,16
   21a48:	52800404 	addi	r10,r10,16
   21a4c:	413ff71e 	bne	r8,r4,21a2c <__alt_data_end+0xfffe8a2c>
   21a50:	63000044 	addi	r12,r12,1
   21a54:	6018913a 	slli	r12,r12,4
   21a58:	39c003cc 	andi	r7,r7,15
   21a5c:	010000c4 	movi	r4,3
   21a60:	1b07883a 	add	r3,r3,r12
   21a64:	21c00e2e 	bgeu	r4,r7,21aa0 <memset+0x100>
   21a68:	1813883a 	mov	r9,r3
   21a6c:	3811883a 	mov	r8,r7
   21a70:	010000c4 	movi	r4,3
   21a74:	49800015 	stw	r6,0(r9)
   21a78:	423fff04 	addi	r8,r8,-4
   21a7c:	4a400104 	addi	r9,r9,4
   21a80:	223ffc36 	bltu	r4,r8,21a74 <__alt_data_end+0xfffe8a74>
   21a84:	393fff04 	addi	r4,r7,-4
   21a88:	2008d0ba 	srli	r4,r4,2
   21a8c:	39c000cc 	andi	r7,r7,3
   21a90:	21000044 	addi	r4,r4,1
   21a94:	2109883a 	add	r4,r4,r4
   21a98:	2109883a 	add	r4,r4,r4
   21a9c:	1907883a 	add	r3,r3,r4
   21aa0:	38000526 	beq	r7,zero,21ab8 <memset+0x118>
   21aa4:	19cf883a 	add	r7,r3,r7
   21aa8:	19400005 	stb	r5,0(r3)
   21aac:	18c00044 	addi	r3,r3,1
   21ab0:	38fffd1e 	bne	r7,r3,21aa8 <__alt_data_end+0xfffe8aa8>
   21ab4:	f800283a 	ret
   21ab8:	f800283a 	ret
   21abc:	2007883a 	mov	r3,r4
   21ac0:	300f883a 	mov	r7,r6
   21ac4:	003fc706 	br	219e4 <__alt_data_end+0xfffe89e4>

00021ac8 <_realloc_r>:
   21ac8:	defff604 	addi	sp,sp,-40
   21acc:	dc800215 	stw	r18,8(sp)
   21ad0:	dfc00915 	stw	ra,36(sp)
   21ad4:	df000815 	stw	fp,32(sp)
   21ad8:	ddc00715 	stw	r23,28(sp)
   21adc:	dd800615 	stw	r22,24(sp)
   21ae0:	dd400515 	stw	r21,20(sp)
   21ae4:	dd000415 	stw	r20,16(sp)
   21ae8:	dcc00315 	stw	r19,12(sp)
   21aec:	dc400115 	stw	r17,4(sp)
   21af0:	dc000015 	stw	r16,0(sp)
   21af4:	3025883a 	mov	r18,r6
   21af8:	2800b726 	beq	r5,zero,21dd8 <_realloc_r+0x310>
   21afc:	282b883a 	mov	r21,r5
   21b00:	2029883a 	mov	r20,r4
   21b04:	00236480 	call	23648 <__malloc_lock>
   21b08:	a8bfff17 	ldw	r2,-4(r21)
   21b0c:	043fff04 	movi	r16,-4
   21b10:	90c002c4 	addi	r3,r18,11
   21b14:	01000584 	movi	r4,22
   21b18:	acfffe04 	addi	r19,r21,-8
   21b1c:	1420703a 	and	r16,r2,r16
   21b20:	20c0332e 	bgeu	r4,r3,21bf0 <_realloc_r+0x128>
   21b24:	047ffe04 	movi	r17,-8
   21b28:	1c62703a 	and	r17,r3,r17
   21b2c:	8807883a 	mov	r3,r17
   21b30:	88005816 	blt	r17,zero,21c94 <_realloc_r+0x1cc>
   21b34:	8c805736 	bltu	r17,r18,21c94 <_realloc_r+0x1cc>
   21b38:	80c0300e 	bge	r16,r3,21bfc <_realloc_r+0x134>
   21b3c:	070000f4 	movhi	fp,3
   21b40:	e720fd04 	addi	fp,fp,-31756
   21b44:	e1c00217 	ldw	r7,8(fp)
   21b48:	9c09883a 	add	r4,r19,r16
   21b4c:	22000117 	ldw	r8,4(r4)
   21b50:	21c06326 	beq	r4,r7,21ce0 <_realloc_r+0x218>
   21b54:	017fff84 	movi	r5,-2
   21b58:	414a703a 	and	r5,r8,r5
   21b5c:	214b883a 	add	r5,r4,r5
   21b60:	29800117 	ldw	r6,4(r5)
   21b64:	3180004c 	andi	r6,r6,1
   21b68:	30003f26 	beq	r6,zero,21c68 <_realloc_r+0x1a0>
   21b6c:	1080004c 	andi	r2,r2,1
   21b70:	10008326 	beq	r2,zero,21d80 <_realloc_r+0x2b8>
   21b74:	900b883a 	mov	r5,r18
   21b78:	a009883a 	mov	r4,r20
   21b7c:	0020e0c0 	call	20e0c <_malloc_r>
   21b80:	1025883a 	mov	r18,r2
   21b84:	10011e26 	beq	r2,zero,22000 <_realloc_r+0x538>
   21b88:	a93fff17 	ldw	r4,-4(r21)
   21b8c:	10fffe04 	addi	r3,r2,-8
   21b90:	00bfff84 	movi	r2,-2
   21b94:	2084703a 	and	r2,r4,r2
   21b98:	9885883a 	add	r2,r19,r2
   21b9c:	1880ee26 	beq	r3,r2,21f58 <_realloc_r+0x490>
   21ba0:	81bfff04 	addi	r6,r16,-4
   21ba4:	00800904 	movi	r2,36
   21ba8:	1180b836 	bltu	r2,r6,21e8c <_realloc_r+0x3c4>
   21bac:	00c004c4 	movi	r3,19
   21bb0:	19809636 	bltu	r3,r6,21e0c <_realloc_r+0x344>
   21bb4:	9005883a 	mov	r2,r18
   21bb8:	a807883a 	mov	r3,r21
   21bbc:	19000017 	ldw	r4,0(r3)
   21bc0:	11000015 	stw	r4,0(r2)
   21bc4:	19000117 	ldw	r4,4(r3)
   21bc8:	11000115 	stw	r4,4(r2)
   21bcc:	18c00217 	ldw	r3,8(r3)
   21bd0:	10c00215 	stw	r3,8(r2)
   21bd4:	a80b883a 	mov	r5,r21
   21bd8:	a009883a 	mov	r4,r20
   21bdc:	00228940 	call	22894 <_free_r>
   21be0:	a009883a 	mov	r4,r20
   21be4:	002366c0 	call	2366c <__malloc_unlock>
   21be8:	9005883a 	mov	r2,r18
   21bec:	00001206 	br	21c38 <_realloc_r+0x170>
   21bf0:	00c00404 	movi	r3,16
   21bf4:	1823883a 	mov	r17,r3
   21bf8:	003fce06 	br	21b34 <__alt_data_end+0xfffe8b34>
   21bfc:	a825883a 	mov	r18,r21
   21c00:	8445c83a 	sub	r2,r16,r17
   21c04:	00c003c4 	movi	r3,15
   21c08:	18802636 	bltu	r3,r2,21ca4 <_realloc_r+0x1dc>
   21c0c:	99800117 	ldw	r6,4(r19)
   21c10:	9c07883a 	add	r3,r19,r16
   21c14:	3180004c 	andi	r6,r6,1
   21c18:	3420b03a 	or	r16,r6,r16
   21c1c:	9c000115 	stw	r16,4(r19)
   21c20:	18800117 	ldw	r2,4(r3)
   21c24:	10800054 	ori	r2,r2,1
   21c28:	18800115 	stw	r2,4(r3)
   21c2c:	a009883a 	mov	r4,r20
   21c30:	002366c0 	call	2366c <__malloc_unlock>
   21c34:	9005883a 	mov	r2,r18
   21c38:	dfc00917 	ldw	ra,36(sp)
   21c3c:	df000817 	ldw	fp,32(sp)
   21c40:	ddc00717 	ldw	r23,28(sp)
   21c44:	dd800617 	ldw	r22,24(sp)
   21c48:	dd400517 	ldw	r21,20(sp)
   21c4c:	dd000417 	ldw	r20,16(sp)
   21c50:	dcc00317 	ldw	r19,12(sp)
   21c54:	dc800217 	ldw	r18,8(sp)
   21c58:	dc400117 	ldw	r17,4(sp)
   21c5c:	dc000017 	ldw	r16,0(sp)
   21c60:	dec00a04 	addi	sp,sp,40
   21c64:	f800283a 	ret
   21c68:	017fff04 	movi	r5,-4
   21c6c:	414a703a 	and	r5,r8,r5
   21c70:	814d883a 	add	r6,r16,r5
   21c74:	30c01f16 	blt	r6,r3,21cf4 <_realloc_r+0x22c>
   21c78:	20800317 	ldw	r2,12(r4)
   21c7c:	20c00217 	ldw	r3,8(r4)
   21c80:	a825883a 	mov	r18,r21
   21c84:	3021883a 	mov	r16,r6
   21c88:	18800315 	stw	r2,12(r3)
   21c8c:	10c00215 	stw	r3,8(r2)
   21c90:	003fdb06 	br	21c00 <__alt_data_end+0xfffe8c00>
   21c94:	00800304 	movi	r2,12
   21c98:	a0800015 	stw	r2,0(r20)
   21c9c:	0005883a 	mov	r2,zero
   21ca0:	003fe506 	br	21c38 <__alt_data_end+0xfffe8c38>
   21ca4:	98c00117 	ldw	r3,4(r19)
   21ca8:	9c4b883a 	add	r5,r19,r17
   21cac:	11000054 	ori	r4,r2,1
   21cb0:	18c0004c 	andi	r3,r3,1
   21cb4:	1c62b03a 	or	r17,r3,r17
   21cb8:	9c400115 	stw	r17,4(r19)
   21cbc:	29000115 	stw	r4,4(r5)
   21cc0:	2885883a 	add	r2,r5,r2
   21cc4:	10c00117 	ldw	r3,4(r2)
   21cc8:	29400204 	addi	r5,r5,8
   21ccc:	a009883a 	mov	r4,r20
   21cd0:	18c00054 	ori	r3,r3,1
   21cd4:	10c00115 	stw	r3,4(r2)
   21cd8:	00228940 	call	22894 <_free_r>
   21cdc:	003fd306 	br	21c2c <__alt_data_end+0xfffe8c2c>
   21ce0:	017fff04 	movi	r5,-4
   21ce4:	414a703a 	and	r5,r8,r5
   21ce8:	89800404 	addi	r6,r17,16
   21cec:	8151883a 	add	r8,r16,r5
   21cf0:	4180590e 	bge	r8,r6,21e58 <_realloc_r+0x390>
   21cf4:	1080004c 	andi	r2,r2,1
   21cf8:	103f9e1e 	bne	r2,zero,21b74 <__alt_data_end+0xfffe8b74>
   21cfc:	adbffe17 	ldw	r22,-8(r21)
   21d00:	00bfff04 	movi	r2,-4
   21d04:	9dadc83a 	sub	r22,r19,r22
   21d08:	b1800117 	ldw	r6,4(r22)
   21d0c:	3084703a 	and	r2,r6,r2
   21d10:	20002026 	beq	r4,zero,21d94 <_realloc_r+0x2cc>
   21d14:	80af883a 	add	r23,r16,r2
   21d18:	b96f883a 	add	r23,r23,r5
   21d1c:	21c05f26 	beq	r4,r7,21e9c <_realloc_r+0x3d4>
   21d20:	b8c01c16 	blt	r23,r3,21d94 <_realloc_r+0x2cc>
   21d24:	20800317 	ldw	r2,12(r4)
   21d28:	20c00217 	ldw	r3,8(r4)
   21d2c:	81bfff04 	addi	r6,r16,-4
   21d30:	01000904 	movi	r4,36
   21d34:	18800315 	stw	r2,12(r3)
   21d38:	10c00215 	stw	r3,8(r2)
   21d3c:	b0c00217 	ldw	r3,8(r22)
   21d40:	b0800317 	ldw	r2,12(r22)
   21d44:	b4800204 	addi	r18,r22,8
   21d48:	18800315 	stw	r2,12(r3)
   21d4c:	10c00215 	stw	r3,8(r2)
   21d50:	21801b36 	bltu	r4,r6,21dc0 <_realloc_r+0x2f8>
   21d54:	008004c4 	movi	r2,19
   21d58:	1180352e 	bgeu	r2,r6,21e30 <_realloc_r+0x368>
   21d5c:	a8800017 	ldw	r2,0(r21)
   21d60:	b0800215 	stw	r2,8(r22)
   21d64:	a8800117 	ldw	r2,4(r21)
   21d68:	b0800315 	stw	r2,12(r22)
   21d6c:	008006c4 	movi	r2,27
   21d70:	11807f36 	bltu	r2,r6,21f70 <_realloc_r+0x4a8>
   21d74:	b0800404 	addi	r2,r22,16
   21d78:	ad400204 	addi	r21,r21,8
   21d7c:	00002d06 	br	21e34 <_realloc_r+0x36c>
   21d80:	adbffe17 	ldw	r22,-8(r21)
   21d84:	00bfff04 	movi	r2,-4
   21d88:	9dadc83a 	sub	r22,r19,r22
   21d8c:	b1000117 	ldw	r4,4(r22)
   21d90:	2084703a 	and	r2,r4,r2
   21d94:	b03f7726 	beq	r22,zero,21b74 <__alt_data_end+0xfffe8b74>
   21d98:	80af883a 	add	r23,r16,r2
   21d9c:	b8ff7516 	blt	r23,r3,21b74 <__alt_data_end+0xfffe8b74>
   21da0:	b0800317 	ldw	r2,12(r22)
   21da4:	b0c00217 	ldw	r3,8(r22)
   21da8:	81bfff04 	addi	r6,r16,-4
   21dac:	01000904 	movi	r4,36
   21db0:	18800315 	stw	r2,12(r3)
   21db4:	10c00215 	stw	r3,8(r2)
   21db8:	b4800204 	addi	r18,r22,8
   21dbc:	21bfe52e 	bgeu	r4,r6,21d54 <__alt_data_end+0xfffe8d54>
   21dc0:	a80b883a 	mov	r5,r21
   21dc4:	9009883a 	mov	r4,r18
   21dc8:	00218440 	call	21844 <memmove>
   21dcc:	b821883a 	mov	r16,r23
   21dd0:	b027883a 	mov	r19,r22
   21dd4:	003f8a06 	br	21c00 <__alt_data_end+0xfffe8c00>
   21dd8:	300b883a 	mov	r5,r6
   21ddc:	dfc00917 	ldw	ra,36(sp)
   21de0:	df000817 	ldw	fp,32(sp)
   21de4:	ddc00717 	ldw	r23,28(sp)
   21de8:	dd800617 	ldw	r22,24(sp)
   21dec:	dd400517 	ldw	r21,20(sp)
   21df0:	dd000417 	ldw	r20,16(sp)
   21df4:	dcc00317 	ldw	r19,12(sp)
   21df8:	dc800217 	ldw	r18,8(sp)
   21dfc:	dc400117 	ldw	r17,4(sp)
   21e00:	dc000017 	ldw	r16,0(sp)
   21e04:	dec00a04 	addi	sp,sp,40
   21e08:	0020e0c1 	jmpi	20e0c <_malloc_r>
   21e0c:	a8c00017 	ldw	r3,0(r21)
   21e10:	90c00015 	stw	r3,0(r18)
   21e14:	a8c00117 	ldw	r3,4(r21)
   21e18:	90c00115 	stw	r3,4(r18)
   21e1c:	00c006c4 	movi	r3,27
   21e20:	19804536 	bltu	r3,r6,21f38 <_realloc_r+0x470>
   21e24:	90800204 	addi	r2,r18,8
   21e28:	a8c00204 	addi	r3,r21,8
   21e2c:	003f6306 	br	21bbc <__alt_data_end+0xfffe8bbc>
   21e30:	9005883a 	mov	r2,r18
   21e34:	a8c00017 	ldw	r3,0(r21)
   21e38:	b821883a 	mov	r16,r23
   21e3c:	b027883a 	mov	r19,r22
   21e40:	10c00015 	stw	r3,0(r2)
   21e44:	a8c00117 	ldw	r3,4(r21)
   21e48:	10c00115 	stw	r3,4(r2)
   21e4c:	a8c00217 	ldw	r3,8(r21)
   21e50:	10c00215 	stw	r3,8(r2)
   21e54:	003f6a06 	br	21c00 <__alt_data_end+0xfffe8c00>
   21e58:	9c67883a 	add	r19,r19,r17
   21e5c:	4445c83a 	sub	r2,r8,r17
   21e60:	e4c00215 	stw	r19,8(fp)
   21e64:	10800054 	ori	r2,r2,1
   21e68:	98800115 	stw	r2,4(r19)
   21e6c:	a8bfff17 	ldw	r2,-4(r21)
   21e70:	a009883a 	mov	r4,r20
   21e74:	1080004c 	andi	r2,r2,1
   21e78:	1462b03a 	or	r17,r2,r17
   21e7c:	ac7fff15 	stw	r17,-4(r21)
   21e80:	002366c0 	call	2366c <__malloc_unlock>
   21e84:	a805883a 	mov	r2,r21
   21e88:	003f6b06 	br	21c38 <__alt_data_end+0xfffe8c38>
   21e8c:	a80b883a 	mov	r5,r21
   21e90:	9009883a 	mov	r4,r18
   21e94:	00218440 	call	21844 <memmove>
   21e98:	003f4e06 	br	21bd4 <__alt_data_end+0xfffe8bd4>
   21e9c:	89000404 	addi	r4,r17,16
   21ea0:	b93fbc16 	blt	r23,r4,21d94 <__alt_data_end+0xfffe8d94>
   21ea4:	b0800317 	ldw	r2,12(r22)
   21ea8:	b0c00217 	ldw	r3,8(r22)
   21eac:	81bfff04 	addi	r6,r16,-4
   21eb0:	01000904 	movi	r4,36
   21eb4:	18800315 	stw	r2,12(r3)
   21eb8:	10c00215 	stw	r3,8(r2)
   21ebc:	b4800204 	addi	r18,r22,8
   21ec0:	21804336 	bltu	r4,r6,21fd0 <_realloc_r+0x508>
   21ec4:	008004c4 	movi	r2,19
   21ec8:	11803f2e 	bgeu	r2,r6,21fc8 <_realloc_r+0x500>
   21ecc:	a8800017 	ldw	r2,0(r21)
   21ed0:	b0800215 	stw	r2,8(r22)
   21ed4:	a8800117 	ldw	r2,4(r21)
   21ed8:	b0800315 	stw	r2,12(r22)
   21edc:	008006c4 	movi	r2,27
   21ee0:	11803f36 	bltu	r2,r6,21fe0 <_realloc_r+0x518>
   21ee4:	b0800404 	addi	r2,r22,16
   21ee8:	ad400204 	addi	r21,r21,8
   21eec:	a8c00017 	ldw	r3,0(r21)
   21ef0:	10c00015 	stw	r3,0(r2)
   21ef4:	a8c00117 	ldw	r3,4(r21)
   21ef8:	10c00115 	stw	r3,4(r2)
   21efc:	a8c00217 	ldw	r3,8(r21)
   21f00:	10c00215 	stw	r3,8(r2)
   21f04:	b447883a 	add	r3,r22,r17
   21f08:	bc45c83a 	sub	r2,r23,r17
   21f0c:	e0c00215 	stw	r3,8(fp)
   21f10:	10800054 	ori	r2,r2,1
   21f14:	18800115 	stw	r2,4(r3)
   21f18:	b0800117 	ldw	r2,4(r22)
   21f1c:	a009883a 	mov	r4,r20
   21f20:	1080004c 	andi	r2,r2,1
   21f24:	1462b03a 	or	r17,r2,r17
   21f28:	b4400115 	stw	r17,4(r22)
   21f2c:	002366c0 	call	2366c <__malloc_unlock>
   21f30:	9005883a 	mov	r2,r18
   21f34:	003f4006 	br	21c38 <__alt_data_end+0xfffe8c38>
   21f38:	a8c00217 	ldw	r3,8(r21)
   21f3c:	90c00215 	stw	r3,8(r18)
   21f40:	a8c00317 	ldw	r3,12(r21)
   21f44:	90c00315 	stw	r3,12(r18)
   21f48:	30801126 	beq	r6,r2,21f90 <_realloc_r+0x4c8>
   21f4c:	90800404 	addi	r2,r18,16
   21f50:	a8c00404 	addi	r3,r21,16
   21f54:	003f1906 	br	21bbc <__alt_data_end+0xfffe8bbc>
   21f58:	90ffff17 	ldw	r3,-4(r18)
   21f5c:	00bfff04 	movi	r2,-4
   21f60:	a825883a 	mov	r18,r21
   21f64:	1884703a 	and	r2,r3,r2
   21f68:	80a1883a 	add	r16,r16,r2
   21f6c:	003f2406 	br	21c00 <__alt_data_end+0xfffe8c00>
   21f70:	a8800217 	ldw	r2,8(r21)
   21f74:	b0800415 	stw	r2,16(r22)
   21f78:	a8800317 	ldw	r2,12(r21)
   21f7c:	b0800515 	stw	r2,20(r22)
   21f80:	31000a26 	beq	r6,r4,21fac <_realloc_r+0x4e4>
   21f84:	b0800604 	addi	r2,r22,24
   21f88:	ad400404 	addi	r21,r21,16
   21f8c:	003fa906 	br	21e34 <__alt_data_end+0xfffe8e34>
   21f90:	a9000417 	ldw	r4,16(r21)
   21f94:	90800604 	addi	r2,r18,24
   21f98:	a8c00604 	addi	r3,r21,24
   21f9c:	91000415 	stw	r4,16(r18)
   21fa0:	a9000517 	ldw	r4,20(r21)
   21fa4:	91000515 	stw	r4,20(r18)
   21fa8:	003f0406 	br	21bbc <__alt_data_end+0xfffe8bbc>
   21fac:	a8c00417 	ldw	r3,16(r21)
   21fb0:	ad400604 	addi	r21,r21,24
   21fb4:	b0800804 	addi	r2,r22,32
   21fb8:	b0c00615 	stw	r3,24(r22)
   21fbc:	a8ffff17 	ldw	r3,-4(r21)
   21fc0:	b0c00715 	stw	r3,28(r22)
   21fc4:	003f9b06 	br	21e34 <__alt_data_end+0xfffe8e34>
   21fc8:	9005883a 	mov	r2,r18
   21fcc:	003fc706 	br	21eec <__alt_data_end+0xfffe8eec>
   21fd0:	a80b883a 	mov	r5,r21
   21fd4:	9009883a 	mov	r4,r18
   21fd8:	00218440 	call	21844 <memmove>
   21fdc:	003fc906 	br	21f04 <__alt_data_end+0xfffe8f04>
   21fe0:	a8800217 	ldw	r2,8(r21)
   21fe4:	b0800415 	stw	r2,16(r22)
   21fe8:	a8800317 	ldw	r2,12(r21)
   21fec:	b0800515 	stw	r2,20(r22)
   21ff0:	31000726 	beq	r6,r4,22010 <_realloc_r+0x548>
   21ff4:	b0800604 	addi	r2,r22,24
   21ff8:	ad400404 	addi	r21,r21,16
   21ffc:	003fbb06 	br	21eec <__alt_data_end+0xfffe8eec>
   22000:	a009883a 	mov	r4,r20
   22004:	002366c0 	call	2366c <__malloc_unlock>
   22008:	0005883a 	mov	r2,zero
   2200c:	003f0a06 	br	21c38 <__alt_data_end+0xfffe8c38>
   22010:	a8c00417 	ldw	r3,16(r21)
   22014:	ad400604 	addi	r21,r21,24
   22018:	b0800804 	addi	r2,r22,32
   2201c:	b0c00615 	stw	r3,24(r22)
   22020:	a8ffff17 	ldw	r3,-4(r21)
   22024:	b0c00715 	stw	r3,28(r22)
   22028:	003fb006 	br	21eec <__alt_data_end+0xfffe8eec>

0002202c <_sbrk_r>:
   2202c:	defffd04 	addi	sp,sp,-12
   22030:	dc000015 	stw	r16,0(sp)
   22034:	040000f4 	movhi	r16,3
   22038:	dc400115 	stw	r17,4(sp)
   2203c:	842d6704 	addi	r16,r16,-19044
   22040:	2023883a 	mov	r17,r4
   22044:	2809883a 	mov	r4,r5
   22048:	dfc00215 	stw	ra,8(sp)
   2204c:	80000015 	stw	zero,0(r16)
   22050:	00238540 	call	23854 <sbrk>
   22054:	00ffffc4 	movi	r3,-1
   22058:	10c00526 	beq	r2,r3,22070 <_sbrk_r+0x44>
   2205c:	dfc00217 	ldw	ra,8(sp)
   22060:	dc400117 	ldw	r17,4(sp)
   22064:	dc000017 	ldw	r16,0(sp)
   22068:	dec00304 	addi	sp,sp,12
   2206c:	f800283a 	ret
   22070:	80c00017 	ldw	r3,0(r16)
   22074:	183ff926 	beq	r3,zero,2205c <__alt_data_end+0xfffe905c>
   22078:	88c00015 	stw	r3,0(r17)
   2207c:	003ff706 	br	2205c <__alt_data_end+0xfffe905c>

00022080 <__sread>:
   22080:	defffe04 	addi	sp,sp,-8
   22084:	dc000015 	stw	r16,0(sp)
   22088:	2821883a 	mov	r16,r5
   2208c:	2940038f 	ldh	r5,14(r5)
   22090:	dfc00115 	stw	ra,4(sp)
   22094:	0022dc00 	call	22dc0 <_read_r>
   22098:	10000716 	blt	r2,zero,220b8 <__sread+0x38>
   2209c:	80c01417 	ldw	r3,80(r16)
   220a0:	1887883a 	add	r3,r3,r2
   220a4:	80c01415 	stw	r3,80(r16)
   220a8:	dfc00117 	ldw	ra,4(sp)
   220ac:	dc000017 	ldw	r16,0(sp)
   220b0:	dec00204 	addi	sp,sp,8
   220b4:	f800283a 	ret
   220b8:	80c0030b 	ldhu	r3,12(r16)
   220bc:	18fbffcc 	andi	r3,r3,61439
   220c0:	80c0030d 	sth	r3,12(r16)
   220c4:	dfc00117 	ldw	ra,4(sp)
   220c8:	dc000017 	ldw	r16,0(sp)
   220cc:	dec00204 	addi	sp,sp,8
   220d0:	f800283a 	ret

000220d4 <__seofread>:
   220d4:	0005883a 	mov	r2,zero
   220d8:	f800283a 	ret

000220dc <__swrite>:
   220dc:	2880030b 	ldhu	r2,12(r5)
   220e0:	defffb04 	addi	sp,sp,-20
   220e4:	dcc00315 	stw	r19,12(sp)
   220e8:	dc800215 	stw	r18,8(sp)
   220ec:	dc400115 	stw	r17,4(sp)
   220f0:	dc000015 	stw	r16,0(sp)
   220f4:	dfc00415 	stw	ra,16(sp)
   220f8:	10c0400c 	andi	r3,r2,256
   220fc:	2821883a 	mov	r16,r5
   22100:	2023883a 	mov	r17,r4
   22104:	3025883a 	mov	r18,r6
   22108:	3827883a 	mov	r19,r7
   2210c:	18000526 	beq	r3,zero,22124 <__swrite+0x48>
   22110:	2940038f 	ldh	r5,14(r5)
   22114:	01c00084 	movi	r7,2
   22118:	000d883a 	mov	r6,zero
   2211c:	0022ba40 	call	22ba4 <_lseek_r>
   22120:	8080030b 	ldhu	r2,12(r16)
   22124:	8140038f 	ldh	r5,14(r16)
   22128:	10bbffcc 	andi	r2,r2,61439
   2212c:	980f883a 	mov	r7,r19
   22130:	900d883a 	mov	r6,r18
   22134:	8809883a 	mov	r4,r17
   22138:	8080030d 	sth	r2,12(r16)
   2213c:	dfc00417 	ldw	ra,16(sp)
   22140:	dcc00317 	ldw	r19,12(sp)
   22144:	dc800217 	ldw	r18,8(sp)
   22148:	dc400117 	ldw	r17,4(sp)
   2214c:	dc000017 	ldw	r16,0(sp)
   22150:	dec00504 	addi	sp,sp,20
   22154:	00221bc1 	jmpi	221bc <_write_r>

00022158 <__sseek>:
   22158:	defffe04 	addi	sp,sp,-8
   2215c:	dc000015 	stw	r16,0(sp)
   22160:	2821883a 	mov	r16,r5
   22164:	2940038f 	ldh	r5,14(r5)
   22168:	dfc00115 	stw	ra,4(sp)
   2216c:	0022ba40 	call	22ba4 <_lseek_r>
   22170:	00ffffc4 	movi	r3,-1
   22174:	10c00826 	beq	r2,r3,22198 <__sseek+0x40>
   22178:	80c0030b 	ldhu	r3,12(r16)
   2217c:	80801415 	stw	r2,80(r16)
   22180:	18c40014 	ori	r3,r3,4096
   22184:	80c0030d 	sth	r3,12(r16)
   22188:	dfc00117 	ldw	ra,4(sp)
   2218c:	dc000017 	ldw	r16,0(sp)
   22190:	dec00204 	addi	sp,sp,8
   22194:	f800283a 	ret
   22198:	80c0030b 	ldhu	r3,12(r16)
   2219c:	18fbffcc 	andi	r3,r3,61439
   221a0:	80c0030d 	sth	r3,12(r16)
   221a4:	dfc00117 	ldw	ra,4(sp)
   221a8:	dc000017 	ldw	r16,0(sp)
   221ac:	dec00204 	addi	sp,sp,8
   221b0:	f800283a 	ret

000221b4 <__sclose>:
   221b4:	2940038f 	ldh	r5,14(r5)
   221b8:	00223701 	jmpi	22370 <_close_r>

000221bc <_write_r>:
   221bc:	defffd04 	addi	sp,sp,-12
   221c0:	2805883a 	mov	r2,r5
   221c4:	dc000015 	stw	r16,0(sp)
   221c8:	040000f4 	movhi	r16,3
   221cc:	dc400115 	stw	r17,4(sp)
   221d0:	300b883a 	mov	r5,r6
   221d4:	842d6704 	addi	r16,r16,-19044
   221d8:	2023883a 	mov	r17,r4
   221dc:	380d883a 	mov	r6,r7
   221e0:	1009883a 	mov	r4,r2
   221e4:	dfc00215 	stw	ra,8(sp)
   221e8:	80000015 	stw	zero,0(r16)
   221ec:	00239400 	call	23940 <write>
   221f0:	00ffffc4 	movi	r3,-1
   221f4:	10c00526 	beq	r2,r3,2220c <_write_r+0x50>
   221f8:	dfc00217 	ldw	ra,8(sp)
   221fc:	dc400117 	ldw	r17,4(sp)
   22200:	dc000017 	ldw	r16,0(sp)
   22204:	dec00304 	addi	sp,sp,12
   22208:	f800283a 	ret
   2220c:	80c00017 	ldw	r3,0(r16)
   22210:	183ff926 	beq	r3,zero,221f8 <__alt_data_end+0xfffe91f8>
   22214:	88c00015 	stw	r3,0(r17)
   22218:	003ff706 	br	221f8 <__alt_data_end+0xfffe91f8>

0002221c <__swsetup_r>:
   2221c:	008000f4 	movhi	r2,3
   22220:	defffd04 	addi	sp,sp,-12
   22224:	10a69d04 	addi	r2,r2,-25996
   22228:	dc400115 	stw	r17,4(sp)
   2222c:	2023883a 	mov	r17,r4
   22230:	11000017 	ldw	r4,0(r2)
   22234:	dc000015 	stw	r16,0(sp)
   22238:	dfc00215 	stw	ra,8(sp)
   2223c:	2821883a 	mov	r16,r5
   22240:	20000226 	beq	r4,zero,2224c <__swsetup_r+0x30>
   22244:	20800e17 	ldw	r2,56(r4)
   22248:	10003126 	beq	r2,zero,22310 <__swsetup_r+0xf4>
   2224c:	8080030b 	ldhu	r2,12(r16)
   22250:	10c0020c 	andi	r3,r2,8
   22254:	1009883a 	mov	r4,r2
   22258:	18000f26 	beq	r3,zero,22298 <__swsetup_r+0x7c>
   2225c:	80c00417 	ldw	r3,16(r16)
   22260:	18001526 	beq	r3,zero,222b8 <__swsetup_r+0x9c>
   22264:	1100004c 	andi	r4,r2,1
   22268:	20001c1e 	bne	r4,zero,222dc <__swsetup_r+0xc0>
   2226c:	1080008c 	andi	r2,r2,2
   22270:	1000291e 	bne	r2,zero,22318 <__swsetup_r+0xfc>
   22274:	80800517 	ldw	r2,20(r16)
   22278:	80800215 	stw	r2,8(r16)
   2227c:	18001c26 	beq	r3,zero,222f0 <__swsetup_r+0xd4>
   22280:	0005883a 	mov	r2,zero
   22284:	dfc00217 	ldw	ra,8(sp)
   22288:	dc400117 	ldw	r17,4(sp)
   2228c:	dc000017 	ldw	r16,0(sp)
   22290:	dec00304 	addi	sp,sp,12
   22294:	f800283a 	ret
   22298:	2080040c 	andi	r2,r4,16
   2229c:	10002e26 	beq	r2,zero,22358 <__swsetup_r+0x13c>
   222a0:	2080010c 	andi	r2,r4,4
   222a4:	10001e1e 	bne	r2,zero,22320 <__swsetup_r+0x104>
   222a8:	80c00417 	ldw	r3,16(r16)
   222ac:	20800214 	ori	r2,r4,8
   222b0:	8080030d 	sth	r2,12(r16)
   222b4:	183feb1e 	bne	r3,zero,22264 <__alt_data_end+0xfffe9264>
   222b8:	1100a00c 	andi	r4,r2,640
   222bc:	01408004 	movi	r5,512
   222c0:	217fe826 	beq	r4,r5,22264 <__alt_data_end+0xfffe9264>
   222c4:	800b883a 	mov	r5,r16
   222c8:	8809883a 	mov	r4,r17
   222cc:	0022c040 	call	22c04 <__smakebuf_r>
   222d0:	8080030b 	ldhu	r2,12(r16)
   222d4:	80c00417 	ldw	r3,16(r16)
   222d8:	003fe206 	br	22264 <__alt_data_end+0xfffe9264>
   222dc:	80800517 	ldw	r2,20(r16)
   222e0:	80000215 	stw	zero,8(r16)
   222e4:	0085c83a 	sub	r2,zero,r2
   222e8:	80800615 	stw	r2,24(r16)
   222ec:	183fe41e 	bne	r3,zero,22280 <__alt_data_end+0xfffe9280>
   222f0:	80c0030b 	ldhu	r3,12(r16)
   222f4:	0005883a 	mov	r2,zero
   222f8:	1900200c 	andi	r4,r3,128
   222fc:	203fe126 	beq	r4,zero,22284 <__alt_data_end+0xfffe9284>
   22300:	18c01014 	ori	r3,r3,64
   22304:	80c0030d 	sth	r3,12(r16)
   22308:	00bfffc4 	movi	r2,-1
   2230c:	003fdd06 	br	22284 <__alt_data_end+0xfffe9284>
   22310:	002076c0 	call	2076c <__sinit>
   22314:	003fcd06 	br	2224c <__alt_data_end+0xfffe924c>
   22318:	0005883a 	mov	r2,zero
   2231c:	003fd606 	br	22278 <__alt_data_end+0xfffe9278>
   22320:	81400c17 	ldw	r5,48(r16)
   22324:	28000626 	beq	r5,zero,22340 <__swsetup_r+0x124>
   22328:	80801004 	addi	r2,r16,64
   2232c:	28800326 	beq	r5,r2,2233c <__swsetup_r+0x120>
   22330:	8809883a 	mov	r4,r17
   22334:	00228940 	call	22894 <_free_r>
   22338:	8100030b 	ldhu	r4,12(r16)
   2233c:	80000c15 	stw	zero,48(r16)
   22340:	80c00417 	ldw	r3,16(r16)
   22344:	00bff6c4 	movi	r2,-37
   22348:	1108703a 	and	r4,r2,r4
   2234c:	80000115 	stw	zero,4(r16)
   22350:	80c00015 	stw	r3,0(r16)
   22354:	003fd506 	br	222ac <__alt_data_end+0xfffe92ac>
   22358:	00800244 	movi	r2,9
   2235c:	88800015 	stw	r2,0(r17)
   22360:	20801014 	ori	r2,r4,64
   22364:	8080030d 	sth	r2,12(r16)
   22368:	00bfffc4 	movi	r2,-1
   2236c:	003fc506 	br	22284 <__alt_data_end+0xfffe9284>

00022370 <_close_r>:
   22370:	defffd04 	addi	sp,sp,-12
   22374:	dc000015 	stw	r16,0(sp)
   22378:	040000f4 	movhi	r16,3
   2237c:	dc400115 	stw	r17,4(sp)
   22380:	842d6704 	addi	r16,r16,-19044
   22384:	2023883a 	mov	r17,r4
   22388:	2809883a 	mov	r4,r5
   2238c:	dfc00215 	stw	ra,8(sp)
   22390:	80000015 	stw	zero,0(r16)
   22394:	00230e80 	call	230e8 <close>
   22398:	00ffffc4 	movi	r3,-1
   2239c:	10c00526 	beq	r2,r3,223b4 <_close_r+0x44>
   223a0:	dfc00217 	ldw	ra,8(sp)
   223a4:	dc400117 	ldw	r17,4(sp)
   223a8:	dc000017 	ldw	r16,0(sp)
   223ac:	dec00304 	addi	sp,sp,12
   223b0:	f800283a 	ret
   223b4:	80c00017 	ldw	r3,0(r16)
   223b8:	183ff926 	beq	r3,zero,223a0 <__alt_data_end+0xfffe93a0>
   223bc:	88c00015 	stw	r3,0(r17)
   223c0:	003ff706 	br	223a0 <__alt_data_end+0xfffe93a0>

000223c4 <_fclose_r>:
   223c4:	28003926 	beq	r5,zero,224ac <_fclose_r+0xe8>
   223c8:	defffc04 	addi	sp,sp,-16
   223cc:	dc400115 	stw	r17,4(sp)
   223d0:	dc000015 	stw	r16,0(sp)
   223d4:	dfc00315 	stw	ra,12(sp)
   223d8:	dc800215 	stw	r18,8(sp)
   223dc:	2023883a 	mov	r17,r4
   223e0:	2821883a 	mov	r16,r5
   223e4:	20000226 	beq	r4,zero,223f0 <_fclose_r+0x2c>
   223e8:	20800e17 	ldw	r2,56(r4)
   223ec:	10002726 	beq	r2,zero,2248c <_fclose_r+0xc8>
   223f0:	8080030f 	ldh	r2,12(r16)
   223f4:	1000071e 	bne	r2,zero,22414 <_fclose_r+0x50>
   223f8:	0005883a 	mov	r2,zero
   223fc:	dfc00317 	ldw	ra,12(sp)
   22400:	dc800217 	ldw	r18,8(sp)
   22404:	dc400117 	ldw	r17,4(sp)
   22408:	dc000017 	ldw	r16,0(sp)
   2240c:	dec00404 	addi	sp,sp,16
   22410:	f800283a 	ret
   22414:	800b883a 	mov	r5,r16
   22418:	8809883a 	mov	r4,r17
   2241c:	00224c80 	call	224c8 <__sflush_r>
   22420:	1025883a 	mov	r18,r2
   22424:	80800b17 	ldw	r2,44(r16)
   22428:	10000426 	beq	r2,zero,2243c <_fclose_r+0x78>
   2242c:	81400717 	ldw	r5,28(r16)
   22430:	8809883a 	mov	r4,r17
   22434:	103ee83a 	callr	r2
   22438:	10001616 	blt	r2,zero,22494 <_fclose_r+0xd0>
   2243c:	8080030b 	ldhu	r2,12(r16)
   22440:	1080200c 	andi	r2,r2,128
   22444:	1000151e 	bne	r2,zero,2249c <_fclose_r+0xd8>
   22448:	81400c17 	ldw	r5,48(r16)
   2244c:	28000526 	beq	r5,zero,22464 <_fclose_r+0xa0>
   22450:	80801004 	addi	r2,r16,64
   22454:	28800226 	beq	r5,r2,22460 <_fclose_r+0x9c>
   22458:	8809883a 	mov	r4,r17
   2245c:	00228940 	call	22894 <_free_r>
   22460:	80000c15 	stw	zero,48(r16)
   22464:	81401117 	ldw	r5,68(r16)
   22468:	28000326 	beq	r5,zero,22478 <_fclose_r+0xb4>
   2246c:	8809883a 	mov	r4,r17
   22470:	00228940 	call	22894 <_free_r>
   22474:	80001115 	stw	zero,68(r16)
   22478:	002077c0 	call	2077c <__sfp_lock_acquire>
   2247c:	8000030d 	sth	zero,12(r16)
   22480:	00207800 	call	20780 <__sfp_lock_release>
   22484:	9005883a 	mov	r2,r18
   22488:	003fdc06 	br	223fc <__alt_data_end+0xfffe93fc>
   2248c:	002076c0 	call	2076c <__sinit>
   22490:	003fd706 	br	223f0 <__alt_data_end+0xfffe93f0>
   22494:	04bfffc4 	movi	r18,-1
   22498:	003fe806 	br	2243c <__alt_data_end+0xfffe943c>
   2249c:	81400417 	ldw	r5,16(r16)
   224a0:	8809883a 	mov	r4,r17
   224a4:	00228940 	call	22894 <_free_r>
   224a8:	003fe706 	br	22448 <__alt_data_end+0xfffe9448>
   224ac:	0005883a 	mov	r2,zero
   224b0:	f800283a 	ret

000224b4 <fclose>:
   224b4:	008000f4 	movhi	r2,3
   224b8:	10a69d04 	addi	r2,r2,-25996
   224bc:	200b883a 	mov	r5,r4
   224c0:	11000017 	ldw	r4,0(r2)
   224c4:	00223c41 	jmpi	223c4 <_fclose_r>

000224c8 <__sflush_r>:
   224c8:	2880030b 	ldhu	r2,12(r5)
   224cc:	defffb04 	addi	sp,sp,-20
   224d0:	dcc00315 	stw	r19,12(sp)
   224d4:	dc400115 	stw	r17,4(sp)
   224d8:	dfc00415 	stw	ra,16(sp)
   224dc:	dc800215 	stw	r18,8(sp)
   224e0:	dc000015 	stw	r16,0(sp)
   224e4:	10c0020c 	andi	r3,r2,8
   224e8:	2823883a 	mov	r17,r5
   224ec:	2027883a 	mov	r19,r4
   224f0:	1800311e 	bne	r3,zero,225b8 <__sflush_r+0xf0>
   224f4:	28c00117 	ldw	r3,4(r5)
   224f8:	10820014 	ori	r2,r2,2048
   224fc:	2880030d 	sth	r2,12(r5)
   22500:	00c04b0e 	bge	zero,r3,22630 <__sflush_r+0x168>
   22504:	8a000a17 	ldw	r8,40(r17)
   22508:	40002326 	beq	r8,zero,22598 <__sflush_r+0xd0>
   2250c:	9c000017 	ldw	r16,0(r19)
   22510:	10c4000c 	andi	r3,r2,4096
   22514:	98000015 	stw	zero,0(r19)
   22518:	18004826 	beq	r3,zero,2263c <__sflush_r+0x174>
   2251c:	89801417 	ldw	r6,80(r17)
   22520:	10c0010c 	andi	r3,r2,4
   22524:	18000626 	beq	r3,zero,22540 <__sflush_r+0x78>
   22528:	88c00117 	ldw	r3,4(r17)
   2252c:	88800c17 	ldw	r2,48(r17)
   22530:	30cdc83a 	sub	r6,r6,r3
   22534:	10000226 	beq	r2,zero,22540 <__sflush_r+0x78>
   22538:	88800f17 	ldw	r2,60(r17)
   2253c:	308dc83a 	sub	r6,r6,r2
   22540:	89400717 	ldw	r5,28(r17)
   22544:	000f883a 	mov	r7,zero
   22548:	9809883a 	mov	r4,r19
   2254c:	403ee83a 	callr	r8
   22550:	00ffffc4 	movi	r3,-1
   22554:	10c04426 	beq	r2,r3,22668 <__sflush_r+0x1a0>
   22558:	88c0030b 	ldhu	r3,12(r17)
   2255c:	89000417 	ldw	r4,16(r17)
   22560:	88000115 	stw	zero,4(r17)
   22564:	197dffcc 	andi	r5,r3,63487
   22568:	8940030d 	sth	r5,12(r17)
   2256c:	89000015 	stw	r4,0(r17)
   22570:	18c4000c 	andi	r3,r3,4096
   22574:	18002c1e 	bne	r3,zero,22628 <__sflush_r+0x160>
   22578:	89400c17 	ldw	r5,48(r17)
   2257c:	9c000015 	stw	r16,0(r19)
   22580:	28000526 	beq	r5,zero,22598 <__sflush_r+0xd0>
   22584:	88801004 	addi	r2,r17,64
   22588:	28800226 	beq	r5,r2,22594 <__sflush_r+0xcc>
   2258c:	9809883a 	mov	r4,r19
   22590:	00228940 	call	22894 <_free_r>
   22594:	88000c15 	stw	zero,48(r17)
   22598:	0005883a 	mov	r2,zero
   2259c:	dfc00417 	ldw	ra,16(sp)
   225a0:	dcc00317 	ldw	r19,12(sp)
   225a4:	dc800217 	ldw	r18,8(sp)
   225a8:	dc400117 	ldw	r17,4(sp)
   225ac:	dc000017 	ldw	r16,0(sp)
   225b0:	dec00504 	addi	sp,sp,20
   225b4:	f800283a 	ret
   225b8:	2c800417 	ldw	r18,16(r5)
   225bc:	903ff626 	beq	r18,zero,22598 <__alt_data_end+0xfffe9598>
   225c0:	2c000017 	ldw	r16,0(r5)
   225c4:	108000cc 	andi	r2,r2,3
   225c8:	2c800015 	stw	r18,0(r5)
   225cc:	84a1c83a 	sub	r16,r16,r18
   225d0:	1000131e 	bne	r2,zero,22620 <__sflush_r+0x158>
   225d4:	28800517 	ldw	r2,20(r5)
   225d8:	88800215 	stw	r2,8(r17)
   225dc:	04000316 	blt	zero,r16,225ec <__sflush_r+0x124>
   225e0:	003fed06 	br	22598 <__alt_data_end+0xfffe9598>
   225e4:	90a5883a 	add	r18,r18,r2
   225e8:	043feb0e 	bge	zero,r16,22598 <__alt_data_end+0xfffe9598>
   225ec:	88800917 	ldw	r2,36(r17)
   225f0:	89400717 	ldw	r5,28(r17)
   225f4:	800f883a 	mov	r7,r16
   225f8:	900d883a 	mov	r6,r18
   225fc:	9809883a 	mov	r4,r19
   22600:	103ee83a 	callr	r2
   22604:	80a1c83a 	sub	r16,r16,r2
   22608:	00bff616 	blt	zero,r2,225e4 <__alt_data_end+0xfffe95e4>
   2260c:	88c0030b 	ldhu	r3,12(r17)
   22610:	00bfffc4 	movi	r2,-1
   22614:	18c01014 	ori	r3,r3,64
   22618:	88c0030d 	sth	r3,12(r17)
   2261c:	003fdf06 	br	2259c <__alt_data_end+0xfffe959c>
   22620:	0005883a 	mov	r2,zero
   22624:	003fec06 	br	225d8 <__alt_data_end+0xfffe95d8>
   22628:	88801415 	stw	r2,80(r17)
   2262c:	003fd206 	br	22578 <__alt_data_end+0xfffe9578>
   22630:	28c00f17 	ldw	r3,60(r5)
   22634:	00ffb316 	blt	zero,r3,22504 <__alt_data_end+0xfffe9504>
   22638:	003fd706 	br	22598 <__alt_data_end+0xfffe9598>
   2263c:	89400717 	ldw	r5,28(r17)
   22640:	000d883a 	mov	r6,zero
   22644:	01c00044 	movi	r7,1
   22648:	9809883a 	mov	r4,r19
   2264c:	403ee83a 	callr	r8
   22650:	100d883a 	mov	r6,r2
   22654:	00bfffc4 	movi	r2,-1
   22658:	30801426 	beq	r6,r2,226ac <__sflush_r+0x1e4>
   2265c:	8880030b 	ldhu	r2,12(r17)
   22660:	8a000a17 	ldw	r8,40(r17)
   22664:	003fae06 	br	22520 <__alt_data_end+0xfffe9520>
   22668:	98c00017 	ldw	r3,0(r19)
   2266c:	183fba26 	beq	r3,zero,22558 <__alt_data_end+0xfffe9558>
   22670:	01000744 	movi	r4,29
   22674:	19000626 	beq	r3,r4,22690 <__sflush_r+0x1c8>
   22678:	01000584 	movi	r4,22
   2267c:	19000426 	beq	r3,r4,22690 <__sflush_r+0x1c8>
   22680:	88c0030b 	ldhu	r3,12(r17)
   22684:	18c01014 	ori	r3,r3,64
   22688:	88c0030d 	sth	r3,12(r17)
   2268c:	003fc306 	br	2259c <__alt_data_end+0xfffe959c>
   22690:	8880030b 	ldhu	r2,12(r17)
   22694:	88c00417 	ldw	r3,16(r17)
   22698:	88000115 	stw	zero,4(r17)
   2269c:	10bdffcc 	andi	r2,r2,63487
   226a0:	8880030d 	sth	r2,12(r17)
   226a4:	88c00015 	stw	r3,0(r17)
   226a8:	003fb306 	br	22578 <__alt_data_end+0xfffe9578>
   226ac:	98800017 	ldw	r2,0(r19)
   226b0:	103fea26 	beq	r2,zero,2265c <__alt_data_end+0xfffe965c>
   226b4:	00c00744 	movi	r3,29
   226b8:	10c00226 	beq	r2,r3,226c4 <__sflush_r+0x1fc>
   226bc:	00c00584 	movi	r3,22
   226c0:	10c0031e 	bne	r2,r3,226d0 <__sflush_r+0x208>
   226c4:	9c000015 	stw	r16,0(r19)
   226c8:	0005883a 	mov	r2,zero
   226cc:	003fb306 	br	2259c <__alt_data_end+0xfffe959c>
   226d0:	88c0030b 	ldhu	r3,12(r17)
   226d4:	3005883a 	mov	r2,r6
   226d8:	18c01014 	ori	r3,r3,64
   226dc:	88c0030d 	sth	r3,12(r17)
   226e0:	003fae06 	br	2259c <__alt_data_end+0xfffe959c>

000226e4 <_fflush_r>:
   226e4:	defffd04 	addi	sp,sp,-12
   226e8:	dc000115 	stw	r16,4(sp)
   226ec:	dfc00215 	stw	ra,8(sp)
   226f0:	2021883a 	mov	r16,r4
   226f4:	20000226 	beq	r4,zero,22700 <_fflush_r+0x1c>
   226f8:	20800e17 	ldw	r2,56(r4)
   226fc:	10000c26 	beq	r2,zero,22730 <_fflush_r+0x4c>
   22700:	2880030f 	ldh	r2,12(r5)
   22704:	1000051e 	bne	r2,zero,2271c <_fflush_r+0x38>
   22708:	0005883a 	mov	r2,zero
   2270c:	dfc00217 	ldw	ra,8(sp)
   22710:	dc000117 	ldw	r16,4(sp)
   22714:	dec00304 	addi	sp,sp,12
   22718:	f800283a 	ret
   2271c:	8009883a 	mov	r4,r16
   22720:	dfc00217 	ldw	ra,8(sp)
   22724:	dc000117 	ldw	r16,4(sp)
   22728:	dec00304 	addi	sp,sp,12
   2272c:	00224c81 	jmpi	224c8 <__sflush_r>
   22730:	d9400015 	stw	r5,0(sp)
   22734:	002076c0 	call	2076c <__sinit>
   22738:	d9400017 	ldw	r5,0(sp)
   2273c:	003ff006 	br	22700 <__alt_data_end+0xfffe9700>

00022740 <fflush>:
   22740:	20000526 	beq	r4,zero,22758 <fflush+0x18>
   22744:	008000f4 	movhi	r2,3
   22748:	10a69d04 	addi	r2,r2,-25996
   2274c:	200b883a 	mov	r5,r4
   22750:	11000017 	ldw	r4,0(r2)
   22754:	00226e41 	jmpi	226e4 <_fflush_r>
   22758:	008000f4 	movhi	r2,3
   2275c:	10a69c04 	addi	r2,r2,-26000
   22760:	11000017 	ldw	r4,0(r2)
   22764:	014000b4 	movhi	r5,2
   22768:	2949b904 	addi	r5,r5,9956
   2276c:	0020d481 	jmpi	20d48 <_fwalk_reent>

00022770 <_malloc_trim_r>:
   22770:	defffb04 	addi	sp,sp,-20
   22774:	dcc00315 	stw	r19,12(sp)
   22778:	04c000f4 	movhi	r19,3
   2277c:	dc800215 	stw	r18,8(sp)
   22780:	dc400115 	stw	r17,4(sp)
   22784:	dc000015 	stw	r16,0(sp)
   22788:	dfc00415 	stw	ra,16(sp)
   2278c:	2821883a 	mov	r16,r5
   22790:	9ce0fd04 	addi	r19,r19,-31756
   22794:	2025883a 	mov	r18,r4
   22798:	00236480 	call	23648 <__malloc_lock>
   2279c:	98800217 	ldw	r2,8(r19)
   227a0:	14400117 	ldw	r17,4(r2)
   227a4:	00bfff04 	movi	r2,-4
   227a8:	88a2703a 	and	r17,r17,r2
   227ac:	8c21c83a 	sub	r16,r17,r16
   227b0:	8403fbc4 	addi	r16,r16,4079
   227b4:	8020d33a 	srli	r16,r16,12
   227b8:	0083ffc4 	movi	r2,4095
   227bc:	843fffc4 	addi	r16,r16,-1
   227c0:	8020933a 	slli	r16,r16,12
   227c4:	1400060e 	bge	r2,r16,227e0 <_malloc_trim_r+0x70>
   227c8:	000b883a 	mov	r5,zero
   227cc:	9009883a 	mov	r4,r18
   227d0:	002202c0 	call	2202c <_sbrk_r>
   227d4:	98c00217 	ldw	r3,8(r19)
   227d8:	1c47883a 	add	r3,r3,r17
   227dc:	10c00a26 	beq	r2,r3,22808 <_malloc_trim_r+0x98>
   227e0:	9009883a 	mov	r4,r18
   227e4:	002366c0 	call	2366c <__malloc_unlock>
   227e8:	0005883a 	mov	r2,zero
   227ec:	dfc00417 	ldw	ra,16(sp)
   227f0:	dcc00317 	ldw	r19,12(sp)
   227f4:	dc800217 	ldw	r18,8(sp)
   227f8:	dc400117 	ldw	r17,4(sp)
   227fc:	dc000017 	ldw	r16,0(sp)
   22800:	dec00504 	addi	sp,sp,20
   22804:	f800283a 	ret
   22808:	040bc83a 	sub	r5,zero,r16
   2280c:	9009883a 	mov	r4,r18
   22810:	002202c0 	call	2202c <_sbrk_r>
   22814:	00ffffc4 	movi	r3,-1
   22818:	10c00d26 	beq	r2,r3,22850 <_malloc_trim_r+0xe0>
   2281c:	00c000f4 	movhi	r3,3
   22820:	18ed6f04 	addi	r3,r3,-19012
   22824:	18800017 	ldw	r2,0(r3)
   22828:	99000217 	ldw	r4,8(r19)
   2282c:	8c23c83a 	sub	r17,r17,r16
   22830:	8c400054 	ori	r17,r17,1
   22834:	1421c83a 	sub	r16,r2,r16
   22838:	24400115 	stw	r17,4(r4)
   2283c:	9009883a 	mov	r4,r18
   22840:	1c000015 	stw	r16,0(r3)
   22844:	002366c0 	call	2366c <__malloc_unlock>
   22848:	00800044 	movi	r2,1
   2284c:	003fe706 	br	227ec <__alt_data_end+0xfffe97ec>
   22850:	000b883a 	mov	r5,zero
   22854:	9009883a 	mov	r4,r18
   22858:	002202c0 	call	2202c <_sbrk_r>
   2285c:	99000217 	ldw	r4,8(r19)
   22860:	014003c4 	movi	r5,15
   22864:	1107c83a 	sub	r3,r2,r4
   22868:	28ffdd0e 	bge	r5,r3,227e0 <__alt_data_end+0xfffe97e0>
   2286c:	014000f4 	movhi	r5,3
   22870:	29669e04 	addi	r5,r5,-25992
   22874:	29400017 	ldw	r5,0(r5)
   22878:	18c00054 	ori	r3,r3,1
   2287c:	20c00115 	stw	r3,4(r4)
   22880:	00c000f4 	movhi	r3,3
   22884:	1145c83a 	sub	r2,r2,r5
   22888:	18ed6f04 	addi	r3,r3,-19012
   2288c:	18800015 	stw	r2,0(r3)
   22890:	003fd306 	br	227e0 <__alt_data_end+0xfffe97e0>

00022894 <_free_r>:
   22894:	28004126 	beq	r5,zero,2299c <_free_r+0x108>
   22898:	defffd04 	addi	sp,sp,-12
   2289c:	dc400115 	stw	r17,4(sp)
   228a0:	dc000015 	stw	r16,0(sp)
   228a4:	2023883a 	mov	r17,r4
   228a8:	2821883a 	mov	r16,r5
   228ac:	dfc00215 	stw	ra,8(sp)
   228b0:	00236480 	call	23648 <__malloc_lock>
   228b4:	81ffff17 	ldw	r7,-4(r16)
   228b8:	00bfff84 	movi	r2,-2
   228bc:	010000f4 	movhi	r4,3
   228c0:	81bffe04 	addi	r6,r16,-8
   228c4:	3884703a 	and	r2,r7,r2
   228c8:	2120fd04 	addi	r4,r4,-31756
   228cc:	308b883a 	add	r5,r6,r2
   228d0:	2a400117 	ldw	r9,4(r5)
   228d4:	22000217 	ldw	r8,8(r4)
   228d8:	00ffff04 	movi	r3,-4
   228dc:	48c6703a 	and	r3,r9,r3
   228e0:	2a005726 	beq	r5,r8,22a40 <_free_r+0x1ac>
   228e4:	28c00115 	stw	r3,4(r5)
   228e8:	39c0004c 	andi	r7,r7,1
   228ec:	3800091e 	bne	r7,zero,22914 <_free_r+0x80>
   228f0:	823ffe17 	ldw	r8,-8(r16)
   228f4:	22400204 	addi	r9,r4,8
   228f8:	320dc83a 	sub	r6,r6,r8
   228fc:	31c00217 	ldw	r7,8(r6)
   22900:	1205883a 	add	r2,r2,r8
   22904:	3a406526 	beq	r7,r9,22a9c <_free_r+0x208>
   22908:	32000317 	ldw	r8,12(r6)
   2290c:	3a000315 	stw	r8,12(r7)
   22910:	41c00215 	stw	r7,8(r8)
   22914:	28cf883a 	add	r7,r5,r3
   22918:	39c00117 	ldw	r7,4(r7)
   2291c:	39c0004c 	andi	r7,r7,1
   22920:	38003a26 	beq	r7,zero,22a0c <_free_r+0x178>
   22924:	10c00054 	ori	r3,r2,1
   22928:	30c00115 	stw	r3,4(r6)
   2292c:	3087883a 	add	r3,r6,r2
   22930:	18800015 	stw	r2,0(r3)
   22934:	00c07fc4 	movi	r3,511
   22938:	18801936 	bltu	r3,r2,229a0 <_free_r+0x10c>
   2293c:	1004d0fa 	srli	r2,r2,3
   22940:	01c00044 	movi	r7,1
   22944:	21400117 	ldw	r5,4(r4)
   22948:	10c00044 	addi	r3,r2,1
   2294c:	18c7883a 	add	r3,r3,r3
   22950:	1005d0ba 	srai	r2,r2,2
   22954:	18c7883a 	add	r3,r3,r3
   22958:	18c7883a 	add	r3,r3,r3
   2295c:	1907883a 	add	r3,r3,r4
   22960:	3884983a 	sll	r2,r7,r2
   22964:	19c00017 	ldw	r7,0(r3)
   22968:	1a3ffe04 	addi	r8,r3,-8
   2296c:	1144b03a 	or	r2,r2,r5
   22970:	32000315 	stw	r8,12(r6)
   22974:	31c00215 	stw	r7,8(r6)
   22978:	20800115 	stw	r2,4(r4)
   2297c:	19800015 	stw	r6,0(r3)
   22980:	39800315 	stw	r6,12(r7)
   22984:	8809883a 	mov	r4,r17
   22988:	dfc00217 	ldw	ra,8(sp)
   2298c:	dc400117 	ldw	r17,4(sp)
   22990:	dc000017 	ldw	r16,0(sp)
   22994:	dec00304 	addi	sp,sp,12
   22998:	002366c1 	jmpi	2366c <__malloc_unlock>
   2299c:	f800283a 	ret
   229a0:	100ad27a 	srli	r5,r2,9
   229a4:	00c00104 	movi	r3,4
   229a8:	19404a36 	bltu	r3,r5,22ad4 <_free_r+0x240>
   229ac:	100ad1ba 	srli	r5,r2,6
   229b0:	28c00e44 	addi	r3,r5,57
   229b4:	18c7883a 	add	r3,r3,r3
   229b8:	29400e04 	addi	r5,r5,56
   229bc:	18c7883a 	add	r3,r3,r3
   229c0:	18c7883a 	add	r3,r3,r3
   229c4:	1909883a 	add	r4,r3,r4
   229c8:	20c00017 	ldw	r3,0(r4)
   229cc:	01c000f4 	movhi	r7,3
   229d0:	213ffe04 	addi	r4,r4,-8
   229d4:	39e0fd04 	addi	r7,r7,-31756
   229d8:	20c04426 	beq	r4,r3,22aec <_free_r+0x258>
   229dc:	01ffff04 	movi	r7,-4
   229e0:	19400117 	ldw	r5,4(r3)
   229e4:	29ca703a 	and	r5,r5,r7
   229e8:	1140022e 	bgeu	r2,r5,229f4 <_free_r+0x160>
   229ec:	18c00217 	ldw	r3,8(r3)
   229f0:	20fffb1e 	bne	r4,r3,229e0 <__alt_data_end+0xfffe99e0>
   229f4:	19000317 	ldw	r4,12(r3)
   229f8:	31000315 	stw	r4,12(r6)
   229fc:	30c00215 	stw	r3,8(r6)
   22a00:	21800215 	stw	r6,8(r4)
   22a04:	19800315 	stw	r6,12(r3)
   22a08:	003fde06 	br	22984 <__alt_data_end+0xfffe9984>
   22a0c:	29c00217 	ldw	r7,8(r5)
   22a10:	10c5883a 	add	r2,r2,r3
   22a14:	00c000f4 	movhi	r3,3
   22a18:	18e0ff04 	addi	r3,r3,-31748
   22a1c:	38c03b26 	beq	r7,r3,22b0c <_free_r+0x278>
   22a20:	2a000317 	ldw	r8,12(r5)
   22a24:	11400054 	ori	r5,r2,1
   22a28:	3087883a 	add	r3,r6,r2
   22a2c:	3a000315 	stw	r8,12(r7)
   22a30:	41c00215 	stw	r7,8(r8)
   22a34:	31400115 	stw	r5,4(r6)
   22a38:	18800015 	stw	r2,0(r3)
   22a3c:	003fbd06 	br	22934 <__alt_data_end+0xfffe9934>
   22a40:	39c0004c 	andi	r7,r7,1
   22a44:	10c5883a 	add	r2,r2,r3
   22a48:	3800071e 	bne	r7,zero,22a68 <_free_r+0x1d4>
   22a4c:	81fffe17 	ldw	r7,-8(r16)
   22a50:	31cdc83a 	sub	r6,r6,r7
   22a54:	30c00317 	ldw	r3,12(r6)
   22a58:	31400217 	ldw	r5,8(r6)
   22a5c:	11c5883a 	add	r2,r2,r7
   22a60:	28c00315 	stw	r3,12(r5)
   22a64:	19400215 	stw	r5,8(r3)
   22a68:	10c00054 	ori	r3,r2,1
   22a6c:	30c00115 	stw	r3,4(r6)
   22a70:	00c000f4 	movhi	r3,3
   22a74:	18e69f04 	addi	r3,r3,-25988
   22a78:	18c00017 	ldw	r3,0(r3)
   22a7c:	21800215 	stw	r6,8(r4)
   22a80:	10ffc036 	bltu	r2,r3,22984 <__alt_data_end+0xfffe9984>
   22a84:	008000f4 	movhi	r2,3
   22a88:	10ad6604 	addi	r2,r2,-19048
   22a8c:	11400017 	ldw	r5,0(r2)
   22a90:	8809883a 	mov	r4,r17
   22a94:	00227700 	call	22770 <_malloc_trim_r>
   22a98:	003fba06 	br	22984 <__alt_data_end+0xfffe9984>
   22a9c:	28c9883a 	add	r4,r5,r3
   22aa0:	21000117 	ldw	r4,4(r4)
   22aa4:	2100004c 	andi	r4,r4,1
   22aa8:	2000391e 	bne	r4,zero,22b90 <_free_r+0x2fc>
   22aac:	29c00217 	ldw	r7,8(r5)
   22ab0:	29000317 	ldw	r4,12(r5)
   22ab4:	1885883a 	add	r2,r3,r2
   22ab8:	10c00054 	ori	r3,r2,1
   22abc:	39000315 	stw	r4,12(r7)
   22ac0:	21c00215 	stw	r7,8(r4)
   22ac4:	30c00115 	stw	r3,4(r6)
   22ac8:	308d883a 	add	r6,r6,r2
   22acc:	30800015 	stw	r2,0(r6)
   22ad0:	003fac06 	br	22984 <__alt_data_end+0xfffe9984>
   22ad4:	00c00504 	movi	r3,20
   22ad8:	19401536 	bltu	r3,r5,22b30 <_free_r+0x29c>
   22adc:	28c01704 	addi	r3,r5,92
   22ae0:	18c7883a 	add	r3,r3,r3
   22ae4:	294016c4 	addi	r5,r5,91
   22ae8:	003fb406 	br	229bc <__alt_data_end+0xfffe99bc>
   22aec:	280bd0ba 	srai	r5,r5,2
   22af0:	00c00044 	movi	r3,1
   22af4:	38800117 	ldw	r2,4(r7)
   22af8:	194a983a 	sll	r5,r3,r5
   22afc:	2007883a 	mov	r3,r4
   22b00:	2884b03a 	or	r2,r5,r2
   22b04:	38800115 	stw	r2,4(r7)
   22b08:	003fbb06 	br	229f8 <__alt_data_end+0xfffe99f8>
   22b0c:	21800515 	stw	r6,20(r4)
   22b10:	21800415 	stw	r6,16(r4)
   22b14:	10c00054 	ori	r3,r2,1
   22b18:	31c00315 	stw	r7,12(r6)
   22b1c:	31c00215 	stw	r7,8(r6)
   22b20:	30c00115 	stw	r3,4(r6)
   22b24:	308d883a 	add	r6,r6,r2
   22b28:	30800015 	stw	r2,0(r6)
   22b2c:	003f9506 	br	22984 <__alt_data_end+0xfffe9984>
   22b30:	00c01504 	movi	r3,84
   22b34:	19400536 	bltu	r3,r5,22b4c <_free_r+0x2b8>
   22b38:	100ad33a 	srli	r5,r2,12
   22b3c:	28c01bc4 	addi	r3,r5,111
   22b40:	18c7883a 	add	r3,r3,r3
   22b44:	29401b84 	addi	r5,r5,110
   22b48:	003f9c06 	br	229bc <__alt_data_end+0xfffe99bc>
   22b4c:	00c05504 	movi	r3,340
   22b50:	19400536 	bltu	r3,r5,22b68 <_free_r+0x2d4>
   22b54:	100ad3fa 	srli	r5,r2,15
   22b58:	28c01e04 	addi	r3,r5,120
   22b5c:	18c7883a 	add	r3,r3,r3
   22b60:	29401dc4 	addi	r5,r5,119
   22b64:	003f9506 	br	229bc <__alt_data_end+0xfffe99bc>
   22b68:	00c15504 	movi	r3,1364
   22b6c:	19400536 	bltu	r3,r5,22b84 <_free_r+0x2f0>
   22b70:	100ad4ba 	srli	r5,r2,18
   22b74:	28c01f44 	addi	r3,r5,125
   22b78:	18c7883a 	add	r3,r3,r3
   22b7c:	29401f04 	addi	r5,r5,124
   22b80:	003f8e06 	br	229bc <__alt_data_end+0xfffe99bc>
   22b84:	00c03f84 	movi	r3,254
   22b88:	01401f84 	movi	r5,126
   22b8c:	003f8b06 	br	229bc <__alt_data_end+0xfffe99bc>
   22b90:	10c00054 	ori	r3,r2,1
   22b94:	30c00115 	stw	r3,4(r6)
   22b98:	308d883a 	add	r6,r6,r2
   22b9c:	30800015 	stw	r2,0(r6)
   22ba0:	003f7806 	br	22984 <__alt_data_end+0xfffe9984>

00022ba4 <_lseek_r>:
   22ba4:	defffd04 	addi	sp,sp,-12
   22ba8:	2805883a 	mov	r2,r5
   22bac:	dc000015 	stw	r16,0(sp)
   22bb0:	040000f4 	movhi	r16,3
   22bb4:	dc400115 	stw	r17,4(sp)
   22bb8:	300b883a 	mov	r5,r6
   22bbc:	842d6704 	addi	r16,r16,-19044
   22bc0:	2023883a 	mov	r17,r4
   22bc4:	380d883a 	mov	r6,r7
   22bc8:	1009883a 	mov	r4,r2
   22bcc:	dfc00215 	stw	ra,8(sp)
   22bd0:	80000015 	stw	zero,0(r16)
   22bd4:	00234f00 	call	234f0 <lseek>
   22bd8:	00ffffc4 	movi	r3,-1
   22bdc:	10c00526 	beq	r2,r3,22bf4 <_lseek_r+0x50>
   22be0:	dfc00217 	ldw	ra,8(sp)
   22be4:	dc400117 	ldw	r17,4(sp)
   22be8:	dc000017 	ldw	r16,0(sp)
   22bec:	dec00304 	addi	sp,sp,12
   22bf0:	f800283a 	ret
   22bf4:	80c00017 	ldw	r3,0(r16)
   22bf8:	183ff926 	beq	r3,zero,22be0 <__alt_data_end+0xfffe9be0>
   22bfc:	88c00015 	stw	r3,0(r17)
   22c00:	003ff706 	br	22be0 <__alt_data_end+0xfffe9be0>

00022c04 <__smakebuf_r>:
   22c04:	2880030b 	ldhu	r2,12(r5)
   22c08:	10c0008c 	andi	r3,r2,2
   22c0c:	1800411e 	bne	r3,zero,22d14 <__smakebuf_r+0x110>
   22c10:	deffec04 	addi	sp,sp,-80
   22c14:	dc000f15 	stw	r16,60(sp)
   22c18:	2821883a 	mov	r16,r5
   22c1c:	2940038f 	ldh	r5,14(r5)
   22c20:	dc401015 	stw	r17,64(sp)
   22c24:	dfc01315 	stw	ra,76(sp)
   22c28:	dcc01215 	stw	r19,72(sp)
   22c2c:	dc801115 	stw	r18,68(sp)
   22c30:	2023883a 	mov	r17,r4
   22c34:	28001c16 	blt	r5,zero,22ca8 <__smakebuf_r+0xa4>
   22c38:	d80d883a 	mov	r6,sp
   22c3c:	0022e200 	call	22e20 <_fstat_r>
   22c40:	10001816 	blt	r2,zero,22ca4 <__smakebuf_r+0xa0>
   22c44:	d8800117 	ldw	r2,4(sp)
   22c48:	00e00014 	movui	r3,32768
   22c4c:	10bc000c 	andi	r2,r2,61440
   22c50:	14c80020 	cmpeqi	r19,r2,8192
   22c54:	10c03726 	beq	r2,r3,22d34 <__smakebuf_r+0x130>
   22c58:	80c0030b 	ldhu	r3,12(r16)
   22c5c:	18c20014 	ori	r3,r3,2048
   22c60:	80c0030d 	sth	r3,12(r16)
   22c64:	00c80004 	movi	r3,8192
   22c68:	10c0521e 	bne	r2,r3,22db4 <__smakebuf_r+0x1b0>
   22c6c:	8140038f 	ldh	r5,14(r16)
   22c70:	8809883a 	mov	r4,r17
   22c74:	0022e7c0 	call	22e7c <_isatty_r>
   22c78:	10004c26 	beq	r2,zero,22dac <__smakebuf_r+0x1a8>
   22c7c:	8080030b 	ldhu	r2,12(r16)
   22c80:	80c010c4 	addi	r3,r16,67
   22c84:	80c00015 	stw	r3,0(r16)
   22c88:	10800054 	ori	r2,r2,1
   22c8c:	8080030d 	sth	r2,12(r16)
   22c90:	00800044 	movi	r2,1
   22c94:	80c00415 	stw	r3,16(r16)
   22c98:	80800515 	stw	r2,20(r16)
   22c9c:	04810004 	movi	r18,1024
   22ca0:	00000706 	br	22cc0 <__smakebuf_r+0xbc>
   22ca4:	8080030b 	ldhu	r2,12(r16)
   22ca8:	10c0200c 	andi	r3,r2,128
   22cac:	18001f1e 	bne	r3,zero,22d2c <__smakebuf_r+0x128>
   22cb0:	04810004 	movi	r18,1024
   22cb4:	10820014 	ori	r2,r2,2048
   22cb8:	8080030d 	sth	r2,12(r16)
   22cbc:	0027883a 	mov	r19,zero
   22cc0:	900b883a 	mov	r5,r18
   22cc4:	8809883a 	mov	r4,r17
   22cc8:	0020e0c0 	call	20e0c <_malloc_r>
   22ccc:	10002c26 	beq	r2,zero,22d80 <__smakebuf_r+0x17c>
   22cd0:	80c0030b 	ldhu	r3,12(r16)
   22cd4:	010000b4 	movhi	r4,2
   22cd8:	21010504 	addi	r4,r4,1044
   22cdc:	89000f15 	stw	r4,60(r17)
   22ce0:	18c02014 	ori	r3,r3,128
   22ce4:	80c0030d 	sth	r3,12(r16)
   22ce8:	80800015 	stw	r2,0(r16)
   22cec:	80800415 	stw	r2,16(r16)
   22cf0:	84800515 	stw	r18,20(r16)
   22cf4:	98001a1e 	bne	r19,zero,22d60 <__smakebuf_r+0x15c>
   22cf8:	dfc01317 	ldw	ra,76(sp)
   22cfc:	dcc01217 	ldw	r19,72(sp)
   22d00:	dc801117 	ldw	r18,68(sp)
   22d04:	dc401017 	ldw	r17,64(sp)
   22d08:	dc000f17 	ldw	r16,60(sp)
   22d0c:	dec01404 	addi	sp,sp,80
   22d10:	f800283a 	ret
   22d14:	288010c4 	addi	r2,r5,67
   22d18:	28800015 	stw	r2,0(r5)
   22d1c:	28800415 	stw	r2,16(r5)
   22d20:	00800044 	movi	r2,1
   22d24:	28800515 	stw	r2,20(r5)
   22d28:	f800283a 	ret
   22d2c:	04801004 	movi	r18,64
   22d30:	003fe006 	br	22cb4 <__alt_data_end+0xfffe9cb4>
   22d34:	81000a17 	ldw	r4,40(r16)
   22d38:	00c000b4 	movhi	r3,2
   22d3c:	18c85604 	addi	r3,r3,8536
   22d40:	20ffc51e 	bne	r4,r3,22c58 <__alt_data_end+0xfffe9c58>
   22d44:	8080030b 	ldhu	r2,12(r16)
   22d48:	04810004 	movi	r18,1024
   22d4c:	84801315 	stw	r18,76(r16)
   22d50:	1484b03a 	or	r2,r2,r18
   22d54:	8080030d 	sth	r2,12(r16)
   22d58:	0027883a 	mov	r19,zero
   22d5c:	003fd806 	br	22cc0 <__alt_data_end+0xfffe9cc0>
   22d60:	8140038f 	ldh	r5,14(r16)
   22d64:	8809883a 	mov	r4,r17
   22d68:	0022e7c0 	call	22e7c <_isatty_r>
   22d6c:	103fe226 	beq	r2,zero,22cf8 <__alt_data_end+0xfffe9cf8>
   22d70:	8080030b 	ldhu	r2,12(r16)
   22d74:	10800054 	ori	r2,r2,1
   22d78:	8080030d 	sth	r2,12(r16)
   22d7c:	003fde06 	br	22cf8 <__alt_data_end+0xfffe9cf8>
   22d80:	8080030b 	ldhu	r2,12(r16)
   22d84:	10c0800c 	andi	r3,r2,512
   22d88:	183fdb1e 	bne	r3,zero,22cf8 <__alt_data_end+0xfffe9cf8>
   22d8c:	10800094 	ori	r2,r2,2
   22d90:	80c010c4 	addi	r3,r16,67
   22d94:	8080030d 	sth	r2,12(r16)
   22d98:	00800044 	movi	r2,1
   22d9c:	80c00015 	stw	r3,0(r16)
   22da0:	80c00415 	stw	r3,16(r16)
   22da4:	80800515 	stw	r2,20(r16)
   22da8:	003fd306 	br	22cf8 <__alt_data_end+0xfffe9cf8>
   22dac:	04810004 	movi	r18,1024
   22db0:	003fc306 	br	22cc0 <__alt_data_end+0xfffe9cc0>
   22db4:	0027883a 	mov	r19,zero
   22db8:	04810004 	movi	r18,1024
   22dbc:	003fc006 	br	22cc0 <__alt_data_end+0xfffe9cc0>

00022dc0 <_read_r>:
   22dc0:	defffd04 	addi	sp,sp,-12
   22dc4:	2805883a 	mov	r2,r5
   22dc8:	dc000015 	stw	r16,0(sp)
   22dcc:	040000f4 	movhi	r16,3
   22dd0:	dc400115 	stw	r17,4(sp)
   22dd4:	300b883a 	mov	r5,r6
   22dd8:	842d6704 	addi	r16,r16,-19044
   22ddc:	2023883a 	mov	r17,r4
   22de0:	380d883a 	mov	r6,r7
   22de4:	1009883a 	mov	r4,r2
   22de8:	dfc00215 	stw	ra,8(sp)
   22dec:	80000015 	stw	zero,0(r16)
   22df0:	00236cc0 	call	236cc <read>
   22df4:	00ffffc4 	movi	r3,-1
   22df8:	10c00526 	beq	r2,r3,22e10 <_read_r+0x50>
   22dfc:	dfc00217 	ldw	ra,8(sp)
   22e00:	dc400117 	ldw	r17,4(sp)
   22e04:	dc000017 	ldw	r16,0(sp)
   22e08:	dec00304 	addi	sp,sp,12
   22e0c:	f800283a 	ret
   22e10:	80c00017 	ldw	r3,0(r16)
   22e14:	183ff926 	beq	r3,zero,22dfc <__alt_data_end+0xfffe9dfc>
   22e18:	88c00015 	stw	r3,0(r17)
   22e1c:	003ff706 	br	22dfc <__alt_data_end+0xfffe9dfc>

00022e20 <_fstat_r>:
   22e20:	defffd04 	addi	sp,sp,-12
   22e24:	2805883a 	mov	r2,r5
   22e28:	dc000015 	stw	r16,0(sp)
   22e2c:	040000f4 	movhi	r16,3
   22e30:	dc400115 	stw	r17,4(sp)
   22e34:	842d6704 	addi	r16,r16,-19044
   22e38:	2023883a 	mov	r17,r4
   22e3c:	300b883a 	mov	r5,r6
   22e40:	1009883a 	mov	r4,r2
   22e44:	dfc00215 	stw	ra,8(sp)
   22e48:	80000015 	stw	zero,0(r16)
   22e4c:	00232280 	call	23228 <fstat>
   22e50:	00ffffc4 	movi	r3,-1
   22e54:	10c00526 	beq	r2,r3,22e6c <_fstat_r+0x4c>
   22e58:	dfc00217 	ldw	ra,8(sp)
   22e5c:	dc400117 	ldw	r17,4(sp)
   22e60:	dc000017 	ldw	r16,0(sp)
   22e64:	dec00304 	addi	sp,sp,12
   22e68:	f800283a 	ret
   22e6c:	80c00017 	ldw	r3,0(r16)
   22e70:	183ff926 	beq	r3,zero,22e58 <__alt_data_end+0xfffe9e58>
   22e74:	88c00015 	stw	r3,0(r17)
   22e78:	003ff706 	br	22e58 <__alt_data_end+0xfffe9e58>

00022e7c <_isatty_r>:
   22e7c:	defffd04 	addi	sp,sp,-12
   22e80:	dc000015 	stw	r16,0(sp)
   22e84:	040000f4 	movhi	r16,3
   22e88:	dc400115 	stw	r17,4(sp)
   22e8c:	842d6704 	addi	r16,r16,-19044
   22e90:	2023883a 	mov	r17,r4
   22e94:	2809883a 	mov	r4,r5
   22e98:	dfc00215 	stw	ra,8(sp)
   22e9c:	80000015 	stw	zero,0(r16)
   22ea0:	002331c0 	call	2331c <isatty>
   22ea4:	00ffffc4 	movi	r3,-1
   22ea8:	10c00526 	beq	r2,r3,22ec0 <_isatty_r+0x44>
   22eac:	dfc00217 	ldw	ra,8(sp)
   22eb0:	dc400117 	ldw	r17,4(sp)
   22eb4:	dc000017 	ldw	r16,0(sp)
   22eb8:	dec00304 	addi	sp,sp,12
   22ebc:	f800283a 	ret
   22ec0:	80c00017 	ldw	r3,0(r16)
   22ec4:	183ff926 	beq	r3,zero,22eac <__alt_data_end+0xfffe9eac>
   22ec8:	88c00015 	stw	r3,0(r17)
   22ecc:	003ff706 	br	22eac <__alt_data_end+0xfffe9eac>

00022ed0 <__divsi3>:
   22ed0:	20001b16 	blt	r4,zero,22f40 <__divsi3+0x70>
   22ed4:	000f883a 	mov	r7,zero
   22ed8:	28001616 	blt	r5,zero,22f34 <__divsi3+0x64>
   22edc:	200d883a 	mov	r6,r4
   22ee0:	29001a2e 	bgeu	r5,r4,22f4c <__divsi3+0x7c>
   22ee4:	00800804 	movi	r2,32
   22ee8:	00c00044 	movi	r3,1
   22eec:	00000106 	br	22ef4 <__divsi3+0x24>
   22ef0:	10000d26 	beq	r2,zero,22f28 <__divsi3+0x58>
   22ef4:	294b883a 	add	r5,r5,r5
   22ef8:	10bfffc4 	addi	r2,r2,-1
   22efc:	18c7883a 	add	r3,r3,r3
   22f00:	293ffb36 	bltu	r5,r4,22ef0 <__alt_data_end+0xfffe9ef0>
   22f04:	0005883a 	mov	r2,zero
   22f08:	18000726 	beq	r3,zero,22f28 <__divsi3+0x58>
   22f0c:	0005883a 	mov	r2,zero
   22f10:	31400236 	bltu	r6,r5,22f1c <__divsi3+0x4c>
   22f14:	314dc83a 	sub	r6,r6,r5
   22f18:	10c4b03a 	or	r2,r2,r3
   22f1c:	1806d07a 	srli	r3,r3,1
   22f20:	280ad07a 	srli	r5,r5,1
   22f24:	183ffa1e 	bne	r3,zero,22f10 <__alt_data_end+0xfffe9f10>
   22f28:	38000126 	beq	r7,zero,22f30 <__divsi3+0x60>
   22f2c:	0085c83a 	sub	r2,zero,r2
   22f30:	f800283a 	ret
   22f34:	014bc83a 	sub	r5,zero,r5
   22f38:	39c0005c 	xori	r7,r7,1
   22f3c:	003fe706 	br	22edc <__alt_data_end+0xfffe9edc>
   22f40:	0109c83a 	sub	r4,zero,r4
   22f44:	01c00044 	movi	r7,1
   22f48:	003fe306 	br	22ed8 <__alt_data_end+0xfffe9ed8>
   22f4c:	00c00044 	movi	r3,1
   22f50:	003fee06 	br	22f0c <__alt_data_end+0xfffe9f0c>

00022f54 <__modsi3>:
   22f54:	20001716 	blt	r4,zero,22fb4 <__modsi3+0x60>
   22f58:	000f883a 	mov	r7,zero
   22f5c:	2005883a 	mov	r2,r4
   22f60:	28001216 	blt	r5,zero,22fac <__modsi3+0x58>
   22f64:	2900162e 	bgeu	r5,r4,22fc0 <__modsi3+0x6c>
   22f68:	01800804 	movi	r6,32
   22f6c:	00c00044 	movi	r3,1
   22f70:	00000106 	br	22f78 <__modsi3+0x24>
   22f74:	30000a26 	beq	r6,zero,22fa0 <__modsi3+0x4c>
   22f78:	294b883a 	add	r5,r5,r5
   22f7c:	31bfffc4 	addi	r6,r6,-1
   22f80:	18c7883a 	add	r3,r3,r3
   22f84:	293ffb36 	bltu	r5,r4,22f74 <__alt_data_end+0xfffe9f74>
   22f88:	18000526 	beq	r3,zero,22fa0 <__modsi3+0x4c>
   22f8c:	1806d07a 	srli	r3,r3,1
   22f90:	11400136 	bltu	r2,r5,22f98 <__modsi3+0x44>
   22f94:	1145c83a 	sub	r2,r2,r5
   22f98:	280ad07a 	srli	r5,r5,1
   22f9c:	183ffb1e 	bne	r3,zero,22f8c <__alt_data_end+0xfffe9f8c>
   22fa0:	38000126 	beq	r7,zero,22fa8 <__modsi3+0x54>
   22fa4:	0085c83a 	sub	r2,zero,r2
   22fa8:	f800283a 	ret
   22fac:	014bc83a 	sub	r5,zero,r5
   22fb0:	003fec06 	br	22f64 <__alt_data_end+0xfffe9f64>
   22fb4:	0109c83a 	sub	r4,zero,r4
   22fb8:	01c00044 	movi	r7,1
   22fbc:	003fe706 	br	22f5c <__alt_data_end+0xfffe9f5c>
   22fc0:	00c00044 	movi	r3,1
   22fc4:	003ff106 	br	22f8c <__alt_data_end+0xfffe9f8c>

00022fc8 <__udivsi3>:
   22fc8:	200d883a 	mov	r6,r4
   22fcc:	2900152e 	bgeu	r5,r4,23024 <__udivsi3+0x5c>
   22fd0:	28001416 	blt	r5,zero,23024 <__udivsi3+0x5c>
   22fd4:	00800804 	movi	r2,32
   22fd8:	00c00044 	movi	r3,1
   22fdc:	00000206 	br	22fe8 <__udivsi3+0x20>
   22fe0:	10000e26 	beq	r2,zero,2301c <__udivsi3+0x54>
   22fe4:	28000516 	blt	r5,zero,22ffc <__udivsi3+0x34>
   22fe8:	294b883a 	add	r5,r5,r5
   22fec:	10bfffc4 	addi	r2,r2,-1
   22ff0:	18c7883a 	add	r3,r3,r3
   22ff4:	293ffa36 	bltu	r5,r4,22fe0 <__alt_data_end+0xfffe9fe0>
   22ff8:	18000826 	beq	r3,zero,2301c <__udivsi3+0x54>
   22ffc:	0005883a 	mov	r2,zero
   23000:	31400236 	bltu	r6,r5,2300c <__udivsi3+0x44>
   23004:	314dc83a 	sub	r6,r6,r5
   23008:	10c4b03a 	or	r2,r2,r3
   2300c:	1806d07a 	srli	r3,r3,1
   23010:	280ad07a 	srli	r5,r5,1
   23014:	183ffa1e 	bne	r3,zero,23000 <__alt_data_end+0xfffea000>
   23018:	f800283a 	ret
   2301c:	0005883a 	mov	r2,zero
   23020:	f800283a 	ret
   23024:	00c00044 	movi	r3,1
   23028:	003ff406 	br	22ffc <__alt_data_end+0xfffe9ffc>

0002302c <__umodsi3>:
   2302c:	2005883a 	mov	r2,r4
   23030:	2900122e 	bgeu	r5,r4,2307c <__umodsi3+0x50>
   23034:	28001116 	blt	r5,zero,2307c <__umodsi3+0x50>
   23038:	01800804 	movi	r6,32
   2303c:	00c00044 	movi	r3,1
   23040:	00000206 	br	2304c <__umodsi3+0x20>
   23044:	30000c26 	beq	r6,zero,23078 <__umodsi3+0x4c>
   23048:	28000516 	blt	r5,zero,23060 <__umodsi3+0x34>
   2304c:	294b883a 	add	r5,r5,r5
   23050:	31bfffc4 	addi	r6,r6,-1
   23054:	18c7883a 	add	r3,r3,r3
   23058:	293ffa36 	bltu	r5,r4,23044 <__alt_data_end+0xfffea044>
   2305c:	18000626 	beq	r3,zero,23078 <__umodsi3+0x4c>
   23060:	1806d07a 	srli	r3,r3,1
   23064:	11400136 	bltu	r2,r5,2306c <__umodsi3+0x40>
   23068:	1145c83a 	sub	r2,r2,r5
   2306c:	280ad07a 	srli	r5,r5,1
   23070:	183ffb1e 	bne	r3,zero,23060 <__alt_data_end+0xfffea060>
   23074:	f800283a 	ret
   23078:	f800283a 	ret
   2307c:	00c00044 	movi	r3,1
   23080:	003ff706 	br	23060 <__alt_data_end+0xfffea060>

00023084 <__mulsi3>:
   23084:	0005883a 	mov	r2,zero
   23088:	20000726 	beq	r4,zero,230a8 <__mulsi3+0x24>
   2308c:	20c0004c 	andi	r3,r4,1
   23090:	2008d07a 	srli	r4,r4,1
   23094:	18000126 	beq	r3,zero,2309c <__mulsi3+0x18>
   23098:	1145883a 	add	r2,r2,r5
   2309c:	294b883a 	add	r5,r5,r5
   230a0:	203ffa1e 	bne	r4,zero,2308c <__alt_data_end+0xfffea08c>
   230a4:	f800283a 	ret
   230a8:	f800283a 	ret

000230ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   230ac:	defffe04 	addi	sp,sp,-8
   230b0:	dfc00115 	stw	ra,4(sp)
   230b4:	df000015 	stw	fp,0(sp)
   230b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   230bc:	d0a00917 	ldw	r2,-32732(gp)
   230c0:	10000326 	beq	r2,zero,230d0 <alt_get_errno+0x24>
   230c4:	d0a00917 	ldw	r2,-32732(gp)
   230c8:	103ee83a 	callr	r2
   230cc:	00000106 	br	230d4 <alt_get_errno+0x28>
   230d0:	d0a6cb04 	addi	r2,gp,-25812
}
   230d4:	e037883a 	mov	sp,fp
   230d8:	dfc00117 	ldw	ra,4(sp)
   230dc:	df000017 	ldw	fp,0(sp)
   230e0:	dec00204 	addi	sp,sp,8
   230e4:	f800283a 	ret

000230e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   230e8:	defffb04 	addi	sp,sp,-20
   230ec:	dfc00415 	stw	ra,16(sp)
   230f0:	df000315 	stw	fp,12(sp)
   230f4:	df000304 	addi	fp,sp,12
   230f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   230fc:	e0bfff17 	ldw	r2,-4(fp)
   23100:	10000816 	blt	r2,zero,23124 <close+0x3c>
   23104:	01400304 	movi	r5,12
   23108:	e13fff17 	ldw	r4,-4(fp)
   2310c:	00230840 	call	23084 <__mulsi3>
   23110:	1007883a 	mov	r3,r2
   23114:	008000f4 	movhi	r2,3
   23118:	10a20904 	addi	r2,r2,-30684
   2311c:	1885883a 	add	r2,r3,r2
   23120:	00000106 	br	23128 <close+0x40>
   23124:	0005883a 	mov	r2,zero
   23128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2312c:	e0bffd17 	ldw	r2,-12(fp)
   23130:	10001926 	beq	r2,zero,23198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23134:	e0bffd17 	ldw	r2,-12(fp)
   23138:	10800017 	ldw	r2,0(r2)
   2313c:	10800417 	ldw	r2,16(r2)
   23140:	10000626 	beq	r2,zero,2315c <close+0x74>
   23144:	e0bffd17 	ldw	r2,-12(fp)
   23148:	10800017 	ldw	r2,0(r2)
   2314c:	10800417 	ldw	r2,16(r2)
   23150:	e13ffd17 	ldw	r4,-12(fp)
   23154:	103ee83a 	callr	r2
   23158:	00000106 	br	23160 <close+0x78>
   2315c:	0005883a 	mov	r2,zero
   23160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23164:	e13fff17 	ldw	r4,-4(fp)
   23168:	00237d00 	call	237d0 <alt_release_fd>
    if (rval < 0)
   2316c:	e0bffe17 	ldw	r2,-8(fp)
   23170:	1000070e 	bge	r2,zero,23190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23174:	00230ac0 	call	230ac <alt_get_errno>
   23178:	1007883a 	mov	r3,r2
   2317c:	e0bffe17 	ldw	r2,-8(fp)
   23180:	0085c83a 	sub	r2,zero,r2
   23184:	18800015 	stw	r2,0(r3)
      return -1;
   23188:	00bfffc4 	movi	r2,-1
   2318c:	00000706 	br	231ac <close+0xc4>
    }
    return 0;
   23190:	0005883a 	mov	r2,zero
   23194:	00000506 	br	231ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23198:	00230ac0 	call	230ac <alt_get_errno>
   2319c:	1007883a 	mov	r3,r2
   231a0:	00801444 	movi	r2,81
   231a4:	18800015 	stw	r2,0(r3)
    return -1;
   231a8:	00bfffc4 	movi	r2,-1
  }
}
   231ac:	e037883a 	mov	sp,fp
   231b0:	dfc00117 	ldw	ra,4(sp)
   231b4:	df000017 	ldw	fp,0(sp)
   231b8:	dec00204 	addi	sp,sp,8
   231bc:	f800283a 	ret

000231c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   231c0:	defffc04 	addi	sp,sp,-16
   231c4:	df000315 	stw	fp,12(sp)
   231c8:	df000304 	addi	fp,sp,12
   231cc:	e13ffd15 	stw	r4,-12(fp)
   231d0:	e17ffe15 	stw	r5,-8(fp)
   231d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   231d8:	e0bfff17 	ldw	r2,-4(fp)
}
   231dc:	e037883a 	mov	sp,fp
   231e0:	df000017 	ldw	fp,0(sp)
   231e4:	dec00104 	addi	sp,sp,4
   231e8:	f800283a 	ret

000231ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231ec:	defffe04 	addi	sp,sp,-8
   231f0:	dfc00115 	stw	ra,4(sp)
   231f4:	df000015 	stw	fp,0(sp)
   231f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231fc:	d0a00917 	ldw	r2,-32732(gp)
   23200:	10000326 	beq	r2,zero,23210 <alt_get_errno+0x24>
   23204:	d0a00917 	ldw	r2,-32732(gp)
   23208:	103ee83a 	callr	r2
   2320c:	00000106 	br	23214 <alt_get_errno+0x28>
   23210:	d0a6cb04 	addi	r2,gp,-25812
}
   23214:	e037883a 	mov	sp,fp
   23218:	dfc00117 	ldw	ra,4(sp)
   2321c:	df000017 	ldw	fp,0(sp)
   23220:	dec00204 	addi	sp,sp,8
   23224:	f800283a 	ret

00023228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23228:	defffb04 	addi	sp,sp,-20
   2322c:	dfc00415 	stw	ra,16(sp)
   23230:	df000315 	stw	fp,12(sp)
   23234:	df000304 	addi	fp,sp,12
   23238:	e13ffe15 	stw	r4,-8(fp)
   2323c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23240:	e0bffe17 	ldw	r2,-8(fp)
   23244:	10000816 	blt	r2,zero,23268 <fstat+0x40>
   23248:	01400304 	movi	r5,12
   2324c:	e13ffe17 	ldw	r4,-8(fp)
   23250:	00230840 	call	23084 <__mulsi3>
   23254:	1007883a 	mov	r3,r2
   23258:	008000f4 	movhi	r2,3
   2325c:	10a20904 	addi	r2,r2,-30684
   23260:	1885883a 	add	r2,r3,r2
   23264:	00000106 	br	2326c <fstat+0x44>
   23268:	0005883a 	mov	r2,zero
   2326c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23270:	e0bffd17 	ldw	r2,-12(fp)
   23274:	10001026 	beq	r2,zero,232b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23278:	e0bffd17 	ldw	r2,-12(fp)
   2327c:	10800017 	ldw	r2,0(r2)
   23280:	10800817 	ldw	r2,32(r2)
   23284:	10000726 	beq	r2,zero,232a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23288:	e0bffd17 	ldw	r2,-12(fp)
   2328c:	10800017 	ldw	r2,0(r2)
   23290:	10800817 	ldw	r2,32(r2)
   23294:	e17fff17 	ldw	r5,-4(fp)
   23298:	e13ffd17 	ldw	r4,-12(fp)
   2329c:	103ee83a 	callr	r2
   232a0:	00000a06 	br	232cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   232a4:	e0bfff17 	ldw	r2,-4(fp)
   232a8:	00c80004 	movi	r3,8192
   232ac:	10c00115 	stw	r3,4(r2)
      return 0;
   232b0:	0005883a 	mov	r2,zero
   232b4:	00000506 	br	232cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   232b8:	00231ec0 	call	231ec <alt_get_errno>
   232bc:	1007883a 	mov	r3,r2
   232c0:	00801444 	movi	r2,81
   232c4:	18800015 	stw	r2,0(r3)
    return -1;
   232c8:	00bfffc4 	movi	r2,-1
  }
}
   232cc:	e037883a 	mov	sp,fp
   232d0:	dfc00117 	ldw	ra,4(sp)
   232d4:	df000017 	ldw	fp,0(sp)
   232d8:	dec00204 	addi	sp,sp,8
   232dc:	f800283a 	ret

000232e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232e0:	defffe04 	addi	sp,sp,-8
   232e4:	dfc00115 	stw	ra,4(sp)
   232e8:	df000015 	stw	fp,0(sp)
   232ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232f0:	d0a00917 	ldw	r2,-32732(gp)
   232f4:	10000326 	beq	r2,zero,23304 <alt_get_errno+0x24>
   232f8:	d0a00917 	ldw	r2,-32732(gp)
   232fc:	103ee83a 	callr	r2
   23300:	00000106 	br	23308 <alt_get_errno+0x28>
   23304:	d0a6cb04 	addi	r2,gp,-25812
}
   23308:	e037883a 	mov	sp,fp
   2330c:	dfc00117 	ldw	ra,4(sp)
   23310:	df000017 	ldw	fp,0(sp)
   23314:	dec00204 	addi	sp,sp,8
   23318:	f800283a 	ret

0002331c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2331c:	deffed04 	addi	sp,sp,-76
   23320:	dfc01215 	stw	ra,72(sp)
   23324:	df001115 	stw	fp,68(sp)
   23328:	df001104 	addi	fp,sp,68
   2332c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23330:	e0bfff17 	ldw	r2,-4(fp)
   23334:	10000816 	blt	r2,zero,23358 <isatty+0x3c>
   23338:	01400304 	movi	r5,12
   2333c:	e13fff17 	ldw	r4,-4(fp)
   23340:	00230840 	call	23084 <__mulsi3>
   23344:	1007883a 	mov	r3,r2
   23348:	008000f4 	movhi	r2,3
   2334c:	10a20904 	addi	r2,r2,-30684
   23350:	1885883a 	add	r2,r3,r2
   23354:	00000106 	br	2335c <isatty+0x40>
   23358:	0005883a 	mov	r2,zero
   2335c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23360:	e0bfef17 	ldw	r2,-68(fp)
   23364:	10000e26 	beq	r2,zero,233a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23368:	e0bfef17 	ldw	r2,-68(fp)
   2336c:	10800017 	ldw	r2,0(r2)
   23370:	10800817 	ldw	r2,32(r2)
   23374:	1000021e 	bne	r2,zero,23380 <isatty+0x64>
    {
      return 1;
   23378:	00800044 	movi	r2,1
   2337c:	00000d06 	br	233b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23380:	e0bff004 	addi	r2,fp,-64
   23384:	100b883a 	mov	r5,r2
   23388:	e13fff17 	ldw	r4,-4(fp)
   2338c:	00232280 	call	23228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23390:	e0bff117 	ldw	r2,-60(fp)
   23394:	10880020 	cmpeqi	r2,r2,8192
   23398:	10803fcc 	andi	r2,r2,255
   2339c:	00000506 	br	233b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   233a0:	00232e00 	call	232e0 <alt_get_errno>
   233a4:	1007883a 	mov	r3,r2
   233a8:	00801444 	movi	r2,81
   233ac:	18800015 	stw	r2,0(r3)
    return 0;
   233b0:	0005883a 	mov	r2,zero
  }
}
   233b4:	e037883a 	mov	sp,fp
   233b8:	dfc00117 	ldw	ra,4(sp)
   233bc:	df000017 	ldw	fp,0(sp)
   233c0:	dec00204 	addi	sp,sp,8
   233c4:	f800283a 	ret

000233c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   233c8:	defffc04 	addi	sp,sp,-16
   233cc:	df000315 	stw	fp,12(sp)
   233d0:	df000304 	addi	fp,sp,12
   233d4:	e13ffd15 	stw	r4,-12(fp)
   233d8:	e17ffe15 	stw	r5,-8(fp)
   233dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   233e0:	e0fffe17 	ldw	r3,-8(fp)
   233e4:	e0bffd17 	ldw	r2,-12(fp)
   233e8:	18800c26 	beq	r3,r2,2341c <alt_load_section+0x54>
  {
    while( to != end )
   233ec:	00000806 	br	23410 <alt_load_section+0x48>
    {
      *to++ = *from++;
   233f0:	e0bffe17 	ldw	r2,-8(fp)
   233f4:	10c00104 	addi	r3,r2,4
   233f8:	e0fffe15 	stw	r3,-8(fp)
   233fc:	e0fffd17 	ldw	r3,-12(fp)
   23400:	19000104 	addi	r4,r3,4
   23404:	e13ffd15 	stw	r4,-12(fp)
   23408:	18c00017 	ldw	r3,0(r3)
   2340c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23410:	e0fffe17 	ldw	r3,-8(fp)
   23414:	e0bfff17 	ldw	r2,-4(fp)
   23418:	18bff51e 	bne	r3,r2,233f0 <__alt_data_end+0xfffea3f0>
    {
      *to++ = *from++;
    }
  }
}
   2341c:	0001883a 	nop
   23420:	e037883a 	mov	sp,fp
   23424:	df000017 	ldw	fp,0(sp)
   23428:	dec00104 	addi	sp,sp,4
   2342c:	f800283a 	ret

00023430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23430:	defffe04 	addi	sp,sp,-8
   23434:	dfc00115 	stw	ra,4(sp)
   23438:	df000015 	stw	fp,0(sp)
   2343c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23440:	018000f4 	movhi	r6,3
   23444:	31a6ac04 	addi	r6,r6,-25936
   23448:	014000b4 	movhi	r5,2
   2344c:	295ff404 	addi	r5,r5,32720
   23450:	010000f4 	movhi	r4,3
   23454:	2126ac04 	addi	r4,r4,-25936
   23458:	00233c80 	call	233c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2345c:	018000b4 	movhi	r6,2
   23460:	31808c04 	addi	r6,r6,560
   23464:	014000b4 	movhi	r5,2
   23468:	29400804 	addi	r5,r5,32
   2346c:	010000b4 	movhi	r4,2
   23470:	21000804 	addi	r4,r4,32
   23474:	00233c80 	call	233c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23478:	018000b4 	movhi	r6,2
   2347c:	319ff404 	addi	r6,r6,32720
   23480:	014000b4 	movhi	r5,2
   23484:	295f5d04 	addi	r5,r5,32116
   23488:	010000b4 	movhi	r4,2
   2348c:	211f5d04 	addi	r4,r4,32116
   23490:	00233c80 	call	233c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23494:	00267940 	call	26794 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23498:	00269e40 	call	269e4 <alt_icache_flush_all>
}
   2349c:	0001883a 	nop
   234a0:	e037883a 	mov	sp,fp
   234a4:	dfc00117 	ldw	ra,4(sp)
   234a8:	df000017 	ldw	fp,0(sp)
   234ac:	dec00204 	addi	sp,sp,8
   234b0:	f800283a 	ret

000234b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   234b4:	defffe04 	addi	sp,sp,-8
   234b8:	dfc00115 	stw	ra,4(sp)
   234bc:	df000015 	stw	fp,0(sp)
   234c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   234c4:	d0a00917 	ldw	r2,-32732(gp)
   234c8:	10000326 	beq	r2,zero,234d8 <alt_get_errno+0x24>
   234cc:	d0a00917 	ldw	r2,-32732(gp)
   234d0:	103ee83a 	callr	r2
   234d4:	00000106 	br	234dc <alt_get_errno+0x28>
   234d8:	d0a6cb04 	addi	r2,gp,-25812
}
   234dc:	e037883a 	mov	sp,fp
   234e0:	dfc00117 	ldw	ra,4(sp)
   234e4:	df000017 	ldw	fp,0(sp)
   234e8:	dec00204 	addi	sp,sp,8
   234ec:	f800283a 	ret

000234f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   234f0:	defff904 	addi	sp,sp,-28
   234f4:	dfc00615 	stw	ra,24(sp)
   234f8:	df000515 	stw	fp,20(sp)
   234fc:	df000504 	addi	fp,sp,20
   23500:	e13ffd15 	stw	r4,-12(fp)
   23504:	e17ffe15 	stw	r5,-8(fp)
   23508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2350c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23510:	e0bffd17 	ldw	r2,-12(fp)
   23514:	10000816 	blt	r2,zero,23538 <lseek+0x48>
   23518:	01400304 	movi	r5,12
   2351c:	e13ffd17 	ldw	r4,-12(fp)
   23520:	00230840 	call	23084 <__mulsi3>
   23524:	1007883a 	mov	r3,r2
   23528:	008000f4 	movhi	r2,3
   2352c:	10a20904 	addi	r2,r2,-30684
   23530:	1885883a 	add	r2,r3,r2
   23534:	00000106 	br	2353c <lseek+0x4c>
   23538:	0005883a 	mov	r2,zero
   2353c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23540:	e0bffc17 	ldw	r2,-16(fp)
   23544:	10001026 	beq	r2,zero,23588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23548:	e0bffc17 	ldw	r2,-16(fp)
   2354c:	10800017 	ldw	r2,0(r2)
   23550:	10800717 	ldw	r2,28(r2)
   23554:	10000926 	beq	r2,zero,2357c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23558:	e0bffc17 	ldw	r2,-16(fp)
   2355c:	10800017 	ldw	r2,0(r2)
   23560:	10800717 	ldw	r2,28(r2)
   23564:	e1bfff17 	ldw	r6,-4(fp)
   23568:	e17ffe17 	ldw	r5,-8(fp)
   2356c:	e13ffc17 	ldw	r4,-16(fp)
   23570:	103ee83a 	callr	r2
   23574:	e0bffb15 	stw	r2,-20(fp)
   23578:	00000506 	br	23590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2357c:	00bfde84 	movi	r2,-134
   23580:	e0bffb15 	stw	r2,-20(fp)
   23584:	00000206 	br	23590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23588:	00bfebc4 	movi	r2,-81
   2358c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23590:	e0bffb17 	ldw	r2,-20(fp)
   23594:	1000070e 	bge	r2,zero,235b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23598:	00234b40 	call	234b4 <alt_get_errno>
   2359c:	1007883a 	mov	r3,r2
   235a0:	e0bffb17 	ldw	r2,-20(fp)
   235a4:	0085c83a 	sub	r2,zero,r2
   235a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   235ac:	00bfffc4 	movi	r2,-1
   235b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   235b4:	e0bffb17 	ldw	r2,-20(fp)
}
   235b8:	e037883a 	mov	sp,fp
   235bc:	dfc00117 	ldw	ra,4(sp)
   235c0:	df000017 	ldw	fp,0(sp)
   235c4:	dec00204 	addi	sp,sp,8
   235c8:	f800283a 	ret

000235cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   235cc:	defffd04 	addi	sp,sp,-12
   235d0:	dfc00215 	stw	ra,8(sp)
   235d4:	df000115 	stw	fp,4(sp)
   235d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   235dc:	0009883a 	mov	r4,zero
   235e0:	0023a740 	call	23a74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   235e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   235e8:	0023aac0 	call	23aac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   235ec:	018000b4 	movhi	r6,2
   235f0:	319f6704 	addi	r6,r6,32156
   235f4:	014000b4 	movhi	r5,2
   235f8:	295f6704 	addi	r5,r5,32156
   235fc:	010000b4 	movhi	r4,2
   23600:	211f6704 	addi	r4,r4,32156
   23604:	0026d880 	call	26d88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23608:	00268940 	call	26894 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2360c:	010000b4 	movhi	r4,2
   23610:	211a3d04 	addi	r4,r4,26868
   23614:	00277200 	call	27720 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23618:	d0a6cc17 	ldw	r2,-25808(gp)
   2361c:	d0e6cd17 	ldw	r3,-25804(gp)
   23620:	d126ce17 	ldw	r4,-25800(gp)
   23624:	200d883a 	mov	r6,r4
   23628:	180b883a 	mov	r5,r3
   2362c:	1009883a 	mov	r4,r2
   23630:	002026c0 	call	2026c <main>
   23634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23638:	01000044 	movi	r4,1
   2363c:	00230e80 	call	230e8 <close>
  exit (result);
   23640:	e13fff17 	ldw	r4,-4(fp)
   23644:	00277340 	call	27734 <exit>

00023648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23648:	defffe04 	addi	sp,sp,-8
   2364c:	df000115 	stw	fp,4(sp)
   23650:	df000104 	addi	fp,sp,4
   23654:	e13fff15 	stw	r4,-4(fp)
}
   23658:	0001883a 	nop
   2365c:	e037883a 	mov	sp,fp
   23660:	df000017 	ldw	fp,0(sp)
   23664:	dec00104 	addi	sp,sp,4
   23668:	f800283a 	ret

0002366c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2366c:	defffe04 	addi	sp,sp,-8
   23670:	df000115 	stw	fp,4(sp)
   23674:	df000104 	addi	fp,sp,4
   23678:	e13fff15 	stw	r4,-4(fp)
}
   2367c:	0001883a 	nop
   23680:	e037883a 	mov	sp,fp
   23684:	df000017 	ldw	fp,0(sp)
   23688:	dec00104 	addi	sp,sp,4
   2368c:	f800283a 	ret

00023690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23690:	defffe04 	addi	sp,sp,-8
   23694:	dfc00115 	stw	ra,4(sp)
   23698:	df000015 	stw	fp,0(sp)
   2369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   236a0:	d0a00917 	ldw	r2,-32732(gp)
   236a4:	10000326 	beq	r2,zero,236b4 <alt_get_errno+0x24>
   236a8:	d0a00917 	ldw	r2,-32732(gp)
   236ac:	103ee83a 	callr	r2
   236b0:	00000106 	br	236b8 <alt_get_errno+0x28>
   236b4:	d0a6cb04 	addi	r2,gp,-25812
}
   236b8:	e037883a 	mov	sp,fp
   236bc:	dfc00117 	ldw	ra,4(sp)
   236c0:	df000017 	ldw	fp,0(sp)
   236c4:	dec00204 	addi	sp,sp,8
   236c8:	f800283a 	ret

000236cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   236cc:	defff904 	addi	sp,sp,-28
   236d0:	dfc00615 	stw	ra,24(sp)
   236d4:	df000515 	stw	fp,20(sp)
   236d8:	df000504 	addi	fp,sp,20
   236dc:	e13ffd15 	stw	r4,-12(fp)
   236e0:	e17ffe15 	stw	r5,-8(fp)
   236e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   236e8:	e0bffd17 	ldw	r2,-12(fp)
   236ec:	10000816 	blt	r2,zero,23710 <read+0x44>
   236f0:	01400304 	movi	r5,12
   236f4:	e13ffd17 	ldw	r4,-12(fp)
   236f8:	00230840 	call	23084 <__mulsi3>
   236fc:	1007883a 	mov	r3,r2
   23700:	008000f4 	movhi	r2,3
   23704:	10a20904 	addi	r2,r2,-30684
   23708:	1885883a 	add	r2,r3,r2
   2370c:	00000106 	br	23714 <read+0x48>
   23710:	0005883a 	mov	r2,zero
   23714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23718:	e0bffb17 	ldw	r2,-20(fp)
   2371c:	10002226 	beq	r2,zero,237a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23720:	e0bffb17 	ldw	r2,-20(fp)
   23724:	10800217 	ldw	r2,8(r2)
   23728:	108000cc 	andi	r2,r2,3
   2372c:	10800060 	cmpeqi	r2,r2,1
   23730:	1000181e 	bne	r2,zero,23794 <read+0xc8>
        (fd->dev->read))
   23734:	e0bffb17 	ldw	r2,-20(fp)
   23738:	10800017 	ldw	r2,0(r2)
   2373c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23740:	10001426 	beq	r2,zero,23794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23744:	e0bffb17 	ldw	r2,-20(fp)
   23748:	10800017 	ldw	r2,0(r2)
   2374c:	10800517 	ldw	r2,20(r2)
   23750:	e0ffff17 	ldw	r3,-4(fp)
   23754:	180d883a 	mov	r6,r3
   23758:	e17ffe17 	ldw	r5,-8(fp)
   2375c:	e13ffb17 	ldw	r4,-20(fp)
   23760:	103ee83a 	callr	r2
   23764:	e0bffc15 	stw	r2,-16(fp)
   23768:	e0bffc17 	ldw	r2,-16(fp)
   2376c:	1000070e 	bge	r2,zero,2378c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23770:	00236900 	call	23690 <alt_get_errno>
   23774:	1007883a 	mov	r3,r2
   23778:	e0bffc17 	ldw	r2,-16(fp)
   2377c:	0085c83a 	sub	r2,zero,r2
   23780:	18800015 	stw	r2,0(r3)
          return -1;
   23784:	00bfffc4 	movi	r2,-1
   23788:	00000c06 	br	237bc <read+0xf0>
        }
        return rval;
   2378c:	e0bffc17 	ldw	r2,-16(fp)
   23790:	00000a06 	br	237bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23794:	00236900 	call	23690 <alt_get_errno>
   23798:	1007883a 	mov	r3,r2
   2379c:	00800344 	movi	r2,13
   237a0:	18800015 	stw	r2,0(r3)
   237a4:	00000406 	br	237b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   237a8:	00236900 	call	23690 <alt_get_errno>
   237ac:	1007883a 	mov	r3,r2
   237b0:	00801444 	movi	r2,81
   237b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   237b8:	00bfffc4 	movi	r2,-1
}
   237bc:	e037883a 	mov	sp,fp
   237c0:	dfc00117 	ldw	ra,4(sp)
   237c4:	df000017 	ldw	fp,0(sp)
   237c8:	dec00204 	addi	sp,sp,8
   237cc:	f800283a 	ret

000237d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   237d0:	defffc04 	addi	sp,sp,-16
   237d4:	dfc00315 	stw	ra,12(sp)
   237d8:	df000215 	stw	fp,8(sp)
   237dc:	dc000115 	stw	r16,4(sp)
   237e0:	df000204 	addi	fp,sp,8
   237e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   237e8:	e0bffe17 	ldw	r2,-8(fp)
   237ec:	108000d0 	cmplti	r2,r2,3
   237f0:	1000111e 	bne	r2,zero,23838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   237f4:	040000f4 	movhi	r16,3
   237f8:	84220904 	addi	r16,r16,-30684
   237fc:	e0bffe17 	ldw	r2,-8(fp)
   23800:	01400304 	movi	r5,12
   23804:	1009883a 	mov	r4,r2
   23808:	00230840 	call	23084 <__mulsi3>
   2380c:	8085883a 	add	r2,r16,r2
   23810:	10800204 	addi	r2,r2,8
   23814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23818:	040000f4 	movhi	r16,3
   2381c:	84220904 	addi	r16,r16,-30684
   23820:	e0bffe17 	ldw	r2,-8(fp)
   23824:	01400304 	movi	r5,12
   23828:	1009883a 	mov	r4,r2
   2382c:	00230840 	call	23084 <__mulsi3>
   23830:	8085883a 	add	r2,r16,r2
   23834:	10000015 	stw	zero,0(r2)
  }
}
   23838:	0001883a 	nop
   2383c:	e6ffff04 	addi	sp,fp,-4
   23840:	dfc00217 	ldw	ra,8(sp)
   23844:	df000117 	ldw	fp,4(sp)
   23848:	dc000017 	ldw	r16,0(sp)
   2384c:	dec00304 	addi	sp,sp,12
   23850:	f800283a 	ret

00023854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23854:	defff904 	addi	sp,sp,-28
   23858:	df000615 	stw	fp,24(sp)
   2385c:	df000604 	addi	fp,sp,24
   23860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23864:	0005303a 	rdctl	r2,status
   23868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2386c:	e0fffe17 	ldw	r3,-8(fp)
   23870:	00bfff84 	movi	r2,-2
   23874:	1884703a 	and	r2,r3,r2
   23878:	1001703a 	wrctl	status,r2
  
  return context;
   2387c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23884:	d0a00a17 	ldw	r2,-32728(gp)
   23888:	10c000c4 	addi	r3,r2,3
   2388c:	00bfff04 	movi	r2,-4
   23890:	1884703a 	and	r2,r3,r2
   23894:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23898:	d0e00a17 	ldw	r3,-32728(gp)
   2389c:	e0bfff17 	ldw	r2,-4(fp)
   238a0:	1887883a 	add	r3,r3,r2
   238a4:	00800134 	movhi	r2,4
   238a8:	10a40004 	addi	r2,r2,-28672
   238ac:	10c0062e 	bgeu	r2,r3,238c8 <sbrk+0x74>
   238b0:	e0bffb17 	ldw	r2,-20(fp)
   238b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   238b8:	e0bffa17 	ldw	r2,-24(fp)
   238bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   238c0:	00bfffc4 	movi	r2,-1
   238c4:	00000b06 	br	238f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   238c8:	d0a00a17 	ldw	r2,-32728(gp)
   238cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   238d0:	d0e00a17 	ldw	r3,-32728(gp)
   238d4:	e0bfff17 	ldw	r2,-4(fp)
   238d8:	1885883a 	add	r2,r3,r2
   238dc:	d0a00a15 	stw	r2,-32728(gp)
   238e0:	e0bffb17 	ldw	r2,-20(fp)
   238e4:	e0bffc15 	stw	r2,-16(fp)
   238e8:	e0bffc17 	ldw	r2,-16(fp)
   238ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   238f0:	e0bffd17 	ldw	r2,-12(fp)
} 
   238f4:	e037883a 	mov	sp,fp
   238f8:	df000017 	ldw	fp,0(sp)
   238fc:	dec00104 	addi	sp,sp,4
   23900:	f800283a 	ret

00023904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23904:	defffe04 	addi	sp,sp,-8
   23908:	dfc00115 	stw	ra,4(sp)
   2390c:	df000015 	stw	fp,0(sp)
   23910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23914:	d0a00917 	ldw	r2,-32732(gp)
   23918:	10000326 	beq	r2,zero,23928 <alt_get_errno+0x24>
   2391c:	d0a00917 	ldw	r2,-32732(gp)
   23920:	103ee83a 	callr	r2
   23924:	00000106 	br	2392c <alt_get_errno+0x28>
   23928:	d0a6cb04 	addi	r2,gp,-25812
}
   2392c:	e037883a 	mov	sp,fp
   23930:	dfc00117 	ldw	ra,4(sp)
   23934:	df000017 	ldw	fp,0(sp)
   23938:	dec00204 	addi	sp,sp,8
   2393c:	f800283a 	ret

00023940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23940:	defff904 	addi	sp,sp,-28
   23944:	dfc00615 	stw	ra,24(sp)
   23948:	df000515 	stw	fp,20(sp)
   2394c:	df000504 	addi	fp,sp,20
   23950:	e13ffd15 	stw	r4,-12(fp)
   23954:	e17ffe15 	stw	r5,-8(fp)
   23958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2395c:	e0bffd17 	ldw	r2,-12(fp)
   23960:	10000816 	blt	r2,zero,23984 <write+0x44>
   23964:	01400304 	movi	r5,12
   23968:	e13ffd17 	ldw	r4,-12(fp)
   2396c:	00230840 	call	23084 <__mulsi3>
   23970:	1007883a 	mov	r3,r2
   23974:	008000f4 	movhi	r2,3
   23978:	10a20904 	addi	r2,r2,-30684
   2397c:	1885883a 	add	r2,r3,r2
   23980:	00000106 	br	23988 <write+0x48>
   23984:	0005883a 	mov	r2,zero
   23988:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2398c:	e0bffb17 	ldw	r2,-20(fp)
   23990:	10002126 	beq	r2,zero,23a18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23994:	e0bffb17 	ldw	r2,-20(fp)
   23998:	10800217 	ldw	r2,8(r2)
   2399c:	108000cc 	andi	r2,r2,3
   239a0:	10001826 	beq	r2,zero,23a04 <write+0xc4>
   239a4:	e0bffb17 	ldw	r2,-20(fp)
   239a8:	10800017 	ldw	r2,0(r2)
   239ac:	10800617 	ldw	r2,24(r2)
   239b0:	10001426 	beq	r2,zero,23a04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   239b4:	e0bffb17 	ldw	r2,-20(fp)
   239b8:	10800017 	ldw	r2,0(r2)
   239bc:	10800617 	ldw	r2,24(r2)
   239c0:	e0ffff17 	ldw	r3,-4(fp)
   239c4:	180d883a 	mov	r6,r3
   239c8:	e17ffe17 	ldw	r5,-8(fp)
   239cc:	e13ffb17 	ldw	r4,-20(fp)
   239d0:	103ee83a 	callr	r2
   239d4:	e0bffc15 	stw	r2,-16(fp)
   239d8:	e0bffc17 	ldw	r2,-16(fp)
   239dc:	1000070e 	bge	r2,zero,239fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   239e0:	00239040 	call	23904 <alt_get_errno>
   239e4:	1007883a 	mov	r3,r2
   239e8:	e0bffc17 	ldw	r2,-16(fp)
   239ec:	0085c83a 	sub	r2,zero,r2
   239f0:	18800015 	stw	r2,0(r3)
        return -1;
   239f4:	00bfffc4 	movi	r2,-1
   239f8:	00000c06 	br	23a2c <write+0xec>
      }
      return rval;
   239fc:	e0bffc17 	ldw	r2,-16(fp)
   23a00:	00000a06 	br	23a2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23a04:	00239040 	call	23904 <alt_get_errno>
   23a08:	1007883a 	mov	r3,r2
   23a0c:	00800344 	movi	r2,13
   23a10:	18800015 	stw	r2,0(r3)
   23a14:	00000406 	br	23a28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23a18:	00239040 	call	23904 <alt_get_errno>
   23a1c:	1007883a 	mov	r3,r2
   23a20:	00801444 	movi	r2,81
   23a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a28:	00bfffc4 	movi	r2,-1
}
   23a2c:	e037883a 	mov	sp,fp
   23a30:	dfc00117 	ldw	ra,4(sp)
   23a34:	df000017 	ldw	fp,0(sp)
   23a38:	dec00204 	addi	sp,sp,8
   23a3c:	f800283a 	ret

00023a40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23a40:	defffd04 	addi	sp,sp,-12
   23a44:	dfc00215 	stw	ra,8(sp)
   23a48:	df000115 	stw	fp,4(sp)
   23a4c:	df000104 	addi	fp,sp,4
   23a50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23a54:	d1600604 	addi	r5,gp,-32744
   23a58:	e13fff17 	ldw	r4,-4(fp)
   23a5c:	00267f00 	call	267f0 <alt_dev_llist_insert>
}
   23a60:	e037883a 	mov	sp,fp
   23a64:	dfc00117 	ldw	ra,4(sp)
   23a68:	df000017 	ldw	fp,0(sp)
   23a6c:	dec00204 	addi	sp,sp,8
   23a70:	f800283a 	ret

00023a74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23a74:	defffd04 	addi	sp,sp,-12
   23a78:	dfc00215 	stw	ra,8(sp)
   23a7c:	df000115 	stw	fp,4(sp)
   23a80:	df000104 	addi	fp,sp,4
   23a84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
   23a88:	00274940 	call	27494 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23a8c:	00800044 	movi	r2,1
   23a90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23a94:	0001883a 	nop
   23a98:	e037883a 	mov	sp,fp
   23a9c:	dfc00117 	ldw	ra,4(sp)
   23aa0:	df000017 	ldw	fp,0(sp)
   23aa4:	dec00204 	addi	sp,sp,8
   23aa8:	f800283a 	ret

00023aac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23aac:	defffe04 	addi	sp,sp,-8
   23ab0:	dfc00115 	stw	ra,4(sp)
   23ab4:	df000015 	stw	fp,0(sp)
   23ab8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_CLK_TIMER, nios_clk_timer);
   23abc:	01c0fa04 	movi	r7,1000
   23ac0:	01800044 	movi	r6,1
   23ac4:	000b883a 	mov	r5,zero
   23ac8:	01000134 	movhi	r4,4
   23acc:	21040004 	addi	r4,r4,4096
   23ad0:	00246180 	call	24618 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23ad4:	01800084 	movi	r6,2
   23ad8:	000b883a 	mov	r5,zero
   23adc:	010000f4 	movhi	r4,3
   23ae0:	21227604 	addi	r4,r4,-30248
   23ae4:	0023c9c0 	call	23c9c <altera_avalon_jtag_uart_init>
   23ae8:	010000f4 	movhi	r4,3
   23aec:	21226c04 	addi	r4,r4,-30288
   23af0:	0023a400 	call	23a40 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( MSGDMA, msgdma);
   23af4:	008000f4 	movhi	r2,3
   23af8:	10a68404 	addi	r2,r2,-26096
   23afc:	10c00717 	ldw	r3,28(r2)
   23b00:	008000f4 	movhi	r2,3
   23b04:	10a68404 	addi	r2,r2,-26096
   23b08:	10800817 	ldw	r2,32(r2)
   23b0c:	100d883a 	mov	r6,r2
   23b10:	180b883a 	mov	r5,r3
   23b14:	010000f4 	movhi	r4,3
   23b18:	21268404 	addi	r4,r4,-26096
   23b1c:	00262600 	call	26260 <alt_msgdma_init>
}
   23b20:	0001883a 	nop
   23b24:	e037883a 	mov	sp,fp
   23b28:	dfc00117 	ldw	ra,4(sp)
   23b2c:	df000017 	ldw	fp,0(sp)
   23b30:	dec00204 	addi	sp,sp,8
   23b34:	f800283a 	ret

00023b38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23b38:	defffa04 	addi	sp,sp,-24
   23b3c:	dfc00515 	stw	ra,20(sp)
   23b40:	df000415 	stw	fp,16(sp)
   23b44:	df000404 	addi	fp,sp,16
   23b48:	e13ffd15 	stw	r4,-12(fp)
   23b4c:	e17ffe15 	stw	r5,-8(fp)
   23b50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23b54:	e0bffd17 	ldw	r2,-12(fp)
   23b58:	10800017 	ldw	r2,0(r2)
   23b5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23b60:	e0bffc17 	ldw	r2,-16(fp)
   23b64:	10c00a04 	addi	r3,r2,40
   23b68:	e0bffd17 	ldw	r2,-12(fp)
   23b6c:	10800217 	ldw	r2,8(r2)
   23b70:	100f883a 	mov	r7,r2
   23b74:	e1bfff17 	ldw	r6,-4(fp)
   23b78:	e17ffe17 	ldw	r5,-8(fp)
   23b7c:	1809883a 	mov	r4,r3
   23b80:	00241600 	call	24160 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23b84:	e037883a 	mov	sp,fp
   23b88:	dfc00117 	ldw	ra,4(sp)
   23b8c:	df000017 	ldw	fp,0(sp)
   23b90:	dec00204 	addi	sp,sp,8
   23b94:	f800283a 	ret

00023b98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23b98:	defffa04 	addi	sp,sp,-24
   23b9c:	dfc00515 	stw	ra,20(sp)
   23ba0:	df000415 	stw	fp,16(sp)
   23ba4:	df000404 	addi	fp,sp,16
   23ba8:	e13ffd15 	stw	r4,-12(fp)
   23bac:	e17ffe15 	stw	r5,-8(fp)
   23bb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23bb4:	e0bffd17 	ldw	r2,-12(fp)
   23bb8:	10800017 	ldw	r2,0(r2)
   23bbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23bc0:	e0bffc17 	ldw	r2,-16(fp)
   23bc4:	10c00a04 	addi	r3,r2,40
   23bc8:	e0bffd17 	ldw	r2,-12(fp)
   23bcc:	10800217 	ldw	r2,8(r2)
   23bd0:	100f883a 	mov	r7,r2
   23bd4:	e1bfff17 	ldw	r6,-4(fp)
   23bd8:	e17ffe17 	ldw	r5,-8(fp)
   23bdc:	1809883a 	mov	r4,r3
   23be0:	002437c0 	call	2437c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23be4:	e037883a 	mov	sp,fp
   23be8:	dfc00117 	ldw	ra,4(sp)
   23bec:	df000017 	ldw	fp,0(sp)
   23bf0:	dec00204 	addi	sp,sp,8
   23bf4:	f800283a 	ret

00023bf8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23bf8:	defffc04 	addi	sp,sp,-16
   23bfc:	dfc00315 	stw	ra,12(sp)
   23c00:	df000215 	stw	fp,8(sp)
   23c04:	df000204 	addi	fp,sp,8
   23c08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c0c:	e0bfff17 	ldw	r2,-4(fp)
   23c10:	10800017 	ldw	r2,0(r2)
   23c14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23c18:	e0bffe17 	ldw	r2,-8(fp)
   23c1c:	10c00a04 	addi	r3,r2,40
   23c20:	e0bfff17 	ldw	r2,-4(fp)
   23c24:	10800217 	ldw	r2,8(r2)
   23c28:	100b883a 	mov	r5,r2
   23c2c:	1809883a 	mov	r4,r3
   23c30:	00240080 	call	24008 <altera_avalon_jtag_uart_close>
}
   23c34:	e037883a 	mov	sp,fp
   23c38:	dfc00117 	ldw	ra,4(sp)
   23c3c:	df000017 	ldw	fp,0(sp)
   23c40:	dec00204 	addi	sp,sp,8
   23c44:	f800283a 	ret

00023c48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23c48:	defffa04 	addi	sp,sp,-24
   23c4c:	dfc00515 	stw	ra,20(sp)
   23c50:	df000415 	stw	fp,16(sp)
   23c54:	df000404 	addi	fp,sp,16
   23c58:	e13ffd15 	stw	r4,-12(fp)
   23c5c:	e17ffe15 	stw	r5,-8(fp)
   23c60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23c64:	e0bffd17 	ldw	r2,-12(fp)
   23c68:	10800017 	ldw	r2,0(r2)
   23c6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23c70:	e0bffc17 	ldw	r2,-16(fp)
   23c74:	10800a04 	addi	r2,r2,40
   23c78:	e1bfff17 	ldw	r6,-4(fp)
   23c7c:	e17ffe17 	ldw	r5,-8(fp)
   23c80:	1009883a 	mov	r4,r2
   23c84:	00240700 	call	24070 <altera_avalon_jtag_uart_ioctl>
}
   23c88:	e037883a 	mov	sp,fp
   23c8c:	dfc00117 	ldw	ra,4(sp)
   23c90:	df000017 	ldw	fp,0(sp)
   23c94:	dec00204 	addi	sp,sp,8
   23c98:	f800283a 	ret

00023c9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23c9c:	defffa04 	addi	sp,sp,-24
   23ca0:	dfc00515 	stw	ra,20(sp)
   23ca4:	df000415 	stw	fp,16(sp)
   23ca8:	df000404 	addi	fp,sp,16
   23cac:	e13ffd15 	stw	r4,-12(fp)
   23cb0:	e17ffe15 	stw	r5,-8(fp)
   23cb4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23cb8:	e0bffd17 	ldw	r2,-12(fp)
   23cbc:	00c00044 	movi	r3,1
   23cc0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23cc4:	e0bffd17 	ldw	r2,-12(fp)
   23cc8:	10800017 	ldw	r2,0(r2)
   23ccc:	10800104 	addi	r2,r2,4
   23cd0:	1007883a 	mov	r3,r2
   23cd4:	e0bffd17 	ldw	r2,-12(fp)
   23cd8:	10800817 	ldw	r2,32(r2)
   23cdc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23ce0:	e0bffe17 	ldw	r2,-8(fp)
   23ce4:	e0ffff17 	ldw	r3,-4(fp)
   23ce8:	d8000015 	stw	zero,0(sp)
   23cec:	e1fffd17 	ldw	r7,-12(fp)
   23cf0:	018000b4 	movhi	r6,2
   23cf4:	318f5704 	addi	r6,r6,15708
   23cf8:	180b883a 	mov	r5,r3
   23cfc:	1009883a 	mov	r4,r2
   23d00:	0026a040 	call	26a04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23d04:	e0bffd17 	ldw	r2,-12(fp)
   23d08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23d0c:	e0bffd17 	ldw	r2,-12(fp)
   23d10:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23d14:	d0e6d017 	ldw	r3,-25792(gp)
   23d18:	e1fffd17 	ldw	r7,-12(fp)
   23d1c:	018000b4 	movhi	r6,2
   23d20:	318fda04 	addi	r6,r6,16232
   23d24:	180b883a 	mov	r5,r3
   23d28:	1009883a 	mov	r4,r2
   23d2c:	00265100 	call	26510 <alt_alarm_start>
   23d30:	1000040e 	bge	r2,zero,23d44 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23d34:	e0fffd17 	ldw	r3,-12(fp)
   23d38:	00a00034 	movhi	r2,32768
   23d3c:	10bfffc4 	addi	r2,r2,-1
   23d40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23d44:	0001883a 	nop
   23d48:	e037883a 	mov	sp,fp
   23d4c:	dfc00117 	ldw	ra,4(sp)
   23d50:	df000017 	ldw	fp,0(sp)
   23d54:	dec00204 	addi	sp,sp,8
   23d58:	f800283a 	ret

00023d5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23d5c:	defff804 	addi	sp,sp,-32
   23d60:	df000715 	stw	fp,28(sp)
   23d64:	df000704 	addi	fp,sp,28
   23d68:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23d6c:	e0bfff17 	ldw	r2,-4(fp)
   23d70:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23d74:	e0bffb17 	ldw	r2,-20(fp)
   23d78:	10800017 	ldw	r2,0(r2)
   23d7c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23d80:	e0bffc17 	ldw	r2,-16(fp)
   23d84:	10800104 	addi	r2,r2,4
   23d88:	10800037 	ldwio	r2,0(r2)
   23d8c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23d90:	e0bffd17 	ldw	r2,-12(fp)
   23d94:	1080c00c 	andi	r2,r2,768
   23d98:	10006d26 	beq	r2,zero,23f50 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23d9c:	e0bffd17 	ldw	r2,-12(fp)
   23da0:	1080400c 	andi	r2,r2,256
   23da4:	10003526 	beq	r2,zero,23e7c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23da8:	00800074 	movhi	r2,1
   23dac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23db0:	e0bffb17 	ldw	r2,-20(fp)
   23db4:	10800a17 	ldw	r2,40(r2)
   23db8:	10800044 	addi	r2,r2,1
   23dbc:	1081ffcc 	andi	r2,r2,2047
   23dc0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23dc4:	e0bffb17 	ldw	r2,-20(fp)
   23dc8:	10c00b17 	ldw	r3,44(r2)
   23dcc:	e0bffe17 	ldw	r2,-8(fp)
   23dd0:	18801526 	beq	r3,r2,23e28 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23dd4:	e0bffc17 	ldw	r2,-16(fp)
   23dd8:	10800037 	ldwio	r2,0(r2)
   23ddc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23de0:	e0bff917 	ldw	r2,-28(fp)
   23de4:	10a0000c 	andi	r2,r2,32768
   23de8:	10001126 	beq	r2,zero,23e30 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23dec:	e0bffb17 	ldw	r2,-20(fp)
   23df0:	10800a17 	ldw	r2,40(r2)
   23df4:	e0fff917 	ldw	r3,-28(fp)
   23df8:	1809883a 	mov	r4,r3
   23dfc:	e0fffb17 	ldw	r3,-20(fp)
   23e00:	1885883a 	add	r2,r3,r2
   23e04:	10800e04 	addi	r2,r2,56
   23e08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e0c:	e0bffb17 	ldw	r2,-20(fp)
   23e10:	10800a17 	ldw	r2,40(r2)
   23e14:	10800044 	addi	r2,r2,1
   23e18:	10c1ffcc 	andi	r3,r2,2047
   23e1c:	e0bffb17 	ldw	r2,-20(fp)
   23e20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23e24:	003fe206 	br	23db0 <__alt_data_end+0xfffeadb0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23e28:	0001883a 	nop
   23e2c:	00000106 	br	23e34 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23e30:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23e34:	e0bff917 	ldw	r2,-28(fp)
   23e38:	10bfffec 	andhi	r2,r2,65535
   23e3c:	10000f26 	beq	r2,zero,23e7c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23e40:	e0bffb17 	ldw	r2,-20(fp)
   23e44:	10c00817 	ldw	r3,32(r2)
   23e48:	00bfff84 	movi	r2,-2
   23e4c:	1886703a 	and	r3,r3,r2
   23e50:	e0bffb17 	ldw	r2,-20(fp)
   23e54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23e58:	e0bffc17 	ldw	r2,-16(fp)
   23e5c:	10800104 	addi	r2,r2,4
   23e60:	1007883a 	mov	r3,r2
   23e64:	e0bffb17 	ldw	r2,-20(fp)
   23e68:	10800817 	ldw	r2,32(r2)
   23e6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23e70:	e0bffc17 	ldw	r2,-16(fp)
   23e74:	10800104 	addi	r2,r2,4
   23e78:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23e7c:	e0bffd17 	ldw	r2,-12(fp)
   23e80:	1080800c 	andi	r2,r2,512
   23e84:	103fbe26 	beq	r2,zero,23d80 <__alt_data_end+0xfffead80>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23e88:	e0bffd17 	ldw	r2,-12(fp)
   23e8c:	1004d43a 	srli	r2,r2,16
   23e90:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23e94:	00001406 	br	23ee8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23e98:	e0bffc17 	ldw	r2,-16(fp)
   23e9c:	e0fffb17 	ldw	r3,-20(fp)
   23ea0:	18c00d17 	ldw	r3,52(r3)
   23ea4:	e13ffb17 	ldw	r4,-20(fp)
   23ea8:	20c7883a 	add	r3,r4,r3
   23eac:	18c20e04 	addi	r3,r3,2104
   23eb0:	18c00003 	ldbu	r3,0(r3)
   23eb4:	18c03fcc 	andi	r3,r3,255
   23eb8:	18c0201c 	xori	r3,r3,128
   23ebc:	18ffe004 	addi	r3,r3,-128
   23ec0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ec4:	e0bffb17 	ldw	r2,-20(fp)
   23ec8:	10800d17 	ldw	r2,52(r2)
   23ecc:	10800044 	addi	r2,r2,1
   23ed0:	10c1ffcc 	andi	r3,r2,2047
   23ed4:	e0bffb17 	ldw	r2,-20(fp)
   23ed8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23edc:	e0bffa17 	ldw	r2,-24(fp)
   23ee0:	10bfffc4 	addi	r2,r2,-1
   23ee4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ee8:	e0bffa17 	ldw	r2,-24(fp)
   23eec:	10000526 	beq	r2,zero,23f04 <altera_avalon_jtag_uart_irq+0x1a8>
   23ef0:	e0bffb17 	ldw	r2,-20(fp)
   23ef4:	10c00d17 	ldw	r3,52(r2)
   23ef8:	e0bffb17 	ldw	r2,-20(fp)
   23efc:	10800c17 	ldw	r2,48(r2)
   23f00:	18bfe51e 	bne	r3,r2,23e98 <__alt_data_end+0xfffeae98>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23f04:	e0bffa17 	ldw	r2,-24(fp)
   23f08:	103f9d26 	beq	r2,zero,23d80 <__alt_data_end+0xfffead80>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23f0c:	e0bffb17 	ldw	r2,-20(fp)
   23f10:	10c00817 	ldw	r3,32(r2)
   23f14:	00bfff44 	movi	r2,-3
   23f18:	1886703a 	and	r3,r3,r2
   23f1c:	e0bffb17 	ldw	r2,-20(fp)
   23f20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f24:	e0bffb17 	ldw	r2,-20(fp)
   23f28:	10800017 	ldw	r2,0(r2)
   23f2c:	10800104 	addi	r2,r2,4
   23f30:	1007883a 	mov	r3,r2
   23f34:	e0bffb17 	ldw	r2,-20(fp)
   23f38:	10800817 	ldw	r2,32(r2)
   23f3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23f40:	e0bffc17 	ldw	r2,-16(fp)
   23f44:	10800104 	addi	r2,r2,4
   23f48:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23f4c:	003f8c06 	br	23d80 <__alt_data_end+0xfffead80>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23f50:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23f54:	0001883a 	nop
   23f58:	e037883a 	mov	sp,fp
   23f5c:	df000017 	ldw	fp,0(sp)
   23f60:	dec00104 	addi	sp,sp,4
   23f64:	f800283a 	ret

00023f68 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23f68:	defff804 	addi	sp,sp,-32
   23f6c:	df000715 	stw	fp,28(sp)
   23f70:	df000704 	addi	fp,sp,28
   23f74:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23f78:	e0bffb17 	ldw	r2,-20(fp)
   23f7c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23f80:	e0bff917 	ldw	r2,-28(fp)
   23f84:	10800017 	ldw	r2,0(r2)
   23f88:	10800104 	addi	r2,r2,4
   23f8c:	10800037 	ldwio	r2,0(r2)
   23f90:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23f94:	e0bffa17 	ldw	r2,-24(fp)
   23f98:	1081000c 	andi	r2,r2,1024
   23f9c:	10000b26 	beq	r2,zero,23fcc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23fa0:	e0bff917 	ldw	r2,-28(fp)
   23fa4:	10800017 	ldw	r2,0(r2)
   23fa8:	10800104 	addi	r2,r2,4
   23fac:	1007883a 	mov	r3,r2
   23fb0:	e0bff917 	ldw	r2,-28(fp)
   23fb4:	10800817 	ldw	r2,32(r2)
   23fb8:	10810014 	ori	r2,r2,1024
   23fbc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23fc0:	e0bff917 	ldw	r2,-28(fp)
   23fc4:	10000915 	stw	zero,36(r2)
   23fc8:	00000a06 	br	23ff4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23fcc:	e0bff917 	ldw	r2,-28(fp)
   23fd0:	10c00917 	ldw	r3,36(r2)
   23fd4:	00a00034 	movhi	r2,32768
   23fd8:	10bfff04 	addi	r2,r2,-4
   23fdc:	10c00536 	bltu	r2,r3,23ff4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23fe0:	e0bff917 	ldw	r2,-28(fp)
   23fe4:	10800917 	ldw	r2,36(r2)
   23fe8:	10c00044 	addi	r3,r2,1
   23fec:	e0bff917 	ldw	r2,-28(fp)
   23ff0:	10c00915 	stw	r3,36(r2)
   23ff4:	d0a6d017 	ldw	r2,-25792(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23ff8:	e037883a 	mov	sp,fp
   23ffc:	df000017 	ldw	fp,0(sp)
   24000:	dec00104 	addi	sp,sp,4
   24004:	f800283a 	ret

00024008 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24008:	defffd04 	addi	sp,sp,-12
   2400c:	df000215 	stw	fp,8(sp)
   24010:	df000204 	addi	fp,sp,8
   24014:	e13ffe15 	stw	r4,-8(fp)
   24018:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2401c:	00000506 	br	24034 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24020:	e0bfff17 	ldw	r2,-4(fp)
   24024:	1090000c 	andi	r2,r2,16384
   24028:	10000226 	beq	r2,zero,24034 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2402c:	00bffd44 	movi	r2,-11
   24030:	00000b06 	br	24060 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24034:	e0bffe17 	ldw	r2,-8(fp)
   24038:	10c00d17 	ldw	r3,52(r2)
   2403c:	e0bffe17 	ldw	r2,-8(fp)
   24040:	10800c17 	ldw	r2,48(r2)
   24044:	18800526 	beq	r3,r2,2405c <altera_avalon_jtag_uart_close+0x54>
   24048:	e0bffe17 	ldw	r2,-8(fp)
   2404c:	10c00917 	ldw	r3,36(r2)
   24050:	e0bffe17 	ldw	r2,-8(fp)
   24054:	10800117 	ldw	r2,4(r2)
   24058:	18bff136 	bltu	r3,r2,24020 <__alt_data_end+0xfffeb020>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2405c:	0005883a 	mov	r2,zero
}
   24060:	e037883a 	mov	sp,fp
   24064:	df000017 	ldw	fp,0(sp)
   24068:	dec00104 	addi	sp,sp,4
   2406c:	f800283a 	ret

00024070 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24070:	defffa04 	addi	sp,sp,-24
   24074:	df000515 	stw	fp,20(sp)
   24078:	df000504 	addi	fp,sp,20
   2407c:	e13ffd15 	stw	r4,-12(fp)
   24080:	e17ffe15 	stw	r5,-8(fp)
   24084:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   24088:	00bff9c4 	movi	r2,-25
   2408c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24090:	e0bffe17 	ldw	r2,-8(fp)
   24094:	10da8060 	cmpeqi	r3,r2,27137
   24098:	1800031e 	bne	r3,zero,240a8 <altera_avalon_jtag_uart_ioctl+0x38>
   2409c:	109a80a0 	cmpeqi	r2,r2,27138
   240a0:	1000181e 	bne	r2,zero,24104 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   240a4:	00002906 	br	2414c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   240a8:	e0bffd17 	ldw	r2,-12(fp)
   240ac:	10c00117 	ldw	r3,4(r2)
   240b0:	00a00034 	movhi	r2,32768
   240b4:	10bfffc4 	addi	r2,r2,-1
   240b8:	18802126 	beq	r3,r2,24140 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   240bc:	e0bfff17 	ldw	r2,-4(fp)
   240c0:	10800017 	ldw	r2,0(r2)
   240c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   240c8:	e0bffc17 	ldw	r2,-16(fp)
   240cc:	10800090 	cmplti	r2,r2,2
   240d0:	1000061e 	bne	r2,zero,240ec <altera_avalon_jtag_uart_ioctl+0x7c>
   240d4:	e0fffc17 	ldw	r3,-16(fp)
   240d8:	00a00034 	movhi	r2,32768
   240dc:	10bfffc4 	addi	r2,r2,-1
   240e0:	18800226 	beq	r3,r2,240ec <altera_avalon_jtag_uart_ioctl+0x7c>
   240e4:	e0bffc17 	ldw	r2,-16(fp)
   240e8:	00000206 	br	240f4 <altera_avalon_jtag_uart_ioctl+0x84>
   240ec:	00a00034 	movhi	r2,32768
   240f0:	10bfff84 	addi	r2,r2,-2
   240f4:	e0fffd17 	ldw	r3,-12(fp)
   240f8:	18800115 	stw	r2,4(r3)
      rc = 0;
   240fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24100:	00000f06 	br	24140 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24104:	e0bffd17 	ldw	r2,-12(fp)
   24108:	10c00117 	ldw	r3,4(r2)
   2410c:	00a00034 	movhi	r2,32768
   24110:	10bfffc4 	addi	r2,r2,-1
   24114:	18800c26 	beq	r3,r2,24148 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24118:	e0bffd17 	ldw	r2,-12(fp)
   2411c:	10c00917 	ldw	r3,36(r2)
   24120:	e0bffd17 	ldw	r2,-12(fp)
   24124:	10800117 	ldw	r2,4(r2)
   24128:	1885803a 	cmpltu	r2,r3,r2
   2412c:	10c03fcc 	andi	r3,r2,255
   24130:	e0bfff17 	ldw	r2,-4(fp)
   24134:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24138:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2413c:	00000206 	br	24148 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   24140:	0001883a 	nop
   24144:	00000106 	br	2414c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   24148:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2414c:	e0bffb17 	ldw	r2,-20(fp)
}
   24150:	e037883a 	mov	sp,fp
   24154:	df000017 	ldw	fp,0(sp)
   24158:	dec00104 	addi	sp,sp,4
   2415c:	f800283a 	ret

00024160 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24160:	defff304 	addi	sp,sp,-52
   24164:	dfc00c15 	stw	ra,48(sp)
   24168:	df000b15 	stw	fp,44(sp)
   2416c:	df000b04 	addi	fp,sp,44
   24170:	e13ffc15 	stw	r4,-16(fp)
   24174:	e17ffd15 	stw	r5,-12(fp)
   24178:	e1bffe15 	stw	r6,-8(fp)
   2417c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24180:	e0bffd17 	ldw	r2,-12(fp)
   24184:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24188:	00004706 	br	242a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2418c:	e0bffc17 	ldw	r2,-16(fp)
   24190:	10800a17 	ldw	r2,40(r2)
   24194:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24198:	e0bffc17 	ldw	r2,-16(fp)
   2419c:	10800b17 	ldw	r2,44(r2)
   241a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   241a4:	e0fff717 	ldw	r3,-36(fp)
   241a8:	e0bff817 	ldw	r2,-32(fp)
   241ac:	18800536 	bltu	r3,r2,241c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   241b0:	e0fff717 	ldw	r3,-36(fp)
   241b4:	e0bff817 	ldw	r2,-32(fp)
   241b8:	1885c83a 	sub	r2,r3,r2
   241bc:	e0bff615 	stw	r2,-40(fp)
   241c0:	00000406 	br	241d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   241c4:	00c20004 	movi	r3,2048
   241c8:	e0bff817 	ldw	r2,-32(fp)
   241cc:	1885c83a 	sub	r2,r3,r2
   241d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   241d4:	e0bff617 	ldw	r2,-40(fp)
   241d8:	10001e26 	beq	r2,zero,24254 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   241dc:	e0fffe17 	ldw	r3,-8(fp)
   241e0:	e0bff617 	ldw	r2,-40(fp)
   241e4:	1880022e 	bgeu	r3,r2,241f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   241e8:	e0bffe17 	ldw	r2,-8(fp)
   241ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   241f0:	e0bffc17 	ldw	r2,-16(fp)
   241f4:	10c00e04 	addi	r3,r2,56
   241f8:	e0bff817 	ldw	r2,-32(fp)
   241fc:	1885883a 	add	r2,r3,r2
   24200:	e1bff617 	ldw	r6,-40(fp)
   24204:	100b883a 	mov	r5,r2
   24208:	e13ff517 	ldw	r4,-44(fp)
   2420c:	00216fc0 	call	216fc <memcpy>
      ptr   += n;
   24210:	e0fff517 	ldw	r3,-44(fp)
   24214:	e0bff617 	ldw	r2,-40(fp)
   24218:	1885883a 	add	r2,r3,r2
   2421c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   24220:	e0fffe17 	ldw	r3,-8(fp)
   24224:	e0bff617 	ldw	r2,-40(fp)
   24228:	1885c83a 	sub	r2,r3,r2
   2422c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24230:	e0fff817 	ldw	r3,-32(fp)
   24234:	e0bff617 	ldw	r2,-40(fp)
   24238:	1885883a 	add	r2,r3,r2
   2423c:	10c1ffcc 	andi	r3,r2,2047
   24240:	e0bffc17 	ldw	r2,-16(fp)
   24244:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24248:	e0bffe17 	ldw	r2,-8(fp)
   2424c:	00bfcf16 	blt	zero,r2,2418c <__alt_data_end+0xfffeb18c>
   24250:	00000106 	br	24258 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24254:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24258:	e0fff517 	ldw	r3,-44(fp)
   2425c:	e0bffd17 	ldw	r2,-12(fp)
   24260:	1880141e 	bne	r3,r2,242b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24264:	e0bfff17 	ldw	r2,-4(fp)
   24268:	1090000c 	andi	r2,r2,16384
   2426c:	1000131e 	bne	r2,zero,242bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24270:	0001883a 	nop
   24274:	e0bffc17 	ldw	r2,-16(fp)
   24278:	10c00a17 	ldw	r3,40(r2)
   2427c:	e0bff717 	ldw	r2,-36(fp)
   24280:	1880051e 	bne	r3,r2,24298 <altera_avalon_jtag_uart_read+0x138>
   24284:	e0bffc17 	ldw	r2,-16(fp)
   24288:	10c00917 	ldw	r3,36(r2)
   2428c:	e0bffc17 	ldw	r2,-16(fp)
   24290:	10800117 	ldw	r2,4(r2)
   24294:	18bff736 	bltu	r3,r2,24274 <__alt_data_end+0xfffeb274>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24298:	e0bffc17 	ldw	r2,-16(fp)
   2429c:	10c00a17 	ldw	r3,40(r2)
   242a0:	e0bff717 	ldw	r2,-36(fp)
   242a4:	18800726 	beq	r3,r2,242c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   242a8:	e0bffe17 	ldw	r2,-8(fp)
   242ac:	00bfb716 	blt	zero,r2,2418c <__alt_data_end+0xfffeb18c>
   242b0:	00000506 	br	242c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   242b4:	0001883a 	nop
   242b8:	00000306 	br	242c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   242bc:	0001883a 	nop
   242c0:	00000106 	br	242c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   242c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   242c8:	e0fff517 	ldw	r3,-44(fp)
   242cc:	e0bffd17 	ldw	r2,-12(fp)
   242d0:	18801826 	beq	r3,r2,24334 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   242d4:	0005303a 	rdctl	r2,status
   242d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242dc:	e0fffb17 	ldw	r3,-20(fp)
   242e0:	00bfff84 	movi	r2,-2
   242e4:	1884703a 	and	r2,r3,r2
   242e8:	1001703a 	wrctl	status,r2
  
  return context;
   242ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   242f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   242f4:	e0bffc17 	ldw	r2,-16(fp)
   242f8:	10800817 	ldw	r2,32(r2)
   242fc:	10c00054 	ori	r3,r2,1
   24300:	e0bffc17 	ldw	r2,-16(fp)
   24304:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24308:	e0bffc17 	ldw	r2,-16(fp)
   2430c:	10800017 	ldw	r2,0(r2)
   24310:	10800104 	addi	r2,r2,4
   24314:	1007883a 	mov	r3,r2
   24318:	e0bffc17 	ldw	r2,-16(fp)
   2431c:	10800817 	ldw	r2,32(r2)
   24320:	18800035 	stwio	r2,0(r3)
   24324:	e0bffa17 	ldw	r2,-24(fp)
   24328:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2432c:	e0bff917 	ldw	r2,-28(fp)
   24330:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24334:	e0fff517 	ldw	r3,-44(fp)
   24338:	e0bffd17 	ldw	r2,-12(fp)
   2433c:	18800426 	beq	r3,r2,24350 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   24340:	e0fff517 	ldw	r3,-44(fp)
   24344:	e0bffd17 	ldw	r2,-12(fp)
   24348:	1885c83a 	sub	r2,r3,r2
   2434c:	00000606 	br	24368 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   24350:	e0bfff17 	ldw	r2,-4(fp)
   24354:	1090000c 	andi	r2,r2,16384
   24358:	10000226 	beq	r2,zero,24364 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2435c:	00bffd44 	movi	r2,-11
   24360:	00000106 	br	24368 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   24364:	00bffec4 	movi	r2,-5
}
   24368:	e037883a 	mov	sp,fp
   2436c:	dfc00117 	ldw	ra,4(sp)
   24370:	df000017 	ldw	fp,0(sp)
   24374:	dec00204 	addi	sp,sp,8
   24378:	f800283a 	ret

0002437c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2437c:	defff304 	addi	sp,sp,-52
   24380:	dfc00c15 	stw	ra,48(sp)
   24384:	df000b15 	stw	fp,44(sp)
   24388:	df000b04 	addi	fp,sp,44
   2438c:	e13ffc15 	stw	r4,-16(fp)
   24390:	e17ffd15 	stw	r5,-12(fp)
   24394:	e1bffe15 	stw	r6,-8(fp)
   24398:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2439c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   243a0:	e0bffd17 	ldw	r2,-12(fp)
   243a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   243a8:	00003706 	br	24488 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   243ac:	e0bffc17 	ldw	r2,-16(fp)
   243b0:	10800c17 	ldw	r2,48(r2)
   243b4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   243b8:	e0bffc17 	ldw	r2,-16(fp)
   243bc:	10800d17 	ldw	r2,52(r2)
   243c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   243c4:	e0fff917 	ldw	r3,-28(fp)
   243c8:	e0bff517 	ldw	r2,-44(fp)
   243cc:	1880062e 	bgeu	r3,r2,243e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   243d0:	e0fff517 	ldw	r3,-44(fp)
   243d4:	e0bff917 	ldw	r2,-28(fp)
   243d8:	1885c83a 	sub	r2,r3,r2
   243dc:	10bfffc4 	addi	r2,r2,-1
   243e0:	e0bff615 	stw	r2,-40(fp)
   243e4:	00000b06 	br	24414 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   243e8:	e0bff517 	ldw	r2,-44(fp)
   243ec:	10000526 	beq	r2,zero,24404 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   243f0:	00c20004 	movi	r3,2048
   243f4:	e0bff917 	ldw	r2,-28(fp)
   243f8:	1885c83a 	sub	r2,r3,r2
   243fc:	e0bff615 	stw	r2,-40(fp)
   24400:	00000406 	br	24414 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24404:	00c1ffc4 	movi	r3,2047
   24408:	e0bff917 	ldw	r2,-28(fp)
   2440c:	1885c83a 	sub	r2,r3,r2
   24410:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24414:	e0bff617 	ldw	r2,-40(fp)
   24418:	10001e26 	beq	r2,zero,24494 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2441c:	e0fffe17 	ldw	r3,-8(fp)
   24420:	e0bff617 	ldw	r2,-40(fp)
   24424:	1880022e 	bgeu	r3,r2,24430 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24428:	e0bffe17 	ldw	r2,-8(fp)
   2442c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24430:	e0bffc17 	ldw	r2,-16(fp)
   24434:	10c20e04 	addi	r3,r2,2104
   24438:	e0bff917 	ldw	r2,-28(fp)
   2443c:	1885883a 	add	r2,r3,r2
   24440:	e1bff617 	ldw	r6,-40(fp)
   24444:	e17ffd17 	ldw	r5,-12(fp)
   24448:	1009883a 	mov	r4,r2
   2444c:	00216fc0 	call	216fc <memcpy>
      ptr   += n;
   24450:	e0fffd17 	ldw	r3,-12(fp)
   24454:	e0bff617 	ldw	r2,-40(fp)
   24458:	1885883a 	add	r2,r3,r2
   2445c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24460:	e0fffe17 	ldw	r3,-8(fp)
   24464:	e0bff617 	ldw	r2,-40(fp)
   24468:	1885c83a 	sub	r2,r3,r2
   2446c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24470:	e0fff917 	ldw	r3,-28(fp)
   24474:	e0bff617 	ldw	r2,-40(fp)
   24478:	1885883a 	add	r2,r3,r2
   2447c:	10c1ffcc 	andi	r3,r2,2047
   24480:	e0bffc17 	ldw	r2,-16(fp)
   24484:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24488:	e0bffe17 	ldw	r2,-8(fp)
   2448c:	00bfc716 	blt	zero,r2,243ac <__alt_data_end+0xfffeb3ac>
   24490:	00000106 	br	24498 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24494:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24498:	0005303a 	rdctl	r2,status
   2449c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244a0:	e0fffb17 	ldw	r3,-20(fp)
   244a4:	00bfff84 	movi	r2,-2
   244a8:	1884703a 	and	r2,r3,r2
   244ac:	1001703a 	wrctl	status,r2
  
  return context;
   244b0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   244b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   244b8:	e0bffc17 	ldw	r2,-16(fp)
   244bc:	10800817 	ldw	r2,32(r2)
   244c0:	10c00094 	ori	r3,r2,2
   244c4:	e0bffc17 	ldw	r2,-16(fp)
   244c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   244cc:	e0bffc17 	ldw	r2,-16(fp)
   244d0:	10800017 	ldw	r2,0(r2)
   244d4:	10800104 	addi	r2,r2,4
   244d8:	1007883a 	mov	r3,r2
   244dc:	e0bffc17 	ldw	r2,-16(fp)
   244e0:	10800817 	ldw	r2,32(r2)
   244e4:	18800035 	stwio	r2,0(r3)
   244e8:	e0bffa17 	ldw	r2,-24(fp)
   244ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   244f0:	e0bff817 	ldw	r2,-32(fp)
   244f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   244f8:	e0bffe17 	ldw	r2,-8(fp)
   244fc:	0080100e 	bge	zero,r2,24540 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24500:	e0bfff17 	ldw	r2,-4(fp)
   24504:	1090000c 	andi	r2,r2,16384
   24508:	1000101e 	bne	r2,zero,2454c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2450c:	0001883a 	nop
   24510:	e0bffc17 	ldw	r2,-16(fp)
   24514:	10c00d17 	ldw	r3,52(r2)
   24518:	e0bff517 	ldw	r2,-44(fp)
   2451c:	1880051e 	bne	r3,r2,24534 <altera_avalon_jtag_uart_write+0x1b8>
   24520:	e0bffc17 	ldw	r2,-16(fp)
   24524:	10c00917 	ldw	r3,36(r2)
   24528:	e0bffc17 	ldw	r2,-16(fp)
   2452c:	10800117 	ldw	r2,4(r2)
   24530:	18bff736 	bltu	r3,r2,24510 <__alt_data_end+0xfffeb510>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24534:	e0bffc17 	ldw	r2,-16(fp)
   24538:	10800917 	ldw	r2,36(r2)
   2453c:	1000051e 	bne	r2,zero,24554 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24540:	e0bffe17 	ldw	r2,-8(fp)
   24544:	00bfd016 	blt	zero,r2,24488 <__alt_data_end+0xfffeb488>
   24548:	00000306 	br	24558 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2454c:	0001883a 	nop
   24550:	00000106 	br	24558 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24554:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24558:	e0fffd17 	ldw	r3,-12(fp)
   2455c:	e0bff717 	ldw	r2,-36(fp)
   24560:	18800426 	beq	r3,r2,24574 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24564:	e0fffd17 	ldw	r3,-12(fp)
   24568:	e0bff717 	ldw	r2,-36(fp)
   2456c:	1885c83a 	sub	r2,r3,r2
   24570:	00000606 	br	2458c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24574:	e0bfff17 	ldw	r2,-4(fp)
   24578:	1090000c 	andi	r2,r2,16384
   2457c:	10000226 	beq	r2,zero,24588 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24580:	00bffd44 	movi	r2,-11
   24584:	00000106 	br	2458c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24588:	00bffec4 	movi	r2,-5
}
   2458c:	e037883a 	mov	sp,fp
   24590:	dfc00117 	ldw	ra,4(sp)
   24594:	df000017 	ldw	fp,0(sp)
   24598:	dec00204 	addi	sp,sp,8
   2459c:	f800283a 	ret

000245a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   245a0:	defffa04 	addi	sp,sp,-24
   245a4:	dfc00515 	stw	ra,20(sp)
   245a8:	df000415 	stw	fp,16(sp)
   245ac:	df000404 	addi	fp,sp,16
   245b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   245b4:	0007883a 	mov	r3,zero
   245b8:	e0bfff17 	ldw	r2,-4(fp)
   245bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   245c0:	e0bfff17 	ldw	r2,-4(fp)
   245c4:	10800104 	addi	r2,r2,4
   245c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245cc:	0005303a 	rdctl	r2,status
   245d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245d4:	e0fffd17 	ldw	r3,-12(fp)
   245d8:	00bfff84 	movi	r2,-2
   245dc:	1884703a 	and	r2,r3,r2
   245e0:	1001703a 	wrctl	status,r2
  
  return context;
   245e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   245e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   245ec:	002738c0 	call	2738c <alt_tick>
   245f0:	e0bffc17 	ldw	r2,-16(fp)
   245f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   245f8:	e0bffe17 	ldw	r2,-8(fp)
   245fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   24600:	0001883a 	nop
   24604:	e037883a 	mov	sp,fp
   24608:	dfc00117 	ldw	ra,4(sp)
   2460c:	df000017 	ldw	fp,0(sp)
   24610:	dec00204 	addi	sp,sp,8
   24614:	f800283a 	ret

00024618 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24618:	defff804 	addi	sp,sp,-32
   2461c:	dfc00715 	stw	ra,28(sp)
   24620:	df000615 	stw	fp,24(sp)
   24624:	df000604 	addi	fp,sp,24
   24628:	e13ffc15 	stw	r4,-16(fp)
   2462c:	e17ffd15 	stw	r5,-12(fp)
   24630:	e1bffe15 	stw	r6,-8(fp)
   24634:	e1ffff15 	stw	r7,-4(fp)
   24638:	e0bfff17 	ldw	r2,-4(fp)
   2463c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24640:	d0a6d017 	ldw	r2,-25792(gp)
   24644:	1000021e 	bne	r2,zero,24650 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   24648:	e0bffb17 	ldw	r2,-20(fp)
   2464c:	d0a6d015 	stw	r2,-25792(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24650:	e0bffc17 	ldw	r2,-16(fp)
   24654:	10800104 	addi	r2,r2,4
   24658:	00c001c4 	movi	r3,7
   2465c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24660:	d8000015 	stw	zero,0(sp)
   24664:	e1fffc17 	ldw	r7,-16(fp)
   24668:	018000b4 	movhi	r6,2
   2466c:	31916804 	addi	r6,r6,17824
   24670:	e17ffe17 	ldw	r5,-8(fp)
   24674:	e13ffd17 	ldw	r4,-12(fp)
   24678:	0026a040 	call	26a04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2467c:	0001883a 	nop
   24680:	e037883a 	mov	sp,fp
   24684:	dfc00117 	ldw	ra,4(sp)
   24688:	df000017 	ldw	fp,0(sp)
   2468c:	dec00204 	addi	sp,sp,8
   24690:	f800283a 	ret

00024694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24694:	defffe04 	addi	sp,sp,-8
   24698:	dfc00115 	stw	ra,4(sp)
   2469c:	df000015 	stw	fp,0(sp)
   246a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   246a4:	d0a00917 	ldw	r2,-32732(gp)
   246a8:	10000326 	beq	r2,zero,246b8 <alt_get_errno+0x24>
   246ac:	d0a00917 	ldw	r2,-32732(gp)
   246b0:	103ee83a 	callr	r2
   246b4:	00000106 	br	246bc <alt_get_errno+0x28>
   246b8:	d0a6cb04 	addi	r2,gp,-25812
}
   246bc:	e037883a 	mov	sp,fp
   246c0:	dfc00117 	ldw	ra,4(sp)
   246c4:	df000017 	ldw	fp,0(sp)
   246c8:	dec00204 	addi	sp,sp,8
   246cc:	f800283a 	ret

000246d0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
   246d0:	defffc04 	addi	sp,sp,-16
   246d4:	df000315 	stw	fp,12(sp)
   246d8:	df000304 	addi	fp,sp,12
   246dc:	e13ffd15 	stw	r4,-12(fp)
   246e0:	e17ffe15 	stw	r5,-8(fp)
   246e4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   246e8:	e0bffd17 	ldw	r2,-12(fp)
   246ec:	10800037 	ldwio	r2,0(r2)
   246f0:	1080010c 	andi	r2,r2,4
   246f4:	10000226 	beq	r2,zero,24700 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
   246f8:	00bff904 	movi	r2,-28
   246fc:	00001506 	br	24754 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
   24700:	e0bfff17 	ldw	r2,-4(fp)
   24704:	10800017 	ldw	r2,0(r2)
   24708:	1007883a 	mov	r3,r2
   2470c:	e0bffe17 	ldw	r2,-8(fp)
   24710:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
   24714:	e0bffe17 	ldw	r2,-8(fp)
   24718:	10800104 	addi	r2,r2,4
   2471c:	e0ffff17 	ldw	r3,-4(fp)
   24720:	18c00117 	ldw	r3,4(r3)
   24724:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
   24728:	e0bffe17 	ldw	r2,-8(fp)
   2472c:	10800204 	addi	r2,r2,8
   24730:	e0ffff17 	ldw	r3,-4(fp)
   24734:	18c00217 	ldw	r3,8(r3)
   24738:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
   2473c:	e0bffe17 	ldw	r2,-8(fp)
   24740:	10800304 	addi	r2,r2,12
   24744:	e0ffff17 	ldw	r3,-4(fp)
   24748:	18c00317 	ldw	r3,12(r3)
   2474c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
   24750:	0005883a 	mov	r2,zero
}
   24754:	e037883a 	mov	sp,fp
   24758:	df000017 	ldw	fp,0(sp)
   2475c:	dec00104 	addi	sp,sp,4
   24760:	f800283a 	ret

00024764 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
   24764:	defffc04 	addi	sp,sp,-16
   24768:	df000315 	stw	fp,12(sp)
   2476c:	df000304 	addi	fp,sp,12
   24770:	e13ffd15 	stw	r4,-12(fp)
   24774:	e17ffe15 	stw	r5,-8(fp)
   24778:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   2477c:	e0bffd17 	ldw	r2,-12(fp)
   24780:	10800037 	ldwio	r2,0(r2)
   24784:	1080010c 	andi	r2,r2,4
   24788:	10000226 	beq	r2,zero,24794 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
   2478c:	00bff904 	movi	r2,-28
   24790:	00003b06 	br	24880 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
   24794:	e0bfff17 	ldw	r2,-4(fp)
   24798:	10800017 	ldw	r2,0(r2)
   2479c:	1007883a 	mov	r3,r2
   247a0:	e0bffe17 	ldw	r2,-8(fp)
   247a4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
   247a8:	e0bffe17 	ldw	r2,-8(fp)
   247ac:	10800104 	addi	r2,r2,4
   247b0:	e0ffff17 	ldw	r3,-4(fp)
   247b4:	18c00117 	ldw	r3,4(r3)
   247b8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
   247bc:	e0bffe17 	ldw	r2,-8(fp)
   247c0:	10800204 	addi	r2,r2,8
   247c4:	e0ffff17 	ldw	r3,-4(fp)
   247c8:	18c00217 	ldw	r3,8(r3)
   247cc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
   247d0:	e0bffe17 	ldw	r2,-8(fp)
   247d4:	10800304 	addi	r2,r2,12
   247d8:	e0ffff17 	ldw	r3,-4(fp)
   247dc:	18c0030b 	ldhu	r3,12(r3)
   247e0:	18ffffcc 	andi	r3,r3,65535
   247e4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
   247e8:	e0bffe17 	ldw	r2,-8(fp)
   247ec:	10800384 	addi	r2,r2,14
   247f0:	e0ffff17 	ldw	r3,-4(fp)
   247f4:	18c00383 	ldbu	r3,14(r3)
   247f8:	18c03fcc 	andi	r3,r3,255
   247fc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
   24800:	e0bffe17 	ldw	r2,-8(fp)
   24804:	108003c4 	addi	r2,r2,15
   24808:	e0ffff17 	ldw	r3,-4(fp)
   2480c:	18c003c3 	ldbu	r3,15(r3)
   24810:	18c03fcc 	andi	r3,r3,255
   24814:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
   24818:	e0bffe17 	ldw	r2,-8(fp)
   2481c:	10800404 	addi	r2,r2,16
   24820:	e0ffff17 	ldw	r3,-4(fp)
   24824:	18c0040b 	ldhu	r3,16(r3)
   24828:	18ffffcc 	andi	r3,r3,65535
   2482c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
   24830:	e0bffe17 	ldw	r2,-8(fp)
   24834:	10800484 	addi	r2,r2,18
   24838:	e0ffff17 	ldw	r3,-4(fp)
   2483c:	18c0048b 	ldhu	r3,18(r3)
   24840:	18ffffcc 	andi	r3,r3,65535
   24844:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
   24848:	e0bffe17 	ldw	r2,-8(fp)
   2484c:	10800504 	addi	r2,r2,20
   24850:	0007883a 	mov	r3,zero
   24854:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
   24858:	e0bffe17 	ldw	r2,-8(fp)
   2485c:	10800604 	addi	r2,r2,24
   24860:	0007883a 	mov	r3,zero
   24864:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
   24868:	e0bffe17 	ldw	r2,-8(fp)
   2486c:	10800704 	addi	r2,r2,28
   24870:	e0ffff17 	ldw	r3,-4(fp)
   24874:	18c00717 	ldw	r3,28(r3)
   24878:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
   2487c:	0005883a 	mov	r2,zero
}
   24880:	e037883a 	mov	sp,fp
   24884:	df000017 	ldw	fp,0(sp)
   24888:	dec00104 	addi	sp,sp,4
   2488c:	f800283a 	ret

00024890 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
   24890:	defff804 	addi	sp,sp,-32
   24894:	dfc00715 	stw	ra,28(sp)
   24898:	df000615 	stw	fp,24(sp)
   2489c:	df000604 	addi	fp,sp,24
   248a0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
   248a4:	e0bfff17 	ldw	r2,-4(fp)
   248a8:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
   248ac:	e0bffa17 	ldw	r2,-24(fp)
   248b0:	10801783 	ldbu	r2,94(r2)
   248b4:	10803fcc 	andi	r2,r2,255
   248b8:	10001126 	beq	r2,zero,24900 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   248bc:	e0bffa17 	ldw	r2,-24(fp)
   248c0:	10800617 	ldw	r2,24(r2)
   248c4:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
   248c8:	1007883a 	mov	r3,r2
   248cc:	00bffdc4 	movi	r2,-9
   248d0:	1884703a 	and	r2,r3,r2
   248d4:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   248d8:	e0bffa17 	ldw	r2,-24(fp)
   248dc:	10800617 	ldw	r2,24(r2)
   248e0:	e0fffb17 	ldw	r3,-20(fp)
   248e4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
   248e8:	e0bffa17 	ldw	r2,-24(fp)
   248ec:	10800617 	ldw	r2,24(r2)
   248f0:	10800404 	addi	r2,r2,16
   248f4:	00c00044 	movi	r3,1
   248f8:	10c00035 	stwio	r3,0(r2)
   248fc:	00001106 	br	24944 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   24900:	e0bffa17 	ldw	r2,-24(fp)
   24904:	10800317 	ldw	r2,12(r2)
   24908:	10800104 	addi	r2,r2,4
   2490c:	10800037 	ldwio	r2,0(r2)
   24910:	1007883a 	mov	r3,r2
   24914:	00bffbc4 	movi	r2,-17
   24918:	1884703a 	and	r2,r3,r2
   2491c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   24920:	e0bffa17 	ldw	r2,-24(fp)
   24924:	10800317 	ldw	r2,12(r2)
   24928:	10800104 	addi	r2,r2,4
   2492c:	e0fffb17 	ldw	r3,-20(fp)
   24930:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
   24934:	e0bffa17 	ldw	r2,-24(fp)
   24938:	10800317 	ldw	r2,12(r2)
   2493c:	00c08004 	movi	r3,512
   24940:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   24944:	e0bffa17 	ldw	r2,-24(fp)
   24948:	10800b17 	ldw	r2,44(r2)
   2494c:	10001226 	beq	r2,zero,24998 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24950:	0005303a 	rdctl	r2,status
   24954:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24958:	e0fffd17 	ldw	r3,-12(fp)
   2495c:	00bfff84 	movi	r2,-2
   24960:	1884703a 	and	r2,r3,r2
   24964:	1001703a 	wrctl	status,r2
  
  return context;
   24968:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2496c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
   24970:	e0bffa17 	ldw	r2,-24(fp)
   24974:	10800b17 	ldw	r2,44(r2)
   24978:	e0fffa17 	ldw	r3,-24(fp)
   2497c:	18c00c17 	ldw	r3,48(r3)
   24980:	1809883a 	mov	r4,r3
   24984:	103ee83a 	callr	r2
   24988:	e0bffc17 	ldw	r2,-16(fp)
   2498c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24990:	e0bffe17 	ldw	r2,-8(fp)
   24994:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
   24998:	e0bffa17 	ldw	r2,-24(fp)
   2499c:	10801783 	ldbu	r2,94(r2)
   249a0:	10803fcc 	andi	r2,r2,255
   249a4:	10000a26 	beq	r2,zero,249d0 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   249a8:	e0bffa17 	ldw	r2,-24(fp)
   249ac:	10800617 	ldw	r2,24(r2)
   249b0:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
   249b4:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
   249b8:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   249bc:	e0bffa17 	ldw	r2,-24(fp)
   249c0:	10800617 	ldw	r2,24(r2)
   249c4:	e0fffb17 	ldw	r3,-20(fp)
   249c8:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
   249cc:	00000c06 	br	24a00 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
   249d0:	e0bffa17 	ldw	r2,-24(fp)
   249d4:	10800317 	ldw	r2,12(r2)
   249d8:	10800104 	addi	r2,r2,4
   249dc:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
   249e0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
   249e4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   249e8:	e0bffa17 	ldw	r2,-24(fp)
   249ec:	10800317 	ldw	r2,12(r2)
   249f0:	10800104 	addi	r2,r2,4
   249f4:	e0fffb17 	ldw	r3,-20(fp)
   249f8:	10c00035 	stwio	r3,0(r2)
    }

    return;
   249fc:	0001883a 	nop
}
   24a00:	e037883a 	mov	sp,fp
   24a04:	dfc00117 	ldw	ra,4(sp)
   24a08:	df000017 	ldw	fp,0(sp)
   24a0c:	dec00204 	addi	sp,sp,8
   24a10:	f800283a 	ret

00024a14 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
   24a14:	defffb04 	addi	sp,sp,-20
   24a18:	df000415 	stw	fp,16(sp)
   24a1c:	df000404 	addi	fp,sp,16
   24a20:	e13ffc15 	stw	r4,-16(fp)
   24a24:	e17ffd15 	stw	r5,-12(fp)
   24a28:	e1bffe15 	stw	r6,-8(fp)
   24a2c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
   24a30:	e0bffc17 	ldw	r2,-16(fp)
   24a34:	10c01217 	ldw	r3,72(r2)
   24a38:	e0800117 	ldw	r2,4(fp)
   24a3c:	18800436 	bltu	r3,r2,24a50 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
   24a40:	e0bffc17 	ldw	r2,-16(fp)
   24a44:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
   24a48:	10803fcc 	andi	r2,r2,255
   24a4c:	10000226 	beq	r2,zero,24a58 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
   24a50:	00bffa84 	movi	r2,-22
   24a54:	00000e06 	br	24a90 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
   24a58:	e0bffd17 	ldw	r2,-12(fp)
   24a5c:	e0fffe17 	ldw	r3,-8(fp)
   24a60:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
   24a64:	e0bffd17 	ldw	r2,-12(fp)
   24a68:	e0ffff17 	ldw	r3,-4(fp)
   24a6c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   24a70:	e0bffd17 	ldw	r2,-12(fp)
   24a74:	e0c00117 	ldw	r3,4(fp)
   24a78:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   24a7c:	e0800217 	ldw	r2,8(fp)
   24a80:	10e00034 	orhi	r3,r2,32768
   24a84:	e0bffd17 	ldw	r2,-12(fp)
   24a88:	10c00315 	stw	r3,12(r2)
    
    return 0;
   24a8c:	0005883a 	mov	r2,zero
}
   24a90:	e037883a 	mov	sp,fp
   24a94:	df000017 	ldw	fp,0(sp)
   24a98:	dec00104 	addi	sp,sp,4
   24a9c:	f800283a 	ret

00024aa0 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
   24aa0:	defff604 	addi	sp,sp,-40
   24aa4:	df000915 	stw	fp,36(sp)
   24aa8:	df000904 	addi	fp,sp,36
   24aac:	e13ff715 	stw	r4,-36(fp)
   24ab0:	e17ff815 	stw	r5,-32(fp)
   24ab4:	e1bff915 	stw	r6,-28(fp)
   24ab8:	e1fffa15 	stw	r7,-24(fp)
   24abc:	e1800317 	ldw	r6,12(fp)
   24ac0:	e1400417 	ldw	r5,16(fp)
   24ac4:	e1000517 	ldw	r4,20(fp)
   24ac8:	e0c00617 	ldw	r3,24(fp)
   24acc:	e0800717 	ldw	r2,28(fp)
   24ad0:	e1bffb0d 	sth	r6,-20(fp)
   24ad4:	e17ffc05 	stb	r5,-16(fp)
   24ad8:	e13ffd05 	stb	r4,-12(fp)
   24adc:	e0fffe0d 	sth	r3,-8(fp)
   24ae0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
   24ae4:	e0bff717 	ldw	r2,-36(fp)
   24ae8:	10c01217 	ldw	r3,72(r2)
   24aec:	e0800117 	ldw	r2,4(fp)
   24af0:	18801936 	bltu	r3,r2,24b58 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
   24af4:	e13ff717 	ldw	r4,-36(fp)
   24af8:	20801317 	ldw	r2,76(r4)
   24afc:	20c01417 	ldw	r3,80(r4)
   24b00:	e13ffe0b 	ldhu	r4,-8(fp)
   24b04:	213fffcc 	andi	r4,r4,65535
   24b08:	2015883a 	mov	r10,r4
   24b0c:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
   24b10:	1ac01136 	bltu	r3,r11,24b58 <alt_msgdma_construct_extended_descriptor+0xb8>
   24b14:	58c0011e 	bne	r11,r3,24b1c <alt_msgdma_construct_extended_descriptor+0x7c>
   24b18:	12800f36 	bltu	r2,r10,24b58 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
   24b1c:	e13ff717 	ldw	r4,-36(fp)
   24b20:	20801317 	ldw	r2,76(r4)
   24b24:	20c01417 	ldw	r3,80(r4)
   24b28:	e13fff0b 	ldhu	r4,-4(fp)
   24b2c:	213fffcc 	andi	r4,r4,65535
   24b30:	2011883a 	mov	r8,r4
   24b34:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
   24b38:	1a400736 	bltu	r3,r9,24b58 <alt_msgdma_construct_extended_descriptor+0xb8>
   24b3c:	48c0011e 	bne	r9,r3,24b44 <alt_msgdma_construct_extended_descriptor+0xa4>
   24b40:	12000536 	bltu	r2,r8,24b58 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
   24b44:	e0bff717 	ldw	r2,-36(fp)
   24b48:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
   24b4c:	10803fcc 	andi	r2,r2,255
   24b50:	10800060 	cmpeqi	r2,r2,1
   24b54:	1000021e 	bne	r2,zero,24b60 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
   24b58:	00bffa84 	movi	r2,-22
   24b5c:	00002106 	br	24be4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
   24b60:	e0bff817 	ldw	r2,-32(fp)
   24b64:	e0fff917 	ldw	r3,-28(fp)
   24b68:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
   24b6c:	e0bff817 	ldw	r2,-32(fp)
   24b70:	e0fffa17 	ldw	r3,-24(fp)
   24b74:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   24b78:	e0bff817 	ldw	r2,-32(fp)
   24b7c:	e0c00117 	ldw	r3,4(fp)
   24b80:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
   24b84:	e0bff817 	ldw	r2,-32(fp)
   24b88:	e0fffb0b 	ldhu	r3,-20(fp)
   24b8c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
   24b90:	e0bff817 	ldw	r2,-32(fp)
   24b94:	e0fffc03 	ldbu	r3,-16(fp)
   24b98:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
   24b9c:	e0bff817 	ldw	r2,-32(fp)
   24ba0:	e0fffd03 	ldbu	r3,-12(fp)
   24ba4:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
   24ba8:	e0bff817 	ldw	r2,-32(fp)
   24bac:	e0fffe0b 	ldhu	r3,-8(fp)
   24bb0:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
   24bb4:	e0bff817 	ldw	r2,-32(fp)
   24bb8:	e0ffff0b 	ldhu	r3,-4(fp)
   24bbc:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
   24bc0:	e0bff817 	ldw	r2,-32(fp)
   24bc4:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
   24bc8:	e0bff817 	ldw	r2,-32(fp)
   24bcc:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   24bd0:	e0800217 	ldw	r2,8(fp)
   24bd4:	10e00034 	orhi	r3,r2,32768
   24bd8:	e0bff817 	ldw	r2,-32(fp)
   24bdc:	10c00715 	stw	r3,28(r2)

  return 0 ;
   24be0:	0005883a 	mov	r2,zero

}
   24be4:	e037883a 	mov	sp,fp
   24be8:	df000017 	ldw	fp,0(sp)
   24bec:	dec00104 	addi	sp,sp,4
   24bf0:	f800283a 	ret

00024bf4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
   24bf4:	defff004 	addi	sp,sp,-64
   24bf8:	dfc00f15 	stw	ra,60(sp)
   24bfc:	df000e15 	stw	fp,56(sp)
   24c00:	df000e04 	addi	fp,sp,56
   24c04:	e13ffd15 	stw	r4,-12(fp)
   24c08:	e17ffe15 	stw	r5,-8(fp)
   24c0c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
   24c10:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
   24c14:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
   24c18:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24c1c:	e0bffd17 	ldw	r2,-12(fp)
   24c20:	10800317 	ldw	r2,12(r2)
   24c24:	10800204 	addi	r2,r2,8
   24c28:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
   24c2c:	10bfffcc 	andi	r2,r2,65535
   24c30:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24c34:	e0bffd17 	ldw	r2,-12(fp)
   24c38:	10800317 	ldw	r2,12(r2)
   24c3c:	10800204 	addi	r2,r2,8
   24c40:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
   24c44:	1004d43a 	srli	r2,r2,16
   24c48:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   24c4c:	e0bffd17 	ldw	r2,-12(fp)
   24c50:	10800917 	ldw	r2,36(r2)
   24c54:	e0fff617 	ldw	r3,-40(fp)
   24c58:	1880042e 	bgeu	r3,r2,24c6c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
   24c5c:	e0bffd17 	ldw	r2,-12(fp)
   24c60:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   24c64:	e0fff517 	ldw	r3,-44(fp)
   24c68:	18800236 	bltu	r3,r2,24c74 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
   24c6c:	00bff904 	movi	r2,-28
   24c70:	00008f06 	br	24eb0 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   24c74:	00800804 	movi	r2,32
   24c78:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c7c:	0005303a 	rdctl	r2,status
   24c80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c84:	e0fff717 	ldw	r3,-36(fp)
   24c88:	00bfff84 	movi	r2,-2
   24c8c:	1884703a 	and	r2,r3,r2
   24c90:	1001703a 	wrctl	status,r2
  
  return context;
   24c94:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
   24c98:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   24c9c:	e0bffd17 	ldw	r2,-12(fp)
   24ca0:	10800317 	ldw	r2,12(r2)
   24ca4:	10800104 	addi	r2,r2,4
   24ca8:	e0fff317 	ldw	r3,-52(fp)
   24cac:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
   24cb0:	e0bffd17 	ldw	r2,-12(fp)
   24cb4:	10800317 	ldw	r2,12(r2)
   24cb8:	e0fffd17 	ldw	r3,-12(fp)
   24cbc:	18c00317 	ldw	r3,12(r3)
   24cc0:	18c00037 	ldwio	r3,0(r3)
   24cc4:	10c00035 	stwio	r3,0(r2)
   24cc8:	e0bff417 	ldw	r2,-48(fp)
   24ccc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cd0:	e0bffc17 	ldw	r2,-16(fp)
   24cd4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
   24cd8:	e0bffe17 	ldw	r2,-8(fp)
   24cdc:	10001a26 	beq	r2,zero,24d48 <alt_msgdma_descriptor_async_transfer+0x154>
   24ce0:	e0bfff17 	ldw	r2,-4(fp)
   24ce4:	1000181e 	bne	r2,zero,24d48 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   24ce8:	00000d06 	br	24d20 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   24cec:	01000044 	movi	r4,1
   24cf0:	002663c0 	call	2663c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   24cf4:	e0bff20b 	ldhu	r2,-56(fp)
   24cf8:	1084e230 	cmpltui	r2,r2,5000
   24cfc:	1000051e 	bne	r2,zero,24d14 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
   24d00:	010000b4 	movhi	r4,2
   24d04:	211f7804 	addi	r4,r4,32224
   24d08:	00270880 	call	27088 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
   24d0c:	00bff084 	movi	r2,-62
   24d10:	00006706 	br	24eb0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
   24d14:	e0bff20b 	ldhu	r2,-56(fp)
   24d18:	10800044 	addi	r2,r2,1
   24d1c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   24d20:	e0bffd17 	ldw	r2,-12(fp)
   24d24:	10c00317 	ldw	r3,12(r2)
   24d28:	e0bffd17 	ldw	r2,-12(fp)
   24d2c:	10800417 	ldw	r2,16(r2)
   24d30:	e1bffe17 	ldw	r6,-8(fp)
   24d34:	100b883a 	mov	r5,r2
   24d38:	1809883a 	mov	r4,r3
   24d3c:	00246d00 	call	246d0 <alt_msgdma_write_standard_descriptor>
   24d40:	103fea1e 	bne	r2,zero,24cec <__alt_data_end+0xfffebcec>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
   24d44:	00001f06 	br	24dc4 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   24d48:	e0bffe17 	ldw	r2,-8(fp)
   24d4c:	10001b1e 	bne	r2,zero,24dbc <alt_msgdma_descriptor_async_transfer+0x1c8>
   24d50:	e0bfff17 	ldw	r2,-4(fp)
   24d54:	10001926 	beq	r2,zero,24dbc <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
   24d58:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   24d5c:	00000d06 	br	24d94 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   24d60:	01000044 	movi	r4,1
   24d64:	002663c0 	call	2663c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   24d68:	e0bff20b 	ldhu	r2,-56(fp)
   24d6c:	1084e230 	cmpltui	r2,r2,5000
   24d70:	1000051e 	bne	r2,zero,24d88 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
   24d74:	010000b4 	movhi	r4,2
   24d78:	211f8e04 	addi	r4,r4,32312
   24d7c:	00270880 	call	27088 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
   24d80:	00bff084 	movi	r2,-62
   24d84:	00004a06 	br	24eb0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
   24d88:	e0bff20b 	ldhu	r2,-56(fp)
   24d8c:	10800044 	addi	r2,r2,1
   24d90:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   24d94:	e0bffd17 	ldw	r2,-12(fp)
   24d98:	10c00317 	ldw	r3,12(r2)
   24d9c:	e0bffd17 	ldw	r2,-12(fp)
   24da0:	10800417 	ldw	r2,16(r2)
   24da4:	e1bfff17 	ldw	r6,-4(fp)
   24da8:	100b883a 	mov	r5,r2
   24dac:	1809883a 	mov	r4,r3
   24db0:	00247640 	call	24764 <alt_msgdma_write_extended_descriptor>
   24db4:	103fea1e 	bne	r2,zero,24d60 <__alt_data_end+0xfffebd60>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   24db8:	00000206 	br	24dc4 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   24dbc:	00bfffc4 	movi	r2,-1
   24dc0:	00003b06 	br	24eb0 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
   24dc4:	e0bffd17 	ldw	r2,-12(fp)
   24dc8:	10800b17 	ldw	r2,44(r2)
   24dcc:	10001c26 	beq	r2,zero,24e40 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
   24dd0:	e0bffd17 	ldw	r2,-12(fp)
   24dd4:	10c00d17 	ldw	r3,52(r2)
   24dd8:	e0bff317 	ldw	r2,-52(fp)
   24ddc:	1884b03a 	or	r2,r3,r2
   24de0:	10800514 	ori	r2,r2,20
   24de4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   24de8:	e0fff317 	ldw	r3,-52(fp)
   24dec:	00bff7c4 	movi	r2,-33
   24df0:	1884703a 	and	r2,r3,r2
   24df4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24df8:	0005303a 	rdctl	r2,status
   24dfc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e00:	e0fffa17 	ldw	r3,-24(fp)
   24e04:	00bfff84 	movi	r2,-2
   24e08:	1884703a 	and	r2,r3,r2
   24e0c:	1001703a 	wrctl	status,r2
  
  return context;
   24e10:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
   24e14:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   24e18:	e0bffd17 	ldw	r2,-12(fp)
   24e1c:	10800317 	ldw	r2,12(r2)
   24e20:	10800104 	addi	r2,r2,4
   24e24:	e0fff317 	ldw	r3,-52(fp)
   24e28:	10c00035 	stwio	r3,0(r2)
   24e2c:	e0bff417 	ldw	r2,-48(fp)
   24e30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24e34:	e0bff817 	ldw	r2,-32(fp)
   24e38:	1001703a 	wrctl	status,r2
   24e3c:	00001b06 	br	24eac <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
   24e40:	e0bffd17 	ldw	r2,-12(fp)
   24e44:	10c00d17 	ldw	r3,52(r2)
   24e48:	e0bff317 	ldw	r2,-52(fp)
   24e4c:	1884b03a 	or	r2,r3,r2
   24e50:	10800114 	ori	r2,r2,4
   24e54:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
   24e58:	e0fff317 	ldw	r3,-52(fp)
   24e5c:	00bff3c4 	movi	r2,-49
   24e60:	1884703a 	and	r2,r3,r2
   24e64:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24e68:	0005303a 	rdctl	r2,status
   24e6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e70:	e0fffb17 	ldw	r3,-20(fp)
   24e74:	00bfff84 	movi	r2,-2
   24e78:	1884703a 	and	r2,r3,r2
   24e7c:	1001703a 	wrctl	status,r2
  
  return context;
   24e80:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
   24e84:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   24e88:	e0bffd17 	ldw	r2,-12(fp)
   24e8c:	10800317 	ldw	r2,12(r2)
   24e90:	10800104 	addi	r2,r2,4
   24e94:	e0fff317 	ldw	r3,-52(fp)
   24e98:	10c00035 	stwio	r3,0(r2)
   24e9c:	e0bff417 	ldw	r2,-48(fp)
   24ea0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24ea4:	e0bff917 	ldw	r2,-28(fp)
   24ea8:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
   24eac:	0005883a 	mov	r2,zero
}
   24eb0:	e037883a 	mov	sp,fp
   24eb4:	dfc00117 	ldw	ra,4(sp)
   24eb8:	df000017 	ldw	fp,0(sp)
   24ebc:	dec00204 	addi	sp,sp,8
   24ec0:	f800283a 	ret

00024ec4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
   24ec4:	defff004 	addi	sp,sp,-64
   24ec8:	dfc00f15 	stw	ra,60(sp)
   24ecc:	df000e15 	stw	fp,56(sp)
   24ed0:	df000e04 	addi	fp,sp,56
   24ed4:	e13ffd15 	stw	r4,-12(fp)
   24ed8:	e17ffe15 	stw	r5,-8(fp)
   24edc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
   24ee0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
   24ee4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
   24ee8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
   24eec:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24ef0:	e0bffd17 	ldw	r2,-12(fp)
   24ef4:	10800317 	ldw	r2,12(r2)
   24ef8:	10800204 	addi	r2,r2,8
   24efc:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
   24f00:	10bfffcc 	andi	r2,r2,65535
   24f04:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24f08:	e0bffd17 	ldw	r2,-12(fp)
   24f0c:	10800317 	ldw	r2,12(r2)
   24f10:	10800204 	addi	r2,r2,8
   24f14:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
   24f18:	1004d43a 	srli	r2,r2,16
   24f1c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
   24f20:	00807804 	movi	r2,480
   24f24:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   24f28:	00001906 	br	24f90 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
   24f2c:	01000044 	movi	r4,1
   24f30:	002663c0 	call	2663c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   24f34:	e0bff30b 	ldhu	r2,-52(fp)
   24f38:	1084e230 	cmpltui	r2,r2,5000
   24f3c:	1000051e 	bne	r2,zero,24f54 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
   24f40:	010000b4 	movhi	r4,2
   24f44:	211fa404 	addi	r4,r4,32400
   24f48:	00270880 	call	27088 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
   24f4c:	00bff084 	movi	r2,-62
   24f50:	0000b506 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
   24f54:	e0bff30b 	ldhu	r2,-52(fp)
   24f58:	10800044 	addi	r2,r2,1
   24f5c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24f60:	e0bffd17 	ldw	r2,-12(fp)
   24f64:	10800317 	ldw	r2,12(r2)
   24f68:	10800204 	addi	r2,r2,8
   24f6c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
   24f70:	10bfffcc 	andi	r2,r2,65535
   24f74:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   24f78:	e0bffd17 	ldw	r2,-12(fp)
   24f7c:	10800317 	ldw	r2,12(r2)
   24f80:	10800204 	addi	r2,r2,8
   24f84:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
   24f88:	1004d43a 	srli	r2,r2,16
   24f8c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   24f90:	e0bffd17 	ldw	r2,-12(fp)
   24f94:	10800917 	ldw	r2,36(r2)
   24f98:	e0fff517 	ldw	r3,-44(fp)
   24f9c:	18bfe32e 	bgeu	r3,r2,24f2c <__alt_data_end+0xfffebf2c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
   24fa0:	e0bffd17 	ldw	r2,-12(fp)
   24fa4:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   24fa8:	e0fff417 	ldw	r3,-48(fp)
   24fac:	18bfdf2e 	bgeu	r3,r2,24f2c <__alt_data_end+0xfffebf2c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24fb0:	0005303a 	rdctl	r2,status
   24fb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24fb8:	e0fffc17 	ldw	r3,-16(fp)
   24fbc:	00bfff84 	movi	r2,-2
   24fc0:	1884703a 	and	r2,r3,r2
   24fc4:	1001703a 	wrctl	status,r2
  
  return context;
   24fc8:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
   24fcc:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   24fd0:	e0bffd17 	ldw	r2,-12(fp)
   24fd4:	10800317 	ldw	r2,12(r2)
   24fd8:	10800104 	addi	r2,r2,4
   24fdc:	00c00804 	movi	r3,32
   24fe0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   24fe4:	e0bffd17 	ldw	r2,-12(fp)
   24fe8:	10800317 	ldw	r2,12(r2)
   24fec:	e0fffd17 	ldw	r3,-12(fp)
   24ff0:	18c00317 	ldw	r3,12(r3)
   24ff4:	18c00037 	ldwio	r3,0(r3)
   24ff8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
   24ffc:	e0bffe17 	ldw	r2,-8(fp)
   25000:	10001b26 	beq	r2,zero,25070 <alt_msgdma_descriptor_sync_transfer+0x1ac>
   25004:	e0bfff17 	ldw	r2,-4(fp)
   25008:	1000191e 	bne	r2,zero,25070 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
   2500c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   25010:	00000d06 	br	25048 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
   25014:	01000044 	movi	r4,1
   25018:	002663c0 	call	2663c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2501c:	e0bff30b 	ldhu	r2,-52(fp)
   25020:	1084e230 	cmpltui	r2,r2,5000
   25024:	1000051e 	bne	r2,zero,2503c <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
   25028:	010000b4 	movhi	r4,2
   2502c:	211fb804 	addi	r4,r4,32480
   25030:	00270880 	call	27088 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
   25034:	00bff084 	movi	r2,-62
   25038:	00007b06 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
   2503c:	e0bff30b 	ldhu	r2,-52(fp)
   25040:	10800044 	addi	r2,r2,1
   25044:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   25048:	e0bffd17 	ldw	r2,-12(fp)
   2504c:	10c00317 	ldw	r3,12(r2)
   25050:	e0bffd17 	ldw	r2,-12(fp)
   25054:	10800417 	ldw	r2,16(r2)
   25058:	e1bffe17 	ldw	r6,-8(fp)
   2505c:	100b883a 	mov	r5,r2
   25060:	1809883a 	mov	r4,r3
   25064:	00246d00 	call	246d0 <alt_msgdma_write_standard_descriptor>
   25068:	103fea1e 	bne	r2,zero,25014 <__alt_data_end+0xfffec014>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
   2506c:	00001f06 	br	250ec <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   25070:	e0bffe17 	ldw	r2,-8(fp)
   25074:	10001b1e 	bne	r2,zero,250e4 <alt_msgdma_descriptor_sync_transfer+0x220>
   25078:	e0bfff17 	ldw	r2,-4(fp)
   2507c:	10001926 	beq	r2,zero,250e4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
   25080:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   25084:	00000d06 	br	250bc <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   25088:	01000044 	movi	r4,1
   2508c:	002663c0 	call	2663c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   25090:	e0bff30b 	ldhu	r2,-52(fp)
   25094:	1084e230 	cmpltui	r2,r2,5000
   25098:	1000051e 	bne	r2,zero,250b0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
   2509c:	010000b4 	movhi	r4,2
   250a0:	211fc904 	addi	r4,r4,32548
   250a4:	00270880 	call	27088 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
   250a8:	00bff084 	movi	r2,-62
   250ac:	00005e06 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
   250b0:	e0bff30b 	ldhu	r2,-52(fp)
   250b4:	10800044 	addi	r2,r2,1
   250b8:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   250bc:	e0bffd17 	ldw	r2,-12(fp)
   250c0:	10c00317 	ldw	r3,12(r2)
   250c4:	e0bffd17 	ldw	r2,-12(fp)
   250c8:	10800417 	ldw	r2,16(r2)
   250cc:	e1bfff17 	ldw	r6,-4(fp)
   250d0:	100b883a 	mov	r5,r2
   250d4:	1809883a 	mov	r4,r3
   250d8:	00247640 	call	24764 <alt_msgdma_write_extended_descriptor>
   250dc:	103fea1e 	bne	r2,zero,25088 <__alt_data_end+0xfffec088>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   250e0:	00000206 	br	250ec <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   250e4:	00bfffc4 	movi	r2,-1
   250e8:	00004f06 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   250ec:	e0bffd17 	ldw	r2,-12(fp)
   250f0:	10800317 	ldw	r2,12(r2)
   250f4:	10800104 	addi	r2,r2,4
   250f8:	e0fffd17 	ldw	r3,-12(fp)
   250fc:	19000d17 	ldw	r4,52(r3)
   25100:	00fff2c4 	movi	r3,-53
   25104:	20c6703a 	and	r3,r4,r3
   25108:	18c00114 	ori	r3,r3,4
   2510c:	10c00035 	stwio	r3,0(r2)
   25110:	e0bff717 	ldw	r2,-36(fp)
   25114:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25118:	e0bff917 	ldw	r2,-28(fp)
   2511c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
   25120:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   25124:	e0bffd17 	ldw	r2,-12(fp)
   25128:	10800317 	ldw	r2,12(r2)
   2512c:	10800037 	ldwio	r2,0(r2)
   25130:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
   25134:	00001106 	br	2517c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
   25138:	01000044 	movi	r4,1
   2513c:	002663c0 	call	2663c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   25140:	e0bff30b 	ldhu	r2,-52(fp)
   25144:	1084e230 	cmpltui	r2,r2,5000
   25148:	1000051e 	bne	r2,zero,25160 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
   2514c:	010000b4 	movhi	r4,2
   25150:	211fda04 	addi	r4,r4,32616
   25154:	00270880 	call	27088 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
   25158:	00bff084 	movi	r2,-62
   2515c:	00003206 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
   25160:	e0bff30b 	ldhu	r2,-52(fp)
   25164:	10800044 	addi	r2,r2,1
   25168:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   2516c:	e0bffd17 	ldw	r2,-12(fp)
   25170:	10800317 	ldw	r2,12(r2)
   25174:	10800037 	ldwio	r2,0(r2)
   25178:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
   2517c:	e0fff217 	ldw	r3,-56(fp)
   25180:	e0bff817 	ldw	r2,-32(fp)
   25184:	1884703a 	and	r2,r3,r2
   25188:	1000031e 	bne	r2,zero,25198 <alt_msgdma_descriptor_sync_transfer+0x2d4>
   2518c:	e0bff217 	ldw	r2,-56(fp)
   25190:	1080004c 	andi	r2,r2,1
   25194:	103fe81e 	bne	r2,zero,25138 <__alt_data_end+0xfffec138>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
   25198:	e0fff217 	ldw	r3,-56(fp)
   2519c:	e0bff817 	ldw	r2,-32(fp)
   251a0:	1884703a 	and	r2,r3,r2
   251a4:	10000226 	beq	r2,zero,251b0 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
   251a8:	e0bff817 	ldw	r2,-32(fp)
   251ac:	00001e06 	br	25228 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
   251b0:	e0bffd17 	ldw	r2,-12(fp)
   251b4:	10800317 	ldw	r2,12(r2)
   251b8:	10800104 	addi	r2,r2,4
   251bc:	10800037 	ldwio	r2,0(r2)
   251c0:	10800814 	ori	r2,r2,32
   251c4:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   251c8:	0005303a 	rdctl	r2,status
   251cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   251d0:	e0fffa17 	ldw	r3,-24(fp)
   251d4:	00bfff84 	movi	r2,-2
   251d8:	1884703a 	and	r2,r3,r2
   251dc:	1001703a 	wrctl	status,r2
  
  return context;
   251e0:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
   251e4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   251e8:	e0bffd17 	ldw	r2,-12(fp)
   251ec:	10800317 	ldw	r2,12(r2)
   251f0:	10800104 	addi	r2,r2,4
   251f4:	e0fff617 	ldw	r3,-40(fp)
   251f8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   251fc:	e0bffd17 	ldw	r2,-12(fp)
   25200:	10800317 	ldw	r2,12(r2)
   25204:	e0fffd17 	ldw	r3,-12(fp)
   25208:	18c00317 	ldw	r3,12(r3)
   2520c:	18c00037 	ldwio	r3,0(r3)
   25210:	10c00035 	stwio	r3,0(r2)
   25214:	e0bff717 	ldw	r2,-36(fp)
   25218:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2521c:	e0bffb17 	ldw	r2,-20(fp)
   25220:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
   25224:	0005883a 	mov	r2,zero

}
   25228:	e037883a 	mov	sp,fp
   2522c:	dfc00117 	ldw	ra,4(sp)
   25230:	df000017 	ldw	fp,0(sp)
   25234:	dec00204 	addi	sp,sp,8
   25238:	f800283a 	ret

0002523c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
   2523c:	defff804 	addi	sp,sp,-32
   25240:	dfc00715 	stw	ra,28(sp)
   25244:	df000615 	stw	fp,24(sp)
   25248:	df000604 	addi	fp,sp,24
   2524c:	e13ffc15 	stw	r4,-16(fp)
   25250:	e17ffd15 	stw	r5,-12(fp)
   25254:	e1bffe15 	stw	r6,-8(fp)
   25258:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
   2525c:	e0800217 	ldw	r2,8(fp)
   25260:	d8800115 	stw	r2,4(sp)
   25264:	e0bfff17 	ldw	r2,-4(fp)
   25268:	d8800015 	stw	r2,0(sp)
   2526c:	e1fffe17 	ldw	r7,-8(fp)
   25270:	000d883a 	mov	r6,zero
   25274:	e17ffd17 	ldw	r5,-12(fp)
   25278:	e13ffc17 	ldw	r4,-16(fp)
   2527c:	0024a140 	call	24a14 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
   25280:	e037883a 	mov	sp,fp
   25284:	dfc00117 	ldw	ra,4(sp)
   25288:	df000017 	ldw	fp,0(sp)
   2528c:	dec00204 	addi	sp,sp,8
   25290:	f800283a 	ret

00025294 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
   25294:	defff804 	addi	sp,sp,-32
   25298:	dfc00715 	stw	ra,28(sp)
   2529c:	df000615 	stw	fp,24(sp)
   252a0:	df000604 	addi	fp,sp,24
   252a4:	e13ffc15 	stw	r4,-16(fp)
   252a8:	e17ffd15 	stw	r5,-12(fp)
   252ac:	e1bffe15 	stw	r6,-8(fp)
   252b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
   252b4:	e0800217 	ldw	r2,8(fp)
   252b8:	d8800115 	stw	r2,4(sp)
   252bc:	e0bfff17 	ldw	r2,-4(fp)
   252c0:	d8800015 	stw	r2,0(sp)
   252c4:	000f883a 	mov	r7,zero
   252c8:	e1bffe17 	ldw	r6,-8(fp)
   252cc:	e17ffd17 	ldw	r5,-12(fp)
   252d0:	e13ffc17 	ldw	r4,-16(fp)
   252d4:	0024a140 	call	24a14 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
   252d8:	e037883a 	mov	sp,fp
   252dc:	dfc00117 	ldw	ra,4(sp)
   252e0:	df000017 	ldw	fp,0(sp)
   252e4:	dec00204 	addi	sp,sp,8
   252e8:	f800283a 	ret

000252ec <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
   252ec:	defff804 	addi	sp,sp,-32
   252f0:	dfc00715 	stw	ra,28(sp)
   252f4:	df000615 	stw	fp,24(sp)
   252f8:	df000604 	addi	fp,sp,24
   252fc:	e13ffc15 	stw	r4,-16(fp)
   25300:	e17ffd15 	stw	r5,-12(fp)
   25304:	e1bffe15 	stw	r6,-8(fp)
   25308:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
   2530c:	e0800317 	ldw	r2,12(fp)
   25310:	d8800115 	stw	r2,4(sp)
   25314:	e0800217 	ldw	r2,8(fp)
   25318:	d8800015 	stw	r2,0(sp)
   2531c:	e1ffff17 	ldw	r7,-4(fp)
   25320:	e1bffe17 	ldw	r6,-8(fp)
   25324:	e17ffd17 	ldw	r5,-12(fp)
   25328:	e13ffc17 	ldw	r4,-16(fp)
   2532c:	0024a140 	call	24a14 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
   25330:	e037883a 	mov	sp,fp
   25334:	dfc00117 	ldw	ra,4(sp)
   25338:	df000017 	ldw	fp,0(sp)
   2533c:	dec00204 	addi	sp,sp,8
   25340:	f800283a 	ret

00025344 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
   25344:	defff004 	addi	sp,sp,-64
   25348:	dfc00f15 	stw	ra,60(sp)
   2534c:	df000e15 	stw	fp,56(sp)
   25350:	df000e04 	addi	fp,sp,56
   25354:	e13ff915 	stw	r4,-28(fp)
   25358:	e17ffa15 	stw	r5,-24(fp)
   2535c:	e1bffb15 	stw	r6,-20(fp)
   25360:	e1fffc15 	stw	r7,-16(fp)
   25364:	e1000317 	ldw	r4,12(fp)
   25368:	e0c00417 	ldw	r3,16(fp)
   2536c:	e0800517 	ldw	r2,20(fp)
   25370:	e13ffd0d 	sth	r4,-12(fp)
   25374:	e0fffe05 	stb	r3,-8(fp)
   25378:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
   2537c:	e0bffd0b 	ldhu	r2,-12(fp)
   25380:	e0fffe03 	ldbu	r3,-8(fp)
   25384:	e13fff0b 	ldhu	r4,-4(fp)
   25388:	d9000615 	stw	r4,24(sp)
   2538c:	d8000515 	stw	zero,20(sp)
   25390:	d8c00415 	stw	r3,16(sp)
   25394:	d8000315 	stw	zero,12(sp)
   25398:	d8800215 	stw	r2,8(sp)
   2539c:	e0800217 	ldw	r2,8(fp)
   253a0:	d8800115 	stw	r2,4(sp)
   253a4:	e0bffc17 	ldw	r2,-16(fp)
   253a8:	d8800015 	stw	r2,0(sp)
   253ac:	e1fffb17 	ldw	r7,-20(fp)
   253b0:	000d883a 	mov	r6,zero
   253b4:	e17ffa17 	ldw	r5,-24(fp)
   253b8:	e13ff917 	ldw	r4,-28(fp)
   253bc:	0024aa00 	call	24aa0 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
   253c0:	e037883a 	mov	sp,fp
   253c4:	dfc00117 	ldw	ra,4(sp)
   253c8:	df000017 	ldw	fp,0(sp)
   253cc:	dec00204 	addi	sp,sp,8
   253d0:	f800283a 	ret

000253d4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
   253d4:	defff004 	addi	sp,sp,-64
   253d8:	dfc00f15 	stw	ra,60(sp)
   253dc:	df000e15 	stw	fp,56(sp)
   253e0:	df000e04 	addi	fp,sp,56
   253e4:	e13ff915 	stw	r4,-28(fp)
   253e8:	e17ffa15 	stw	r5,-24(fp)
   253ec:	e1bffb15 	stw	r6,-20(fp)
   253f0:	e1fffc15 	stw	r7,-16(fp)
   253f4:	e1000317 	ldw	r4,12(fp)
   253f8:	e0c00417 	ldw	r3,16(fp)
   253fc:	e0800517 	ldw	r2,20(fp)
   25400:	e13ffd0d 	sth	r4,-12(fp)
   25404:	e0fffe05 	stb	r3,-8(fp)
   25408:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
   2540c:	e0bffd0b 	ldhu	r2,-12(fp)
   25410:	e0fffe03 	ldbu	r3,-8(fp)
   25414:	e13fff0b 	ldhu	r4,-4(fp)
   25418:	d8000615 	stw	zero,24(sp)
   2541c:	d9000515 	stw	r4,20(sp)
   25420:	d8000415 	stw	zero,16(sp)
   25424:	d8c00315 	stw	r3,12(sp)
   25428:	d8800215 	stw	r2,8(sp)
   2542c:	e0800217 	ldw	r2,8(fp)
   25430:	d8800115 	stw	r2,4(sp)
   25434:	e0bffc17 	ldw	r2,-16(fp)
   25438:	d8800015 	stw	r2,0(sp)
   2543c:	000f883a 	mov	r7,zero
   25440:	e1bffb17 	ldw	r6,-20(fp)
   25444:	e17ffa17 	ldw	r5,-24(fp)
   25448:	e13ff917 	ldw	r4,-28(fp)
   2544c:	0024aa00 	call	24aa0 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
   25450:	e037883a 	mov	sp,fp
   25454:	dfc00117 	ldw	ra,4(sp)
   25458:	df000017 	ldw	fp,0(sp)
   2545c:	dec00204 	addi	sp,sp,8
   25460:	f800283a 	ret

00025464 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   25464:	deffee04 	addi	sp,sp,-72
   25468:	dfc01115 	stw	ra,68(sp)
   2546c:	df001015 	stw	fp,64(sp)
   25470:	df001004 	addi	fp,sp,64
   25474:	e13ff715 	stw	r4,-36(fp)
   25478:	e17ff815 	stw	r5,-32(fp)
   2547c:	e1bff915 	stw	r6,-28(fp)
   25480:	e1fffa15 	stw	r7,-24(fp)
   25484:	e1800417 	ldw	r6,16(fp)
   25488:	e1400517 	ldw	r5,20(fp)
   2548c:	e1000617 	ldw	r4,24(fp)
   25490:	e0c00717 	ldw	r3,28(fp)
   25494:	e0800817 	ldw	r2,32(fp)
   25498:	e1bffb0d 	sth	r6,-20(fp)
   2549c:	e17ffc05 	stb	r5,-16(fp)
   254a0:	e13ffd05 	stb	r4,-12(fp)
   254a4:	e0fffe0d 	sth	r3,-8(fp)
   254a8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
   254ac:	e0bffb0b 	ldhu	r2,-20(fp)
   254b0:	e0fffc03 	ldbu	r3,-16(fp)
   254b4:	e13ffd03 	ldbu	r4,-12(fp)
   254b8:	e17ffe0b 	ldhu	r5,-8(fp)
   254bc:	e1bfff0b 	ldhu	r6,-4(fp)
   254c0:	d9800615 	stw	r6,24(sp)
   254c4:	d9400515 	stw	r5,20(sp)
   254c8:	d9000415 	stw	r4,16(sp)
   254cc:	d8c00315 	stw	r3,12(sp)
   254d0:	d8800215 	stw	r2,8(sp)
   254d4:	e0800317 	ldw	r2,12(fp)
   254d8:	d8800115 	stw	r2,4(sp)
   254dc:	e0800217 	ldw	r2,8(fp)
   254e0:	d8800015 	stw	r2,0(sp)
   254e4:	e1fffa17 	ldw	r7,-24(fp)
   254e8:	e1bff917 	ldw	r6,-28(fp)
   254ec:	e17ff817 	ldw	r5,-32(fp)
   254f0:	e13ff717 	ldw	r4,-36(fp)
   254f4:	0024aa00 	call	24aa0 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
   254f8:	e037883a 	mov	sp,fp
   254fc:	dfc00117 	ldw	ra,4(sp)
   25500:	df000017 	ldw	fp,0(sp)
   25504:	dec00204 	addi	sp,sp,8
   25508:	f800283a 	ret

0002550c <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
   2550c:	defffb04 	addi	sp,sp,-20
   25510:	df000415 	stw	fp,16(sp)
   25514:	df000404 	addi	fp,sp,16
   25518:	e13ffc15 	stw	r4,-16(fp)
   2551c:	e17ffd15 	stw	r5,-12(fp)
   25520:	e1bffe15 	stw	r6,-8(fp)
   25524:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
   25528:	e0bffc17 	ldw	r2,-16(fp)
   2552c:	10c01217 	ldw	r3,72(r2)
   25530:	e0800117 	ldw	r2,4(fp)
   25534:	18800436 	bltu	r3,r2,25548 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
   25538:	e0bffc17 	ldw	r2,-16(fp)
   2553c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
   25540:	10803fcc 	andi	r2,r2,255
   25544:	10000226 	beq	r2,zero,25550 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
   25548:	00bffa84 	movi	r2,-22
   2554c:	00001406 	br	255a0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
   25550:	e0bffd17 	ldw	r2,-12(fp)
   25554:	e0fffe17 	ldw	r3,-8(fp)
   25558:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
   2555c:	e0bffd17 	ldw	r2,-12(fp)
   25560:	e0ffff17 	ldw	r3,-4(fp)
   25564:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   25568:	e0bffd17 	ldw	r2,-12(fp)
   2556c:	e0c00117 	ldw	r3,4(fp)
   25570:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
   25574:	e0fffd17 	ldw	r3,-12(fp)
   25578:	e0bffd17 	ldw	r2,-12(fp)
   2557c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   25580:	e0c00217 	ldw	r3,8(fp)
   25584:	00900034 	movhi	r2,16384
   25588:	10bfffc4 	addi	r2,r2,-1
   2558c:	1884703a 	and	r2,r3,r2
   25590:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
   25594:	e0bffd17 	ldw	r2,-12(fp)
   25598:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
   2559c:	0005883a 	mov	r2,zero
}
   255a0:	e037883a 	mov	sp,fp
   255a4:	df000017 	ldw	fp,0(sp)
   255a8:	dec00104 	addi	sp,sp,4
   255ac:	f800283a 	ret

000255b0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
   255b0:	defff404 	addi	sp,sp,-48
   255b4:	df000b15 	stw	fp,44(sp)
   255b8:	df000b04 	addi	fp,sp,44
   255bc:	e13ff715 	stw	r4,-36(fp)
   255c0:	e17ff815 	stw	r5,-32(fp)
   255c4:	e1bff915 	stw	r6,-28(fp)
   255c8:	e1fffa15 	stw	r7,-24(fp)
   255cc:	e1800517 	ldw	r6,20(fp)
   255d0:	e1400617 	ldw	r5,24(fp)
   255d4:	e1000717 	ldw	r4,28(fp)
   255d8:	e0c00817 	ldw	r3,32(fp)
   255dc:	e0800917 	ldw	r2,36(fp)
   255e0:	e1bffb0d 	sth	r6,-20(fp)
   255e4:	e17ffc05 	stb	r5,-16(fp)
   255e8:	e13ffd05 	stb	r4,-12(fp)
   255ec:	e0fffe0d 	sth	r3,-8(fp)
   255f0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
   255f4:	e0bff717 	ldw	r2,-36(fp)
   255f8:	10c01217 	ldw	r3,72(r2)
   255fc:	e0800317 	ldw	r2,12(fp)
   25600:	18801936 	bltu	r3,r2,25668 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
   25604:	e13ff717 	ldw	r4,-36(fp)
   25608:	20801317 	ldw	r2,76(r4)
   2560c:	20c01417 	ldw	r3,80(r4)
   25610:	e13ffe0b 	ldhu	r4,-8(fp)
   25614:	213fffcc 	andi	r4,r4,65535
   25618:	2015883a 	mov	r10,r4
   2561c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
   25620:	1ac01136 	bltu	r3,r11,25668 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
   25624:	58c0011e 	bne	r11,r3,2562c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
   25628:	12800f36 	bltu	r2,r10,25668 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
   2562c:	e13ff717 	ldw	r4,-36(fp)
   25630:	20801317 	ldw	r2,76(r4)
   25634:	20c01417 	ldw	r3,80(r4)
   25638:	e13fff0b 	ldhu	r4,-4(fp)
   2563c:	213fffcc 	andi	r4,r4,65535
   25640:	2011883a 	mov	r8,r4
   25644:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
   25648:	1a400736 	bltu	r3,r9,25668 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
   2564c:	48c0011e 	bne	r9,r3,25654 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
   25650:	12000536 	bltu	r2,r8,25668 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
   25654:	e0bff717 	ldw	r2,-36(fp)
   25658:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
   2565c:	10803fcc 	andi	r2,r2,255
   25660:	10800060 	cmpeqi	r2,r2,1
   25664:	1000021e 	bne	r2,zero,25670 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
   25668:	00bffa84 	movi	r2,-22
   2566c:	00003106 	br	25734 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
   25670:	e0bff817 	ldw	r2,-32(fp)
   25674:	e0fff917 	ldw	r3,-28(fp)
   25678:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
   2567c:	e0bff817 	ldw	r2,-32(fp)
   25680:	e0fffa17 	ldw	r3,-24(fp)
   25684:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
   25688:	e0bff817 	ldw	r2,-32(fp)
   2568c:	e0c00117 	ldw	r3,4(fp)
   25690:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
   25694:	e0bff817 	ldw	r2,-32(fp)
   25698:	e0c00217 	ldw	r3,8(fp)
   2569c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   256a0:	e0bff817 	ldw	r2,-32(fp)
   256a4:	e0c00317 	ldw	r3,12(fp)
   256a8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
   256ac:	e0bff817 	ldw	r2,-32(fp)
   256b0:	e0fffb0b 	ldhu	r3,-20(fp)
   256b4:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
   256b8:	e0bff817 	ldw	r2,-32(fp)
   256bc:	e0fffc03 	ldbu	r3,-16(fp)
   256c0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
   256c4:	e0bff817 	ldw	r2,-32(fp)
   256c8:	e0fffd03 	ldbu	r3,-12(fp)
   256cc:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
   256d0:	e0bff817 	ldw	r2,-32(fp)
   256d4:	e0fffe0b 	ldhu	r3,-8(fp)
   256d8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
   256dc:	e0bff817 	ldw	r2,-32(fp)
   256e0:	e0ffff0b 	ldhu	r3,-4(fp)
   256e4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
   256e8:	e0bff817 	ldw	r2,-32(fp)
   256ec:	1019883a 	mov	r12,r2
   256f0:	001b883a 	mov	r13,zero
   256f4:	e33ff515 	stw	r12,-44(fp)
   256f8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
   256fc:	e0fff517 	ldw	r3,-44(fp)
   25700:	e0bff817 	ldw	r2,-32(fp)
   25704:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
   25708:	e0fff617 	ldw	r3,-40(fp)
   2570c:	e0bff817 	ldw	r2,-32(fp)
   25710:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   25714:	e0c00417 	ldw	r3,16(fp)
   25718:	00900034 	movhi	r2,16384
   2571c:	10bfffc4 	addi	r2,r2,-1
   25720:	1884703a 	and	r2,r3,r2
   25724:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
   25728:	e0bff817 	ldw	r2,-32(fp)
   2572c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
   25730:	0005883a 	mov	r2,zero
}
   25734:	e037883a 	mov	sp,fp
   25738:	df000017 	ldw	fp,0(sp)
   2573c:	dec00104 	addi	sp,sp,4
   25740:	f800283a 	ret

00025744 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
   25744:	defff804 	addi	sp,sp,-32
   25748:	dfc00715 	stw	ra,28(sp)
   2574c:	df000615 	stw	fp,24(sp)
   25750:	df000604 	addi	fp,sp,24
   25754:	e13ffc15 	stw	r4,-16(fp)
   25758:	e17ffd15 	stw	r5,-12(fp)
   2575c:	e1bffe15 	stw	r6,-8(fp)
   25760:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   25764:	e0800317 	ldw	r2,12(fp)
   25768:	d8800115 	stw	r2,4(sp)
   2576c:	e0800217 	ldw	r2,8(fp)
   25770:	d8800015 	stw	r2,0(sp)
   25774:	e1ffff17 	ldw	r7,-4(fp)
   25778:	e1bffe17 	ldw	r6,-8(fp)
   2577c:	e17ffd17 	ldw	r5,-12(fp)
   25780:	e13ffc17 	ldw	r4,-16(fp)
   25784:	002550c0 	call	2550c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
   25788:	e037883a 	mov	sp,fp
   2578c:	dfc00117 	ldw	ra,4(sp)
   25790:	df000017 	ldw	fp,0(sp)
   25794:	dec00204 	addi	sp,sp,8
   25798:	f800283a 	ret

0002579c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
   2579c:	defff804 	addi	sp,sp,-32
   257a0:	dfc00715 	stw	ra,28(sp)
   257a4:	df000615 	stw	fp,24(sp)
   257a8:	df000604 	addi	fp,sp,24
   257ac:	e13ffc15 	stw	r4,-16(fp)
   257b0:	e17ffd15 	stw	r5,-12(fp)
   257b4:	e1bffe15 	stw	r6,-8(fp)
   257b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   257bc:	e0800217 	ldw	r2,8(fp)
   257c0:	d8800115 	stw	r2,4(sp)
   257c4:	e0bfff17 	ldw	r2,-4(fp)
   257c8:	d8800015 	stw	r2,0(sp)
   257cc:	e1fffe17 	ldw	r7,-8(fp)
   257d0:	000d883a 	mov	r6,zero
   257d4:	e17ffd17 	ldw	r5,-12(fp)
   257d8:	e13ffc17 	ldw	r4,-16(fp)
   257dc:	002550c0 	call	2550c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
   257e0:	e037883a 	mov	sp,fp
   257e4:	dfc00117 	ldw	ra,4(sp)
   257e8:	df000017 	ldw	fp,0(sp)
   257ec:	dec00204 	addi	sp,sp,8
   257f0:	f800283a 	ret

000257f4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
   257f4:	defff804 	addi	sp,sp,-32
   257f8:	dfc00715 	stw	ra,28(sp)
   257fc:	df000615 	stw	fp,24(sp)
   25800:	df000604 	addi	fp,sp,24
   25804:	e13ffc15 	stw	r4,-16(fp)
   25808:	e17ffd15 	stw	r5,-12(fp)
   2580c:	e1bffe15 	stw	r6,-8(fp)
   25810:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   25814:	e0800217 	ldw	r2,8(fp)
   25818:	d8800115 	stw	r2,4(sp)
   2581c:	e0bfff17 	ldw	r2,-4(fp)
   25820:	d8800015 	stw	r2,0(sp)
   25824:	000f883a 	mov	r7,zero
   25828:	e1bffe17 	ldw	r6,-8(fp)
   2582c:	e17ffd17 	ldw	r5,-12(fp)
   25830:	e13ffc17 	ldw	r4,-16(fp)
   25834:	002550c0 	call	2550c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
   25838:	e037883a 	mov	sp,fp
   2583c:	dfc00117 	ldw	ra,4(sp)
   25840:	df000017 	ldw	fp,0(sp)
   25844:	dec00204 	addi	sp,sp,8
   25848:	f800283a 	ret

0002584c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
   2584c:	deffee04 	addi	sp,sp,-72
   25850:	dfc01115 	stw	ra,68(sp)
   25854:	df001015 	stw	fp,64(sp)
   25858:	df001004 	addi	fp,sp,64
   2585c:	e13ff915 	stw	r4,-28(fp)
   25860:	e17ffa15 	stw	r5,-24(fp)
   25864:	e1bffb15 	stw	r6,-20(fp)
   25868:	e1fffc15 	stw	r7,-16(fp)
   2586c:	e1000417 	ldw	r4,16(fp)
   25870:	e0c00517 	ldw	r3,20(fp)
   25874:	e0800617 	ldw	r2,24(fp)
   25878:	e13ffd0d 	sth	r4,-12(fp)
   2587c:	e0fffe05 	stb	r3,-8(fp)
   25880:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
   25884:	e0bffd0b 	ldhu	r2,-12(fp)
   25888:	e0fffe03 	ldbu	r3,-8(fp)
   2588c:	e13fff0b 	ldhu	r4,-4(fp)
   25890:	d9000815 	stw	r4,32(sp)
   25894:	d8000715 	stw	zero,28(sp)
   25898:	d8c00615 	stw	r3,24(sp)
   2589c:	d8000515 	stw	zero,20(sp)
   258a0:	d8800415 	stw	r2,16(sp)
   258a4:	e0800317 	ldw	r2,12(fp)
   258a8:	d8800315 	stw	r2,12(sp)
   258ac:	e0800217 	ldw	r2,8(fp)
   258b0:	d8800215 	stw	r2,8(sp)
   258b4:	e0bffc17 	ldw	r2,-16(fp)
   258b8:	d8800115 	stw	r2,4(sp)
   258bc:	e0bffb17 	ldw	r2,-20(fp)
   258c0:	d8800015 	stw	r2,0(sp)
   258c4:	000f883a 	mov	r7,zero
   258c8:	000d883a 	mov	r6,zero
   258cc:	e17ffa17 	ldw	r5,-24(fp)
   258d0:	e13ff917 	ldw	r4,-28(fp)
   258d4:	00255b00 	call	255b0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
   258d8:	e037883a 	mov	sp,fp
   258dc:	dfc00117 	ldw	ra,4(sp)
   258e0:	df000017 	ldw	fp,0(sp)
   258e4:	dec00204 	addi	sp,sp,8
   258e8:	f800283a 	ret

000258ec <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
   258ec:	deffee04 	addi	sp,sp,-72
   258f0:	dfc01115 	stw	ra,68(sp)
   258f4:	df001015 	stw	fp,64(sp)
   258f8:	df001004 	addi	fp,sp,64
   258fc:	e13ff915 	stw	r4,-28(fp)
   25900:	e17ffa15 	stw	r5,-24(fp)
   25904:	e1bffb15 	stw	r6,-20(fp)
   25908:	e1fffc15 	stw	r7,-16(fp)
   2590c:	e1000417 	ldw	r4,16(fp)
   25910:	e0c00517 	ldw	r3,20(fp)
   25914:	e0800617 	ldw	r2,24(fp)
   25918:	e13ffd0d 	sth	r4,-12(fp)
   2591c:	e0fffe05 	stb	r3,-8(fp)
   25920:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
   25924:	e0bffd0b 	ldhu	r2,-12(fp)
   25928:	e0fffe03 	ldbu	r3,-8(fp)
   2592c:	e13fff0b 	ldhu	r4,-4(fp)
   25930:	d8000815 	stw	zero,32(sp)
   25934:	d9000715 	stw	r4,28(sp)
   25938:	d8000615 	stw	zero,24(sp)
   2593c:	d8c00515 	stw	r3,20(sp)
   25940:	d8800415 	stw	r2,16(sp)
   25944:	e0800317 	ldw	r2,12(fp)
   25948:	d8800315 	stw	r2,12(sp)
   2594c:	e0800217 	ldw	r2,8(fp)
   25950:	d8800215 	stw	r2,8(sp)
   25954:	d8000115 	stw	zero,4(sp)
   25958:	d8000015 	stw	zero,0(sp)
   2595c:	e1fffc17 	ldw	r7,-16(fp)
   25960:	e1bffb17 	ldw	r6,-20(fp)
   25964:	e17ffa17 	ldw	r5,-24(fp)
   25968:	e13ff917 	ldw	r4,-28(fp)
   2596c:	00255b00 	call	255b0 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
   25970:	e037883a 	mov	sp,fp
   25974:	dfc00117 	ldw	ra,4(sp)
   25978:	df000017 	ldw	fp,0(sp)
   2597c:	dec00204 	addi	sp,sp,8
   25980:	f800283a 	ret

00025984 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
   25984:	deffec04 	addi	sp,sp,-80
   25988:	dfc01315 	stw	ra,76(sp)
   2598c:	df001215 	stw	fp,72(sp)
   25990:	df001204 	addi	fp,sp,72
   25994:	e13ff715 	stw	r4,-36(fp)
   25998:	e17ff815 	stw	r5,-32(fp)
   2599c:	e1bff915 	stw	r6,-28(fp)
   259a0:	e1fffa15 	stw	r7,-24(fp)
   259a4:	e1800617 	ldw	r6,24(fp)
   259a8:	e1400717 	ldw	r5,28(fp)
   259ac:	e1000817 	ldw	r4,32(fp)
   259b0:	e0c00917 	ldw	r3,36(fp)
   259b4:	e0800a17 	ldw	r2,40(fp)
   259b8:	e1bffb0d 	sth	r6,-20(fp)
   259bc:	e17ffc05 	stb	r5,-16(fp)
   259c0:	e13ffd05 	stb	r4,-12(fp)
   259c4:	e0fffe0d 	sth	r3,-8(fp)
   259c8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
   259cc:	e0bffb0b 	ldhu	r2,-20(fp)
   259d0:	e0fffc03 	ldbu	r3,-16(fp)
   259d4:	e13ffd03 	ldbu	r4,-12(fp)
   259d8:	e17ffe0b 	ldhu	r5,-8(fp)
   259dc:	e1bfff0b 	ldhu	r6,-4(fp)
   259e0:	d9800815 	stw	r6,32(sp)
   259e4:	d9400715 	stw	r5,28(sp)
   259e8:	d9000615 	stw	r4,24(sp)
   259ec:	d8c00515 	stw	r3,20(sp)
   259f0:	d8800415 	stw	r2,16(sp)
   259f4:	e0800517 	ldw	r2,20(fp)
   259f8:	d8800315 	stw	r2,12(sp)
   259fc:	e0800417 	ldw	r2,16(fp)
   25a00:	d8800215 	stw	r2,8(sp)
   25a04:	e0800317 	ldw	r2,12(fp)
   25a08:	d8800115 	stw	r2,4(sp)
   25a0c:	e0800217 	ldw	r2,8(fp)
   25a10:	d8800015 	stw	r2,0(sp)
   25a14:	e1fffa17 	ldw	r7,-24(fp)
   25a18:	e1bff917 	ldw	r6,-28(fp)
   25a1c:	e17ff817 	ldw	r5,-32(fp)
   25a20:	e13ff717 	ldw	r4,-36(fp)
   25a24:	00255b00 	call	255b0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
   25a28:	e037883a 	mov	sp,fp
   25a2c:	dfc00117 	ldw	ra,4(sp)
   25a30:	df000017 	ldw	fp,0(sp)
   25a34:	dec00204 	addi	sp,sp,8
   25a38:	f800283a 	ret

00025a3c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
   25a3c:	defffc04 	addi	sp,sp,-16
   25a40:	df000315 	stw	fp,12(sp)
   25a44:	df000304 	addi	fp,sp,12
   25a48:	e13ffe15 	stw	r4,-8(fp)
   25a4c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
   25a50:	e0bfff17 	ldw	r2,-4(fp)
   25a54:	1000021e 	bne	r2,zero,25a60 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
   25a58:	00bffa84 	movi	r2,-22
   25a5c:	00002f06 	br	25b1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
   25a60:	e0bfff17 	ldw	r2,-4(fp)
   25a64:	10c00317 	ldw	r3,12(r2)
   25a68:	e0bfff17 	ldw	r2,-4(fp)
   25a6c:	18800226 	beq	r3,r2,25a78 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
   25a70:	00bffa84 	movi	r2,-22
   25a74:	00002906 	br	25b1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
   25a78:	e0bffe17 	ldw	r2,-8(fp)
   25a7c:	10800017 	ldw	r2,0(r2)
   25a80:	1000051e 	bne	r2,zero,25a98 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
   25a84:	e0bffe17 	ldw	r2,-8(fp)
   25a88:	e0ffff17 	ldw	r3,-4(fp)
   25a8c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
   25a90:	0005883a 	mov	r2,zero
   25a94:	00002106 	br	25b1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
   25a98:	e0bffe17 	ldw	r2,-8(fp)
   25a9c:	10c00017 	ldw	r3,0(r2)
   25aa0:	e0bfff17 	ldw	r2,-4(fp)
   25aa4:	1880021e 	bne	r3,r2,25ab0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
   25aa8:	00bffa84 	movi	r2,-22
   25aac:	00001b06 	br	25b1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
   25ab0:	e0bffe17 	ldw	r2,-8(fp)
   25ab4:	10800017 	ldw	r2,0(r2)
   25ab8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
   25abc:	00000906 	br	25ae4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
   25ac0:	e0bffd17 	ldw	r2,-12(fp)
   25ac4:	10c00317 	ldw	r3,12(r2)
   25ac8:	e0bfff17 	ldw	r2,-4(fp)
   25acc:	1880021e 	bne	r3,r2,25ad8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
   25ad0:	00bffa84 	movi	r2,-22
   25ad4:	00001106 	br	25b1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
   25ad8:	e0bffd17 	ldw	r2,-12(fp)
   25adc:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
   25ae0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
   25ae4:	e0bffd17 	ldw	r2,-12(fp)
   25ae8:	10800317 	ldw	r2,12(r2)
   25aec:	e0fffe17 	ldw	r3,-8(fp)
   25af0:	18c00017 	ldw	r3,0(r3)
   25af4:	10fff21e 	bne	r2,r3,25ac0 <__alt_data_end+0xfffecac0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
   25af8:	e0ffff17 	ldw	r3,-4(fp)
   25afc:	e0bffd17 	ldw	r2,-12(fp)
   25b00:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
   25b04:	e0bffe17 	ldw	r2,-8(fp)
   25b08:	10800017 	ldw	r2,0(r2)
   25b0c:	1007883a 	mov	r3,r2
   25b10:	e0bfff17 	ldw	r2,-4(fp)
   25b14:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
   25b18:	0005883a 	mov	r2,zero
}
   25b1c:	e037883a 	mov	sp,fp
   25b20:	df000017 	ldw	fp,0(sp)
   25b24:	dec00104 	addi	sp,sp,4
   25b28:	f800283a 	ret

00025b2c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
   25b2c:	defff804 	addi	sp,sp,-32
   25b30:	df000715 	stw	fp,28(sp)
   25b34:	df000704 	addi	fp,sp,28
   25b38:	e13ffe15 	stw	r4,-8(fp)
   25b3c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
   25b40:	e13fff17 	ldw	r4,-4(fp)
   25b44:	2000021e 	bne	r4,zero,25b50 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
   25b48:	00bffa84 	movi	r2,-22
   25b4c:	00005906 	br	25cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
   25b50:	e13fff17 	ldw	r4,-4(fp)
   25b54:	2015883a 	mov	r10,r4
   25b58:	0017883a 	mov	r11,zero
   25b5c:	e2bffc15 	stw	r10,-16(fp)
   25b60:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
   25b64:	e13fff17 	ldw	r4,-4(fp)
   25b68:	21400317 	ldw	r5,12(r4)
   25b6c:	e13ffc17 	ldw	r4,-16(fp)
   25b70:	29000626 	beq	r5,r4,25b8c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
   25b74:	e13fff17 	ldw	r4,-4(fp)
   25b78:	21400b17 	ldw	r5,44(r4)
   25b7c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
   25b80:	29000226 	beq	r5,r4,25b8c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
   25b84:	00bffa84 	movi	r2,-22
   25b88:	00004a06 	br	25cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
   25b8c:	e13ffe17 	ldw	r4,-8(fp)
   25b90:	21000017 	ldw	r4,0(r4)
   25b94:	2000051e 	bne	r4,zero,25bac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
   25b98:	e0bffe17 	ldw	r2,-8(fp)
   25b9c:	e0ffff17 	ldw	r3,-4(fp)
   25ba0:	10c00015 	stw	r3,0(r2)
		return 0;
   25ba4:	0005883a 	mov	r2,zero
   25ba8:	00004206 	br	25cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
   25bac:	e13ffe17 	ldw	r4,-8(fp)
   25bb0:	21400017 	ldw	r5,0(r4)
   25bb4:	e13fff17 	ldw	r4,-4(fp)
   25bb8:	2900021e 	bne	r5,r4,25bc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
   25bbc:	00bffa84 	movi	r2,-22
   25bc0:	00003c06 	br	25cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
   25bc4:	e13ffe17 	ldw	r4,-8(fp)
   25bc8:	21000017 	ldw	r4,0(r4)
   25bcc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
   25bd0:	e13ffe17 	ldw	r4,-8(fp)
   25bd4:	21000017 	ldw	r4,0(r4)
   25bd8:	2011883a 	mov	r8,r4
   25bdc:	0013883a 	mov	r9,zero
   25be0:	e23ffa15 	stw	r8,-24(fp)
   25be4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   25be8:	00001806 	br	25c4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
   25bec:	e13fff17 	ldw	r4,-4(fp)
   25bf0:	200d883a 	mov	r6,r4
   25bf4:	000f883a 	mov	r7,zero
   25bf8:	e1bffc15 	stw	r6,-16(fp)
   25bfc:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
   25c00:	e13ff917 	ldw	r4,-28(fp)
   25c04:	21400317 	ldw	r5,12(r4)
   25c08:	e13ffc17 	ldw	r4,-16(fp)
   25c0c:	2900061e 	bne	r5,r4,25c28 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
   25c10:	e13ff917 	ldw	r4,-28(fp)
   25c14:	21400b17 	ldw	r5,44(r4)
   25c18:	e13ffd17 	ldw	r4,-12(fp)
   25c1c:	2900021e 	bne	r5,r4,25c28 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
   25c20:	00bffa84 	movi	r2,-22
   25c24:	00002306 	br	25cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
   25c28:	e13ff917 	ldw	r4,-28(fp)
   25c2c:	21000317 	ldw	r4,12(r4)
   25c30:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
   25c34:	e13ff917 	ldw	r4,-28(fp)
   25c38:	21000b17 	ldw	r4,44(r4)
   25c3c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   25c40:	e13ffc17 	ldw	r4,-16(fp)
   25c44:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
   25c48:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   25c4c:	e13ff917 	ldw	r4,-28(fp)
   25c50:	21400317 	ldw	r5,12(r4)
   25c54:	e13ffa17 	ldw	r4,-24(fp)
   25c58:	29000426 	beq	r5,r4,25c6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   25c5c:	e13ff917 	ldw	r4,-28(fp)
   25c60:	21400b17 	ldw	r5,44(r4)
   25c64:	e13ffb17 	ldw	r4,-20(fp)
   25c68:	293fe01e 	bne	r5,r4,25bec <__alt_data_end+0xfffecbec>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
   25c6c:	e13fff17 	ldw	r4,-4(fp)
   25c70:	2005883a 	mov	r2,r4
   25c74:	0007883a 	mov	r3,zero
   25c78:	e0bffc15 	stw	r2,-16(fp)
   25c7c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
   25c80:	e0fffc17 	ldw	r3,-16(fp)
   25c84:	e0bff917 	ldw	r2,-28(fp)
   25c88:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
   25c8c:	e0fffd17 	ldw	r3,-12(fp)
   25c90:	e0bff917 	ldw	r2,-28(fp)
   25c94:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
   25c98:	e0fffa17 	ldw	r3,-24(fp)
   25c9c:	e0bfff17 	ldw	r2,-4(fp)
   25ca0:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
   25ca4:	e0fffb17 	ldw	r3,-20(fp)
   25ca8:	e0bfff17 	ldw	r2,-4(fp)
   25cac:	10c00b15 	stw	r3,44(r2)
	return 0;
   25cb0:	0005883a 	mov	r2,zero
}
   25cb4:	e037883a 	mov	sp,fp
   25cb8:	df000017 	ldw	fp,0(sp)
   25cbc:	dec00104 	addi	sp,sp,4
   25cc0:	f800283a 	ret

00025cc4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
   25cc4:	defffc04 	addi	sp,sp,-16
   25cc8:	df000315 	stw	fp,12(sp)
   25ccc:	df000304 	addi	fp,sp,12
   25cd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
   25cd4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
   25cd8:	e0bfff17 	ldw	r2,-4(fp)
   25cdc:	1000021e 	bne	r2,zero,25ce8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
   25ce0:	00bffa84 	movi	r2,-22
   25ce4:	00001906 	br	25d4c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
   25ce8:	e0bfff17 	ldw	r2,-4(fp)
   25cec:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   25cf0:	00000a06 	br	25d1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
   25cf4:	e0bffd17 	ldw	r2,-12(fp)
   25cf8:	10800717 	ldw	r2,28(r2)
   25cfc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   25d00:	e0bffe17 	ldw	r2,-8(fp)
   25d04:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
   25d08:	e0bffd17 	ldw	r2,-12(fp)
   25d0c:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
   25d10:	e0bffd17 	ldw	r2,-12(fp)
   25d14:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
   25d18:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   25d1c:	e0bffd17 	ldw	r2,-12(fp)
   25d20:	10c00317 	ldw	r3,12(r2)
   25d24:	e0bfff17 	ldw	r2,-4(fp)
   25d28:	18bff21e 	bne	r3,r2,25cf4 <__alt_data_end+0xfffeccf4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
   25d2c:	e0bffd17 	ldw	r2,-12(fp)
   25d30:	10800717 	ldw	r2,28(r2)
   25d34:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   25d38:	e0bffe17 	ldw	r2,-8(fp)
   25d3c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
   25d40:	e0bffd17 	ldw	r2,-12(fp)
   25d44:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
   25d48:	0005883a 	mov	r2,zero
}
   25d4c:	e037883a 	mov	sp,fp
   25d50:	df000017 	ldw	fp,0(sp)
   25d54:	dec00104 	addi	sp,sp,4
   25d58:	f800283a 	ret

00025d5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
   25d5c:	defff804 	addi	sp,sp,-32
   25d60:	df000715 	stw	fp,28(sp)
   25d64:	df000704 	addi	fp,sp,28
   25d68:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
   25d6c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
   25d70:	e13fff17 	ldw	r4,-4(fp)
   25d74:	2000021e 	bne	r4,zero,25d80 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
   25d78:	00bffa84 	movi	r2,-22
   25d7c:	00002806 	br	25e20 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
   25d80:	e13fff17 	ldw	r4,-4(fp)
   25d84:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
   25d88:	e13fff17 	ldw	r4,-4(fp)
   25d8c:	2005883a 	mov	r2,r4
   25d90:	0007883a 	mov	r3,zero
   25d94:	e0bffb15 	stw	r2,-20(fp)
   25d98:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   25d9c:	00001006 	br	25de0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
   25da0:	e0bff917 	ldw	r2,-28(fp)
   25da4:	10800f17 	ldw	r2,60(r2)
   25da8:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   25dac:	e0bffa17 	ldw	r2,-24(fp)
   25db0:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
   25db4:	e0bff917 	ldw	r2,-28(fp)
   25db8:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
   25dbc:	e0bff917 	ldw	r2,-28(fp)
   25dc0:	10800317 	ldw	r2,12(r2)
   25dc4:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
   25dc8:	e0bff917 	ldw	r2,-28(fp)
   25dcc:	10800b17 	ldw	r2,44(r2)
   25dd0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   25dd4:	e0bffd17 	ldw	r2,-12(fp)
   25dd8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
   25ddc:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   25de0:	e0bff917 	ldw	r2,-28(fp)
   25de4:	10c00317 	ldw	r3,12(r2)
   25de8:	e0bffb17 	ldw	r2,-20(fp)
   25dec:	18800426 	beq	r3,r2,25e00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   25df0:	e0bff917 	ldw	r2,-28(fp)
   25df4:	10c00b17 	ldw	r3,44(r2)
   25df8:	e0bffc17 	ldw	r2,-16(fp)
   25dfc:	18bfe81e 	bne	r3,r2,25da0 <__alt_data_end+0xfffecda0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
   25e00:	e0bff917 	ldw	r2,-28(fp)
   25e04:	10800f17 	ldw	r2,60(r2)
   25e08:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   25e0c:	e0bffa17 	ldw	r2,-24(fp)
   25e10:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
   25e14:	e0bff917 	ldw	r2,-28(fp)
   25e18:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
   25e1c:	0005883a 	mov	r2,zero
}
   25e20:	e037883a 	mov	sp,fp
   25e24:	df000017 	ldw	fp,0(sp)
   25e28:	dec00104 	addi	sp,sp,4
   25e2c:	f800283a 	ret

00025e30 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
   25e30:	deffef04 	addi	sp,sp,-68
   25e34:	df001015 	stw	fp,64(sp)
   25e38:	df001004 	addi	fp,sp,64
   25e3c:	e13ffb15 	stw	r4,-20(fp)
   25e40:	e17ffc15 	stw	r5,-16(fp)
   25e44:	e1bffd15 	stw	r6,-12(fp)
   25e48:	3807883a 	mov	r3,r7
   25e4c:	e0800117 	ldw	r2,4(fp)
   25e50:	e0fffe05 	stb	r3,-8(fp)
   25e54:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
   25e58:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
   25e5c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
   25e60:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
   25e64:	e0bffc17 	ldw	r2,-16(fp)
   25e68:	e0bff915 	stw	r2,-28(fp)
   25e6c:	e0bffd17 	ldw	r2,-12(fp)
   25e70:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
   25e74:	e0bffb17 	ldw	r2,-20(fp)
   25e78:	10800617 	ldw	r2,24(r2)
   25e7c:	10800037 	ldwio	r2,0(r2)
   25e80:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
   25e84:	e0bff017 	ldw	r2,-64(fp)
   25e88:	1080004c 	andi	r2,r2,1
   25e8c:	10000226 	beq	r2,zero,25e98 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
   25e90:	00bffc04 	movi	r2,-16
   25e94:	00009206 	br	260e0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   25e98:	00800804 	movi	r2,32
   25e9c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25ea0:	0005303a 	rdctl	r2,status
   25ea4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ea8:	e0fff517 	ldw	r3,-44(fp)
   25eac:	00bfff84 	movi	r2,-2
   25eb0:	1884703a 	and	r2,r3,r2
   25eb4:	1001703a 	wrctl	status,r2
  
  return context;
   25eb8:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
   25ebc:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   25ec0:	e0bffb17 	ldw	r2,-20(fp)
   25ec4:	10800317 	ldw	r2,12(r2)
   25ec8:	10800104 	addi	r2,r2,4
   25ecc:	e0fff117 	ldw	r3,-60(fp)
   25ed0:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
   25ed4:	e0bffb17 	ldw	r2,-20(fp)
   25ed8:	10800317 	ldw	r2,12(r2)
   25edc:	e0fffb17 	ldw	r3,-20(fp)
   25ee0:	18c00317 	ldw	r3,12(r3)
   25ee4:	18c00037 	ldwio	r3,0(r3)
   25ee8:	10c00035 	stwio	r3,0(r2)
   25eec:	e0bff217 	ldw	r2,-56(fp)
   25ef0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25ef4:	e0bff317 	ldw	r2,-52(fp)
   25ef8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
   25efc:	e0bffb17 	ldw	r2,-20(fp)
   25f00:	10800b17 	ldw	r2,44(r2)
   25f04:	10002326 	beq	r2,zero,25f94 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
   25f08:	e0bffb17 	ldw	r2,-20(fp)
   25f0c:	10c00d17 	ldw	r3,52(r2)
   25f10:	e0bff117 	ldw	r2,-60(fp)
   25f14:	1884b03a 	or	r2,r3,r2
   25f18:	10800514 	ori	r2,r2,20
   25f1c:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   25f20:	e0fff117 	ldw	r3,-60(fp)
   25f24:	00bff7c4 	movi	r2,-33
   25f28:	1884703a 	and	r2,r3,r2
   25f2c:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
   25f30:	e0bff017 	ldw	r2,-64(fp)
   25f34:	10800214 	ori	r2,r2,8
   25f38:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25f3c:	0005303a 	rdctl	r2,status
   25f40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25f44:	e0fff717 	ldw	r3,-36(fp)
   25f48:	00bfff84 	movi	r2,-2
   25f4c:	1884703a 	and	r2,r3,r2
   25f50:	1001703a 	wrctl	status,r2
  
  return context;
   25f54:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
   25f58:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   25f5c:	e0bffb17 	ldw	r2,-20(fp)
   25f60:	10800317 	ldw	r2,12(r2)
   25f64:	10800104 	addi	r2,r2,4
   25f68:	e0fff117 	ldw	r3,-60(fp)
   25f6c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   25f70:	e0bffb17 	ldw	r2,-20(fp)
   25f74:	10800617 	ldw	r2,24(r2)
   25f78:	e0fff017 	ldw	r3,-64(fp)
   25f7c:	10c00035 	stwio	r3,0(r2)
   25f80:	e0bff217 	ldw	r2,-56(fp)
   25f84:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f88:	e0bff417 	ldw	r2,-48(fp)
   25f8c:	1001703a 	wrctl	status,r2
   25f90:	00002306 	br	26020 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
   25f94:	e0bffb17 	ldw	r2,-20(fp)
   25f98:	10c00d17 	ldw	r3,52(r2)
   25f9c:	e0bff117 	ldw	r2,-60(fp)
   25fa0:	1884b03a 	or	r2,r3,r2
   25fa4:	10800114 	ori	r2,r2,4
   25fa8:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
   25fac:	e0fff117 	ldw	r3,-60(fp)
   25fb0:	00bff3c4 	movi	r2,-49
   25fb4:	1884703a 	and	r2,r3,r2
   25fb8:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
   25fbc:	e0fff017 	ldw	r3,-64(fp)
   25fc0:	00bffdc4 	movi	r2,-9
   25fc4:	1884703a 	and	r2,r3,r2
   25fc8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25fcc:	0005303a 	rdctl	r2,status
   25fd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25fd4:	e0fff817 	ldw	r3,-32(fp)
   25fd8:	00bfff84 	movi	r2,-2
   25fdc:	1884703a 	and	r2,r3,r2
   25fe0:	1001703a 	wrctl	status,r2
  
  return context;
   25fe4:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
   25fe8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   25fec:	e0bffb17 	ldw	r2,-20(fp)
   25ff0:	10800317 	ldw	r2,12(r2)
   25ff4:	10800104 	addi	r2,r2,4
   25ff8:	e0fff117 	ldw	r3,-60(fp)
   25ffc:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   26000:	e0bffb17 	ldw	r2,-20(fp)
   26004:	10800617 	ldw	r2,24(r2)
   26008:	e0fff017 	ldw	r3,-64(fp)
   2600c:	10c00035 	stwio	r3,0(r2)
   26010:	e0bff217 	ldw	r2,-56(fp)
   26014:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26018:	e0bff617 	ldw	r2,-40(fp)
   2601c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
   26020:	e0bffb17 	ldw	r2,-20(fp)
   26024:	10800617 	ldw	r2,24(r2)
   26028:	10800104 	addi	r2,r2,4
   2602c:	e0fff917 	ldw	r3,-28(fp)
   26030:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
   26034:	e0bffb17 	ldw	r2,-20(fp)
   26038:	10800617 	ldw	r2,24(r2)
   2603c:	10800204 	addi	r2,r2,8
   26040:	e0fffa17 	ldw	r3,-24(fp)
   26044:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
   26048:	e0bffe03 	ldbu	r2,-8(fp)
   2604c:	10000426 	beq	r2,zero,26060 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
   26050:	e0bff017 	ldw	r2,-64(fp)
   26054:	10800414 	ori	r2,r2,16
   26058:	e0bff015 	stw	r2,-64(fp)
   2605c:	00000406 	br	26070 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
   26060:	e0fff017 	ldw	r3,-64(fp)
   26064:	00bffbc4 	movi	r2,-17
   26068:	1884703a 	and	r2,r3,r2
   2606c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
   26070:	e0bfff03 	ldbu	r2,-4(fp)
   26074:	10000e26 	beq	r2,zero,260b0 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
   26078:	e0bff017 	ldw	r2,-64(fp)
   2607c:	10800094 	ori	r2,r2,2
   26080:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   26084:	e0bffb17 	ldw	r2,-20(fp)
   26088:	10800617 	ldw	r2,24(r2)
   2608c:	10800304 	addi	r2,r2,12
   26090:	10800037 	ldwio	r2,0(r2)
   26094:	10000a1e 	bne	r2,zero,260c0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   26098:	e0bffb17 	ldw	r2,-20(fp)
   2609c:	10800617 	ldw	r2,24(r2)
   260a0:	10800304 	addi	r2,r2,12
   260a4:	00c03fc4 	movi	r3,255
   260a8:	10c00035 	stwio	r3,0(r2)
   260ac:	00000406 	br	260c0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
   260b0:	e0fff017 	ldw	r3,-64(fp)
   260b4:	00bfff44 	movi	r2,-3
   260b8:	1884703a 	and	r2,r3,r2
   260bc:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
   260c0:	e0bff017 	ldw	r2,-64(fp)
   260c4:	10800054 	ori	r2,r2,1
   260c8:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   260cc:	e0bffb17 	ldw	r2,-20(fp)
   260d0:	10800617 	ldw	r2,24(r2)
   260d4:	e0fff017 	ldw	r3,-64(fp)
   260d8:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
   260dc:	0005883a 	mov	r2,zero
}
   260e0:	e037883a 	mov	sp,fp
   260e4:	df000017 	ldw	fp,0(sp)
   260e8:	dec00104 	addi	sp,sp,4
   260ec:	f800283a 	ret

000260f0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
   260f0:	defff704 	addi	sp,sp,-36
   260f4:	dfc00815 	stw	ra,32(sp)
   260f8:	df000715 	stw	fp,28(sp)
   260fc:	dc400615 	stw	r17,24(sp)
   26100:	dc000515 	stw	r16,20(sp)
   26104:	df000704 	addi	fp,sp,28
   26108:	e13ffa15 	stw	r4,-24(fp)
   2610c:	e17ffb15 	stw	r5,-20(fp)
   26110:	3007883a 	mov	r3,r6
   26114:	3805883a 	mov	r2,r7
   26118:	e0fffc05 	stb	r3,-16(fp)
   2611c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
   26120:	e13ffb17 	ldw	r4,-20(fp)
   26124:	0025cc40 	call	25cc4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
   26128:	10000226 	beq	r2,zero,26134 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
   2612c:	00bffa84 	movi	r2,-22
   26130:	00000b06 	br	26160 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
   26134:	e0bffb17 	ldw	r2,-20(fp)
   26138:	1021883a 	mov	r16,r2
   2613c:	0023883a 	mov	r17,zero
   26140:	e0fffc03 	ldbu	r3,-16(fp)
   26144:	e0bffd03 	ldbu	r2,-12(fp)
   26148:	d8800015 	stw	r2,0(sp)
   2614c:	180f883a 	mov	r7,r3
   26150:	800b883a 	mov	r5,r16
   26154:	880d883a 	mov	r6,r17
   26158:	e13ffa17 	ldw	r4,-24(fp)
   2615c:	0025e300 	call	25e30 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
   26160:	e6fffe04 	addi	sp,fp,-8
   26164:	dfc00317 	ldw	ra,12(sp)
   26168:	df000217 	ldw	fp,8(sp)
   2616c:	dc400117 	ldw	r17,4(sp)
   26170:	dc000017 	ldw	r16,0(sp)
   26174:	dec00404 	addi	sp,sp,16
   26178:	f800283a 	ret

0002617c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
   2617c:	defff704 	addi	sp,sp,-36
   26180:	dfc00815 	stw	ra,32(sp)
   26184:	df000715 	stw	fp,28(sp)
   26188:	dc400615 	stw	r17,24(sp)
   2618c:	dc000515 	stw	r16,20(sp)
   26190:	df000704 	addi	fp,sp,28
   26194:	e13ffa15 	stw	r4,-24(fp)
   26198:	e17ffb15 	stw	r5,-20(fp)
   2619c:	3007883a 	mov	r3,r6
   261a0:	3805883a 	mov	r2,r7
   261a4:	e0fffc05 	stb	r3,-16(fp)
   261a8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
   261ac:	e13ffb17 	ldw	r4,-20(fp)
   261b0:	0025d5c0 	call	25d5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
   261b4:	10000226 	beq	r2,zero,261c0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
   261b8:	00bffa84 	movi	r2,-22
   261bc:	00000b06 	br	261ec <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
   261c0:	e0bffb17 	ldw	r2,-20(fp)
   261c4:	1021883a 	mov	r16,r2
   261c8:	0023883a 	mov	r17,zero
   261cc:	e0fffc03 	ldbu	r3,-16(fp)
   261d0:	e0bffd03 	ldbu	r2,-12(fp)
   261d4:	d8800015 	stw	r2,0(sp)
   261d8:	180f883a 	mov	r7,r3
   261dc:	800b883a 	mov	r5,r16
   261e0:	880d883a 	mov	r6,r17
   261e4:	e13ffa17 	ldw	r4,-24(fp)
   261e8:	0025e300 	call	25e30 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
   261ec:	e6fffe04 	addi	sp,fp,-8
   261f0:	dfc00317 	ldw	ra,12(sp)
   261f4:	df000217 	ldw	fp,8(sp)
   261f8:	dc400117 	ldw	r17,4(sp)
   261fc:	dc000017 	ldw	r16,0(sp)
   26200:	dec00404 	addi	sp,sp,16
   26204:	f800283a 	ret

00026208 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
   26208:	defffc04 	addi	sp,sp,-16
   2620c:	dfc00315 	stw	ra,12(sp)
   26210:	df000215 	stw	fp,8(sp)
   26214:	df000204 	addi	fp,sp,8
   26218:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
   2621c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
   26220:	d1600b04 	addi	r5,gp,-32724
   26224:	e13fff17 	ldw	r4,-4(fp)
   26228:	00269540 	call	26954 <alt_find_dev>
   2622c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
   26230:	e0bffe17 	ldw	r2,-8(fp)
   26234:	1000041e 	bne	r2,zero,26248 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
   26238:	00246940 	call	24694 <alt_get_errno>
   2623c:	1007883a 	mov	r3,r2
   26240:	008004c4 	movi	r2,19
   26244:	18800015 	stw	r2,0(r3)
    }

    return dev;
   26248:	e0bffe17 	ldw	r2,-8(fp)
}
   2624c:	e037883a 	mov	sp,fp
   26250:	dfc00117 	ldw	ra,4(sp)
   26254:	df000017 	ldw	fp,0(sp)
   26258:	dec00204 	addi	sp,sp,8
   2625c:	f800283a 	ret

00026260 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   26260:	defff804 	addi	sp,sp,-32
   26264:	dfc00715 	stw	ra,28(sp)
   26268:	df000615 	stw	fp,24(sp)
   2626c:	df000604 	addi	fp,sp,24
   26270:	e13ffd15 	stw	r4,-12(fp)
   26274:	e17ffe15 	stw	r5,-8(fp)
   26278:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
   2627c:	e0bffd17 	ldw	r2,-12(fp)
   26280:	10801783 	ldbu	r2,94(r2)
   26284:	10803fcc 	andi	r2,r2,255
   26288:	10000b26 	beq	r2,zero,262b8 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
   2628c:	e0bffd17 	ldw	r2,-12(fp)
   26290:	10800617 	ldw	r2,24(r2)
   26294:	00c00104 	movi	r3,4
   26298:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
   2629c:	0001883a 	nop
   262a0:	e0bffd17 	ldw	r2,-12(fp)
   262a4:	10800617 	ldw	r2,24(r2)
   262a8:	10800037 	ldwio	r2,0(r2)
   262ac:	1080010c 	andi	r2,r2,4
   262b0:	1005d0ba 	srai	r2,r2,2
   262b4:	103ffa1e 	bne	r2,zero,262a0 <__alt_data_end+0xfffed2a0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
   262b8:	e0bffd17 	ldw	r2,-12(fp)
   262bc:	10800317 	ldw	r2,12(r2)
   262c0:	10800104 	addi	r2,r2,4
   262c4:	00c00084 	movi	r3,2
   262c8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   262cc:	0001883a 	nop
   262d0:	e0bffd17 	ldw	r2,-12(fp)
   262d4:	10800317 	ldw	r2,12(r2)
   262d8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
   262dc:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   262e0:	103ffb1e 	bne	r2,zero,262d0 <__alt_data_end+0xfffed2d0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   262e4:	e0bffd17 	ldw	r2,-12(fp)
   262e8:	10800317 	ldw	r2,12(r2)
   262ec:	10800104 	addi	r2,r2,4
   262f0:	10800037 	ldwio	r2,0(r2)
   262f4:	1007883a 	mov	r3,r2
   262f8:	00bffbc4 	movi	r2,-17
   262fc:	1884703a 	and	r2,r3,r2
   26300:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   26304:	e0bffb17 	ldw	r2,-20(fp)
   26308:	10800814 	ori	r2,r2,32
   2630c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   26310:	e0bffd17 	ldw	r2,-12(fp)
   26314:	10800317 	ldw	r2,12(r2)
   26318:	10800104 	addi	r2,r2,4
   2631c:	e0fffb17 	ldw	r3,-20(fp)
   26320:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
   26324:	e0bffd17 	ldw	r2,-12(fp)
   26328:	10800317 	ldw	r2,12(r2)
   2632c:	e0fffd17 	ldw	r3,-12(fp)
   26330:	18c00317 	ldw	r3,12(r3)
   26334:	18c00037 	ldwio	r3,0(r3)
   26338:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
   2633c:	e0bffd17 	ldw	r2,-12(fp)
   26340:	10801783 	ldbu	r2,94(r2)
   26344:	10803fcc 	andi	r2,r2,255
   26348:	10000826 	beq	r2,zero,2636c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
   2634c:	e0bffd17 	ldw	r2,-12(fp)
   26350:	10800617 	ldw	r2,24(r2)
   26354:	10800404 	addi	r2,r2,16
   26358:	e0fffd17 	ldw	r3,-12(fp)
   2635c:	18c00617 	ldw	r3,24(r3)
   26360:	18c00404 	addi	r3,r3,16
   26364:	18c00037 	ldwio	r3,0(r3)
   26368:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
   2636c:	d1600b04 	addi	r5,gp,-32724
   26370:	e13ffd17 	ldw	r4,-12(fp)
   26374:	00267f00 	call	267f0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   26378:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   2637c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
   26380:	e0bffc17 	ldw	r2,-16(fp)
   26384:	1000081e 	bne	r2,zero,263a8 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
   26388:	d8000015 	stw	zero,0(sp)
   2638c:	e1fffd17 	ldw	r7,-12(fp)
   26390:	018000b4 	movhi	r6,2
   26394:	31922404 	addi	r6,r6,18576
   26398:	e17fff17 	ldw	r5,-4(fp)
   2639c:	e13ffe17 	ldw	r4,-8(fp)
   263a0:	0026a040 	call	26a04 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
   263a4:	00000406 	br	263b8 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   263a8:	010000b4 	movhi	r4,2
   263ac:	211fec04 	addi	r4,r4,32688
   263b0:	00270880 	call	27088 <alt_printf>
    }
    
    return;
   263b4:	0001883a 	nop

}
   263b8:	e037883a 	mov	sp,fp
   263bc:	dfc00117 	ldw	ra,4(sp)
   263c0:	df000017 	ldw	fp,0(sp)
   263c4:	dec00204 	addi	sp,sp,8
   263c8:	f800283a 	ret

000263cc <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
   263cc:	defffb04 	addi	sp,sp,-20
   263d0:	df000415 	stw	fp,16(sp)
   263d4:	df000404 	addi	fp,sp,16
   263d8:	e13ffc15 	stw	r4,-16(fp)
   263dc:	e17ffd15 	stw	r5,-12(fp)
   263e0:	e1bffe15 	stw	r6,-8(fp)
   263e4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   263e8:	e0bffc17 	ldw	r2,-16(fp)
   263ec:	e0fffd17 	ldw	r3,-12(fp)
   263f0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
   263f4:	e0bffc17 	ldw	r2,-16(fp)
   263f8:	e0ffff17 	ldw	r3,-4(fp)
   263fc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
   26400:	e0bffc17 	ldw	r2,-16(fp)
   26404:	e0fffe17 	ldw	r3,-8(fp)
   26408:	10c00d15 	stw	r3,52(r2)

    return ;
   2640c:	0001883a 	nop
}
   26410:	e037883a 	mov	sp,fp
   26414:	df000017 	ldw	fp,0(sp)
   26418:	dec00104 	addi	sp,sp,4
   2641c:	f800283a 	ret

00026420 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
   26420:	defffc04 	addi	sp,sp,-16
   26424:	dfc00315 	stw	ra,12(sp)
   26428:	df000215 	stw	fp,8(sp)
   2642c:	df000204 	addi	fp,sp,8
   26430:	e13ffe15 	stw	r4,-8(fp)
   26434:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
   26438:	000d883a 	mov	r6,zero
   2643c:	e17fff17 	ldw	r5,-4(fp)
   26440:	e13ffe17 	ldw	r4,-8(fp)
   26444:	0024bf40 	call	24bf4 <alt_msgdma_descriptor_async_transfer>

}
   26448:	e037883a 	mov	sp,fp
   2644c:	dfc00117 	ldw	ra,4(sp)
   26450:	df000017 	ldw	fp,0(sp)
   26454:	dec00204 	addi	sp,sp,8
   26458:	f800283a 	ret

0002645c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
   2645c:	defffc04 	addi	sp,sp,-16
   26460:	dfc00315 	stw	ra,12(sp)
   26464:	df000215 	stw	fp,8(sp)
   26468:	df000204 	addi	fp,sp,8
   2646c:	e13ffe15 	stw	r4,-8(fp)
   26470:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
   26474:	e1bfff17 	ldw	r6,-4(fp)
   26478:	000b883a 	mov	r5,zero
   2647c:	e13ffe17 	ldw	r4,-8(fp)
   26480:	0024bf40 	call	24bf4 <alt_msgdma_descriptor_async_transfer>
}
   26484:	e037883a 	mov	sp,fp
   26488:	dfc00117 	ldw	ra,4(sp)
   2648c:	df000017 	ldw	fp,0(sp)
   26490:	dec00204 	addi	sp,sp,8
   26494:	f800283a 	ret

00026498 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
   26498:	defffc04 	addi	sp,sp,-16
   2649c:	dfc00315 	stw	ra,12(sp)
   264a0:	df000215 	stw	fp,8(sp)
   264a4:	df000204 	addi	fp,sp,8
   264a8:	e13ffe15 	stw	r4,-8(fp)
   264ac:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
   264b0:	000d883a 	mov	r6,zero
   264b4:	e17fff17 	ldw	r5,-4(fp)
   264b8:	e13ffe17 	ldw	r4,-8(fp)
   264bc:	0024ec40 	call	24ec4 <alt_msgdma_descriptor_sync_transfer>
}
   264c0:	e037883a 	mov	sp,fp
   264c4:	dfc00117 	ldw	ra,4(sp)
   264c8:	df000017 	ldw	fp,0(sp)
   264cc:	dec00204 	addi	sp,sp,8
   264d0:	f800283a 	ret

000264d4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
   264d4:	defffc04 	addi	sp,sp,-16
   264d8:	dfc00315 	stw	ra,12(sp)
   264dc:	df000215 	stw	fp,8(sp)
   264e0:	df000204 	addi	fp,sp,8
   264e4:	e13ffe15 	stw	r4,-8(fp)
   264e8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
   264ec:	e1bfff17 	ldw	r6,-4(fp)
   264f0:	000b883a 	mov	r5,zero
   264f4:	e13ffe17 	ldw	r4,-8(fp)
   264f8:	0024ec40 	call	24ec4 <alt_msgdma_descriptor_sync_transfer>
}
   264fc:	e037883a 	mov	sp,fp
   26500:	dfc00117 	ldw	ra,4(sp)
   26504:	df000017 	ldw	fp,0(sp)
   26508:	dec00204 	addi	sp,sp,8
   2650c:	f800283a 	ret

00026510 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   26510:	defff504 	addi	sp,sp,-44
   26514:	df000a15 	stw	fp,40(sp)
   26518:	df000a04 	addi	fp,sp,40
   2651c:	e13ffc15 	stw	r4,-16(fp)
   26520:	e17ffd15 	stw	r5,-12(fp)
   26524:	e1bffe15 	stw	r6,-8(fp)
   26528:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2652c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   26530:	d0a6d017 	ldw	r2,-25792(gp)
  
  if (alt_ticks_per_second ())
   26534:	10003c26 	beq	r2,zero,26628 <alt_alarm_start+0x118>
  {
    if (alarm)
   26538:	e0bffc17 	ldw	r2,-16(fp)
   2653c:	10003826 	beq	r2,zero,26620 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   26540:	e0bffc17 	ldw	r2,-16(fp)
   26544:	e0fffe17 	ldw	r3,-8(fp)
   26548:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2654c:	e0bffc17 	ldw	r2,-16(fp)
   26550:	e0ffff17 	ldw	r3,-4(fp)
   26554:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26558:	0005303a 	rdctl	r2,status
   2655c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26560:	e0fff917 	ldw	r3,-28(fp)
   26564:	00bfff84 	movi	r2,-2
   26568:	1884703a 	and	r2,r3,r2
   2656c:	1001703a 	wrctl	status,r2
  
  return context;
   26570:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   26574:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   26578:	d0a6d117 	ldw	r2,-25788(gp)
      
      current_nticks = alt_nticks();
   2657c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   26580:	e0fffd17 	ldw	r3,-12(fp)
   26584:	e0bff617 	ldw	r2,-40(fp)
   26588:	1885883a 	add	r2,r3,r2
   2658c:	10c00044 	addi	r3,r2,1
   26590:	e0bffc17 	ldw	r2,-16(fp)
   26594:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   26598:	e0bffc17 	ldw	r2,-16(fp)
   2659c:	10c00217 	ldw	r3,8(r2)
   265a0:	e0bff617 	ldw	r2,-40(fp)
   265a4:	1880042e 	bgeu	r3,r2,265b8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   265a8:	e0bffc17 	ldw	r2,-16(fp)
   265ac:	00c00044 	movi	r3,1
   265b0:	10c00405 	stb	r3,16(r2)
   265b4:	00000206 	br	265c0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   265b8:	e0bffc17 	ldw	r2,-16(fp)
   265bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   265c0:	e0bffc17 	ldw	r2,-16(fp)
   265c4:	d0e00e04 	addi	r3,gp,-32712
   265c8:	e0fffa15 	stw	r3,-24(fp)
   265cc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   265d0:	e0bffb17 	ldw	r2,-20(fp)
   265d4:	e0fffa17 	ldw	r3,-24(fp)
   265d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   265dc:	e0bffa17 	ldw	r2,-24(fp)
   265e0:	10c00017 	ldw	r3,0(r2)
   265e4:	e0bffb17 	ldw	r2,-20(fp)
   265e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   265ec:	e0bffa17 	ldw	r2,-24(fp)
   265f0:	10800017 	ldw	r2,0(r2)
   265f4:	e0fffb17 	ldw	r3,-20(fp)
   265f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   265fc:	e0bffa17 	ldw	r2,-24(fp)
   26600:	e0fffb17 	ldw	r3,-20(fp)
   26604:	10c00015 	stw	r3,0(r2)
   26608:	e0bff817 	ldw	r2,-32(fp)
   2660c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26610:	e0bff717 	ldw	r2,-36(fp)
   26614:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   26618:	0005883a 	mov	r2,zero
   2661c:	00000306 	br	2662c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   26620:	00bffa84 	movi	r2,-22
   26624:	00000106 	br	2662c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   26628:	00bfde84 	movi	r2,-134
  }
}
   2662c:	e037883a 	mov	sp,fp
   26630:	df000017 	ldw	fp,0(sp)
   26634:	dec00104 	addi	sp,sp,4
   26638:	f800283a 	ret

0002663c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2663c:	defffa04 	addi	sp,sp,-24
   26640:	dfc00515 	stw	ra,20(sp)
   26644:	df000415 	stw	fp,16(sp)
   26648:	df000404 	addi	fp,sp,16
   2664c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   26650:	00800244 	movi	r2,9
   26654:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   26658:	014003f4 	movhi	r5,15
   2665c:	29509004 	addi	r5,r5,16960
   26660:	e13ffd17 	ldw	r4,-12(fp)
   26664:	00230840 	call	23084 <__mulsi3>
   26668:	100b883a 	mov	r5,r2
   2666c:	0100bef4 	movhi	r4,763
   26670:	213c2004 	addi	r4,r4,-3968
   26674:	0022fc80 	call	22fc8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   26678:	100b883a 	mov	r5,r2
   2667c:	01200034 	movhi	r4,32768
   26680:	213fffc4 	addi	r4,r4,-1
   26684:	0022fc80 	call	22fc8 <__udivsi3>
   26688:	100b883a 	mov	r5,r2
   2668c:	e13fff17 	ldw	r4,-4(fp)
   26690:	0022fc80 	call	22fc8 <__udivsi3>
   26694:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   26698:	e0bffe17 	ldw	r2,-8(fp)
   2669c:	10002a26 	beq	r2,zero,26748 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   266a0:	e03ffc15 	stw	zero,-16(fp)
   266a4:	00001706 	br	26704 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   266a8:	00a00034 	movhi	r2,32768
   266ac:	10bfffc4 	addi	r2,r2,-1
   266b0:	10bfffc4 	addi	r2,r2,-1
   266b4:	103ffe1e 	bne	r2,zero,266b0 <__alt_data_end+0xfffed6b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   266b8:	014003f4 	movhi	r5,15
   266bc:	29509004 	addi	r5,r5,16960
   266c0:	e13ffd17 	ldw	r4,-12(fp)
   266c4:	00230840 	call	23084 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   266c8:	100b883a 	mov	r5,r2
   266cc:	0100bef4 	movhi	r4,763
   266d0:	213c2004 	addi	r4,r4,-3968
   266d4:	0022fc80 	call	22fc8 <__udivsi3>
   266d8:	100b883a 	mov	r5,r2
   266dc:	01200034 	movhi	r4,32768
   266e0:	213fffc4 	addi	r4,r4,-1
   266e4:	0022fc80 	call	22fc8 <__udivsi3>
   266e8:	1007883a 	mov	r3,r2
   266ec:	e0bfff17 	ldw	r2,-4(fp)
   266f0:	10c5c83a 	sub	r2,r2,r3
   266f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   266f8:	e0bffc17 	ldw	r2,-16(fp)
   266fc:	10800044 	addi	r2,r2,1
   26700:	e0bffc15 	stw	r2,-16(fp)
   26704:	e0fffc17 	ldw	r3,-16(fp)
   26708:	e0bffe17 	ldw	r2,-8(fp)
   2670c:	18bfe616 	blt	r3,r2,266a8 <__alt_data_end+0xfffed6a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   26710:	014003f4 	movhi	r5,15
   26714:	29509004 	addi	r5,r5,16960
   26718:	e13ffd17 	ldw	r4,-12(fp)
   2671c:	00230840 	call	23084 <__mulsi3>
   26720:	100b883a 	mov	r5,r2
   26724:	0100bef4 	movhi	r4,763
   26728:	213c2004 	addi	r4,r4,-3968
   2672c:	0022fc80 	call	22fc8 <__udivsi3>
   26730:	e17fff17 	ldw	r5,-4(fp)
   26734:	1009883a 	mov	r4,r2
   26738:	00230840 	call	23084 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2673c:	10bfffc4 	addi	r2,r2,-1
   26740:	103ffe1e 	bne	r2,zero,2673c <__alt_data_end+0xfffed73c>
   26744:	00000d06 	br	2677c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   26748:	014003f4 	movhi	r5,15
   2674c:	29509004 	addi	r5,r5,16960
   26750:	e13ffd17 	ldw	r4,-12(fp)
   26754:	00230840 	call	23084 <__mulsi3>
   26758:	100b883a 	mov	r5,r2
   2675c:	0100bef4 	movhi	r4,763
   26760:	213c2004 	addi	r4,r4,-3968
   26764:	0022fc80 	call	22fc8 <__udivsi3>
   26768:	e17fff17 	ldw	r5,-4(fp)
   2676c:	1009883a 	mov	r4,r2
   26770:	00230840 	call	23084 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   26774:	10bfffc4 	addi	r2,r2,-1
   26778:	00bffe16 	blt	zero,r2,26774 <__alt_data_end+0xfffed774>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2677c:	0005883a 	mov	r2,zero
}
   26780:	e037883a 	mov	sp,fp
   26784:	dfc00117 	ldw	ra,4(sp)
   26788:	df000017 	ldw	fp,0(sp)
   2678c:	dec00204 	addi	sp,sp,8
   26790:	f800283a 	ret

00026794 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   26794:	deffff04 	addi	sp,sp,-4
   26798:	df000015 	stw	fp,0(sp)
   2679c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   267a0:	0001883a 	nop
   267a4:	e037883a 	mov	sp,fp
   267a8:	df000017 	ldw	fp,0(sp)
   267ac:	dec00104 	addi	sp,sp,4
   267b0:	f800283a 	ret

000267b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   267b4:	defffe04 	addi	sp,sp,-8
   267b8:	dfc00115 	stw	ra,4(sp)
   267bc:	df000015 	stw	fp,0(sp)
   267c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   267c4:	d0a00917 	ldw	r2,-32732(gp)
   267c8:	10000326 	beq	r2,zero,267d8 <alt_get_errno+0x24>
   267cc:	d0a00917 	ldw	r2,-32732(gp)
   267d0:	103ee83a 	callr	r2
   267d4:	00000106 	br	267dc <alt_get_errno+0x28>
   267d8:	d0a6cb04 	addi	r2,gp,-25812
}
   267dc:	e037883a 	mov	sp,fp
   267e0:	dfc00117 	ldw	ra,4(sp)
   267e4:	df000017 	ldw	fp,0(sp)
   267e8:	dec00204 	addi	sp,sp,8
   267ec:	f800283a 	ret

000267f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   267f0:	defffa04 	addi	sp,sp,-24
   267f4:	dfc00515 	stw	ra,20(sp)
   267f8:	df000415 	stw	fp,16(sp)
   267fc:	df000404 	addi	fp,sp,16
   26800:	e13ffe15 	stw	r4,-8(fp)
   26804:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   26808:	e0bffe17 	ldw	r2,-8(fp)
   2680c:	10000326 	beq	r2,zero,2681c <alt_dev_llist_insert+0x2c>
   26810:	e0bffe17 	ldw	r2,-8(fp)
   26814:	10800217 	ldw	r2,8(r2)
   26818:	1000061e 	bne	r2,zero,26834 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2681c:	00267b40 	call	267b4 <alt_get_errno>
   26820:	1007883a 	mov	r3,r2
   26824:	00800584 	movi	r2,22
   26828:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2682c:	00bffa84 	movi	r2,-22
   26830:	00001306 	br	26880 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   26834:	e0bffe17 	ldw	r2,-8(fp)
   26838:	e0ffff17 	ldw	r3,-4(fp)
   2683c:	e0fffc15 	stw	r3,-16(fp)
   26840:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   26844:	e0bffd17 	ldw	r2,-12(fp)
   26848:	e0fffc17 	ldw	r3,-16(fp)
   2684c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   26850:	e0bffc17 	ldw	r2,-16(fp)
   26854:	10c00017 	ldw	r3,0(r2)
   26858:	e0bffd17 	ldw	r2,-12(fp)
   2685c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   26860:	e0bffc17 	ldw	r2,-16(fp)
   26864:	10800017 	ldw	r2,0(r2)
   26868:	e0fffd17 	ldw	r3,-12(fp)
   2686c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   26870:	e0bffc17 	ldw	r2,-16(fp)
   26874:	e0fffd17 	ldw	r3,-12(fp)
   26878:	10c00015 	stw	r3,0(r2)

  return 0;  
   2687c:	0005883a 	mov	r2,zero
}
   26880:	e037883a 	mov	sp,fp
   26884:	dfc00117 	ldw	ra,4(sp)
   26888:	df000017 	ldw	fp,0(sp)
   2688c:	dec00204 	addi	sp,sp,8
   26890:	f800283a 	ret

00026894 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   26894:	defffd04 	addi	sp,sp,-12
   26898:	dfc00215 	stw	ra,8(sp)
   2689c:	df000115 	stw	fp,4(sp)
   268a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   268a4:	008000b4 	movhi	r2,2
   268a8:	109f5c04 	addi	r2,r2,32112
   268ac:	e0bfff15 	stw	r2,-4(fp)
   268b0:	00000606 	br	268cc <_do_ctors+0x38>
        (*ctor) (); 
   268b4:	e0bfff17 	ldw	r2,-4(fp)
   268b8:	10800017 	ldw	r2,0(r2)
   268bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   268c0:	e0bfff17 	ldw	r2,-4(fp)
   268c4:	10bfff04 	addi	r2,r2,-4
   268c8:	e0bfff15 	stw	r2,-4(fp)
   268cc:	e0ffff17 	ldw	r3,-4(fp)
   268d0:	008000b4 	movhi	r2,2
   268d4:	109f5d04 	addi	r2,r2,32116
   268d8:	18bff62e 	bgeu	r3,r2,268b4 <__alt_data_end+0xfffed8b4>
        (*ctor) (); 
}
   268dc:	0001883a 	nop
   268e0:	e037883a 	mov	sp,fp
   268e4:	dfc00117 	ldw	ra,4(sp)
   268e8:	df000017 	ldw	fp,0(sp)
   268ec:	dec00204 	addi	sp,sp,8
   268f0:	f800283a 	ret

000268f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   268f4:	defffd04 	addi	sp,sp,-12
   268f8:	dfc00215 	stw	ra,8(sp)
   268fc:	df000115 	stw	fp,4(sp)
   26900:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   26904:	008000b4 	movhi	r2,2
   26908:	109f5c04 	addi	r2,r2,32112
   2690c:	e0bfff15 	stw	r2,-4(fp)
   26910:	00000606 	br	2692c <_do_dtors+0x38>
        (*dtor) (); 
   26914:	e0bfff17 	ldw	r2,-4(fp)
   26918:	10800017 	ldw	r2,0(r2)
   2691c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   26920:	e0bfff17 	ldw	r2,-4(fp)
   26924:	10bfff04 	addi	r2,r2,-4
   26928:	e0bfff15 	stw	r2,-4(fp)
   2692c:	e0ffff17 	ldw	r3,-4(fp)
   26930:	008000b4 	movhi	r2,2
   26934:	109f5d04 	addi	r2,r2,32116
   26938:	18bff62e 	bgeu	r3,r2,26914 <__alt_data_end+0xfffed914>
        (*dtor) (); 
}
   2693c:	0001883a 	nop
   26940:	e037883a 	mov	sp,fp
   26944:	dfc00117 	ldw	ra,4(sp)
   26948:	df000017 	ldw	fp,0(sp)
   2694c:	dec00204 	addi	sp,sp,8
   26950:	f800283a 	ret

00026954 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   26954:	defffa04 	addi	sp,sp,-24
   26958:	dfc00515 	stw	ra,20(sp)
   2695c:	df000415 	stw	fp,16(sp)
   26960:	df000404 	addi	fp,sp,16
   26964:	e13ffe15 	stw	r4,-8(fp)
   26968:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2696c:	e0bfff17 	ldw	r2,-4(fp)
   26970:	10800017 	ldw	r2,0(r2)
   26974:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   26978:	e13ffe17 	ldw	r4,-8(fp)
   2697c:	00203740 	call	20374 <strlen>
   26980:	10800044 	addi	r2,r2,1
   26984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26988:	00000d06 	br	269c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2698c:	e0bffc17 	ldw	r2,-16(fp)
   26990:	10800217 	ldw	r2,8(r2)
   26994:	e0fffd17 	ldw	r3,-12(fp)
   26998:	180d883a 	mov	r6,r3
   2699c:	e17ffe17 	ldw	r5,-8(fp)
   269a0:	1009883a 	mov	r4,r2
   269a4:	002776c0 	call	2776c <memcmp>
   269a8:	1000021e 	bne	r2,zero,269b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   269ac:	e0bffc17 	ldw	r2,-16(fp)
   269b0:	00000706 	br	269d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   269b4:	e0bffc17 	ldw	r2,-16(fp)
   269b8:	10800017 	ldw	r2,0(r2)
   269bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   269c0:	e0fffc17 	ldw	r3,-16(fp)
   269c4:	e0bfff17 	ldw	r2,-4(fp)
   269c8:	18bff01e 	bne	r3,r2,2698c <__alt_data_end+0xfffed98c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   269cc:	0005883a 	mov	r2,zero
}
   269d0:	e037883a 	mov	sp,fp
   269d4:	dfc00117 	ldw	ra,4(sp)
   269d8:	df000017 	ldw	fp,0(sp)
   269dc:	dec00204 	addi	sp,sp,8
   269e0:	f800283a 	ret

000269e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   269e4:	deffff04 	addi	sp,sp,-4
   269e8:	df000015 	stw	fp,0(sp)
   269ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   269f0:	0001883a 	nop
   269f4:	e037883a 	mov	sp,fp
   269f8:	df000017 	ldw	fp,0(sp)
   269fc:	dec00104 	addi	sp,sp,4
   26a00:	f800283a 	ret

00026a04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   26a04:	defff904 	addi	sp,sp,-28
   26a08:	dfc00615 	stw	ra,24(sp)
   26a0c:	df000515 	stw	fp,20(sp)
   26a10:	df000504 	addi	fp,sp,20
   26a14:	e13ffc15 	stw	r4,-16(fp)
   26a18:	e17ffd15 	stw	r5,-12(fp)
   26a1c:	e1bffe15 	stw	r6,-8(fp)
   26a20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   26a24:	e0800217 	ldw	r2,8(fp)
   26a28:	d8800015 	stw	r2,0(sp)
   26a2c:	e1ffff17 	ldw	r7,-4(fp)
   26a30:	e1bffe17 	ldw	r6,-8(fp)
   26a34:	e17ffd17 	ldw	r5,-12(fp)
   26a38:	e13ffc17 	ldw	r4,-16(fp)
   26a3c:	0026bb40 	call	26bb4 <alt_iic_isr_register>
}  
   26a40:	e037883a 	mov	sp,fp
   26a44:	dfc00117 	ldw	ra,4(sp)
   26a48:	df000017 	ldw	fp,0(sp)
   26a4c:	dec00204 	addi	sp,sp,8
   26a50:	f800283a 	ret

00026a54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   26a54:	defff904 	addi	sp,sp,-28
   26a58:	df000615 	stw	fp,24(sp)
   26a5c:	df000604 	addi	fp,sp,24
   26a60:	e13ffe15 	stw	r4,-8(fp)
   26a64:	e17fff15 	stw	r5,-4(fp)
   26a68:	e0bfff17 	ldw	r2,-4(fp)
   26a6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26a70:	0005303a 	rdctl	r2,status
   26a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26a78:	e0fffb17 	ldw	r3,-20(fp)
   26a7c:	00bfff84 	movi	r2,-2
   26a80:	1884703a 	and	r2,r3,r2
   26a84:	1001703a 	wrctl	status,r2
  
  return context;
   26a88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   26a8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   26a90:	00c00044 	movi	r3,1
   26a94:	e0bffa17 	ldw	r2,-24(fp)
   26a98:	1884983a 	sll	r2,r3,r2
   26a9c:	1007883a 	mov	r3,r2
   26aa0:	d0a6cf17 	ldw	r2,-25796(gp)
   26aa4:	1884b03a 	or	r2,r3,r2
   26aa8:	d0a6cf15 	stw	r2,-25796(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   26aac:	d0a6cf17 	ldw	r2,-25796(gp)
   26ab0:	100170fa 	wrctl	ienable,r2
   26ab4:	e0bffc17 	ldw	r2,-16(fp)
   26ab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26abc:	e0bffd17 	ldw	r2,-12(fp)
   26ac0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   26ac4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   26ac8:	0001883a 	nop
}
   26acc:	e037883a 	mov	sp,fp
   26ad0:	df000017 	ldw	fp,0(sp)
   26ad4:	dec00104 	addi	sp,sp,4
   26ad8:	f800283a 	ret

00026adc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   26adc:	defff904 	addi	sp,sp,-28
   26ae0:	df000615 	stw	fp,24(sp)
   26ae4:	df000604 	addi	fp,sp,24
   26ae8:	e13ffe15 	stw	r4,-8(fp)
   26aec:	e17fff15 	stw	r5,-4(fp)
   26af0:	e0bfff17 	ldw	r2,-4(fp)
   26af4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26af8:	0005303a 	rdctl	r2,status
   26afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26b00:	e0fffb17 	ldw	r3,-20(fp)
   26b04:	00bfff84 	movi	r2,-2
   26b08:	1884703a 	and	r2,r3,r2
   26b0c:	1001703a 	wrctl	status,r2
  
  return context;
   26b10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   26b14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   26b18:	00c00044 	movi	r3,1
   26b1c:	e0bffa17 	ldw	r2,-24(fp)
   26b20:	1884983a 	sll	r2,r3,r2
   26b24:	0084303a 	nor	r2,zero,r2
   26b28:	1007883a 	mov	r3,r2
   26b2c:	d0a6cf17 	ldw	r2,-25796(gp)
   26b30:	1884703a 	and	r2,r3,r2
   26b34:	d0a6cf15 	stw	r2,-25796(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   26b38:	d0a6cf17 	ldw	r2,-25796(gp)
   26b3c:	100170fa 	wrctl	ienable,r2
   26b40:	e0bffc17 	ldw	r2,-16(fp)
   26b44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26b48:	e0bffd17 	ldw	r2,-12(fp)
   26b4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   26b50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   26b54:	0001883a 	nop
}
   26b58:	e037883a 	mov	sp,fp
   26b5c:	df000017 	ldw	fp,0(sp)
   26b60:	dec00104 	addi	sp,sp,4
   26b64:	f800283a 	ret

00026b68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   26b68:	defffc04 	addi	sp,sp,-16
   26b6c:	df000315 	stw	fp,12(sp)
   26b70:	df000304 	addi	fp,sp,12
   26b74:	e13ffe15 	stw	r4,-8(fp)
   26b78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   26b7c:	000530fa 	rdctl	r2,ienable
   26b80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   26b84:	00c00044 	movi	r3,1
   26b88:	e0bfff17 	ldw	r2,-4(fp)
   26b8c:	1884983a 	sll	r2,r3,r2
   26b90:	1007883a 	mov	r3,r2
   26b94:	e0bffd17 	ldw	r2,-12(fp)
   26b98:	1884703a 	and	r2,r3,r2
   26b9c:	1004c03a 	cmpne	r2,r2,zero
   26ba0:	10803fcc 	andi	r2,r2,255
}
   26ba4:	e037883a 	mov	sp,fp
   26ba8:	df000017 	ldw	fp,0(sp)
   26bac:	dec00104 	addi	sp,sp,4
   26bb0:	f800283a 	ret

00026bb4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   26bb4:	defff504 	addi	sp,sp,-44
   26bb8:	dfc00a15 	stw	ra,40(sp)
   26bbc:	df000915 	stw	fp,36(sp)
   26bc0:	df000904 	addi	fp,sp,36
   26bc4:	e13ffc15 	stw	r4,-16(fp)
   26bc8:	e17ffd15 	stw	r5,-12(fp)
   26bcc:	e1bffe15 	stw	r6,-8(fp)
   26bd0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   26bd4:	00bffa84 	movi	r2,-22
   26bd8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   26bdc:	e0bffd17 	ldw	r2,-12(fp)
   26be0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   26be4:	e0bff817 	ldw	r2,-32(fp)
   26be8:	10800808 	cmpgei	r2,r2,32
   26bec:	1000271e 	bne	r2,zero,26c8c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26bf0:	0005303a 	rdctl	r2,status
   26bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26bf8:	e0fffb17 	ldw	r3,-20(fp)
   26bfc:	00bfff84 	movi	r2,-2
   26c00:	1884703a 	and	r2,r3,r2
   26c04:	1001703a 	wrctl	status,r2
  
  return context;
   26c08:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   26c0c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   26c10:	008000f4 	movhi	r2,3
   26c14:	10ad7904 	addi	r2,r2,-18972
   26c18:	e0fff817 	ldw	r3,-32(fp)
   26c1c:	180690fa 	slli	r3,r3,3
   26c20:	10c5883a 	add	r2,r2,r3
   26c24:	e0fffe17 	ldw	r3,-8(fp)
   26c28:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   26c2c:	008000f4 	movhi	r2,3
   26c30:	10ad7904 	addi	r2,r2,-18972
   26c34:	e0fff817 	ldw	r3,-32(fp)
   26c38:	180690fa 	slli	r3,r3,3
   26c3c:	10c5883a 	add	r2,r2,r3
   26c40:	10800104 	addi	r2,r2,4
   26c44:	e0ffff17 	ldw	r3,-4(fp)
   26c48:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   26c4c:	e0bffe17 	ldw	r2,-8(fp)
   26c50:	10000526 	beq	r2,zero,26c68 <alt_iic_isr_register+0xb4>
   26c54:	e0bff817 	ldw	r2,-32(fp)
   26c58:	100b883a 	mov	r5,r2
   26c5c:	e13ffc17 	ldw	r4,-16(fp)
   26c60:	0026a540 	call	26a54 <alt_ic_irq_enable>
   26c64:	00000406 	br	26c78 <alt_iic_isr_register+0xc4>
   26c68:	e0bff817 	ldw	r2,-32(fp)
   26c6c:	100b883a 	mov	r5,r2
   26c70:	e13ffc17 	ldw	r4,-16(fp)
   26c74:	0026adc0 	call	26adc <alt_ic_irq_disable>
   26c78:	e0bff715 	stw	r2,-36(fp)
   26c7c:	e0bffa17 	ldw	r2,-24(fp)
   26c80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26c84:	e0bff917 	ldw	r2,-28(fp)
   26c88:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   26c8c:	e0bff717 	ldw	r2,-36(fp)
}
   26c90:	e037883a 	mov	sp,fp
   26c94:	dfc00117 	ldw	ra,4(sp)
   26c98:	df000017 	ldw	fp,0(sp)
   26c9c:	dec00204 	addi	sp,sp,8
   26ca0:	f800283a 	ret

00026ca4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   26ca4:	defff804 	addi	sp,sp,-32
   26ca8:	dfc00715 	stw	ra,28(sp)
   26cac:	df000615 	stw	fp,24(sp)
   26cb0:	dc000515 	stw	r16,20(sp)
   26cb4:	df000604 	addi	fp,sp,24
   26cb8:	e13ffb15 	stw	r4,-20(fp)
   26cbc:	e17ffc15 	stw	r5,-16(fp)
   26cc0:	e1bffd15 	stw	r6,-12(fp)
   26cc4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   26cc8:	e1bffe17 	ldw	r6,-8(fp)
   26ccc:	e17ffd17 	ldw	r5,-12(fp)
   26cd0:	e13ffc17 	ldw	r4,-16(fp)
   26cd4:	0026f2c0 	call	26f2c <open>
   26cd8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   26cdc:	e0bffa17 	ldw	r2,-24(fp)
   26ce0:	10002216 	blt	r2,zero,26d6c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   26ce4:	040000f4 	movhi	r16,3
   26ce8:	84220904 	addi	r16,r16,-30684
   26cec:	e0bffa17 	ldw	r2,-24(fp)
   26cf0:	01400304 	movi	r5,12
   26cf4:	1009883a 	mov	r4,r2
   26cf8:	00230840 	call	23084 <__mulsi3>
   26cfc:	8085883a 	add	r2,r16,r2
   26d00:	10c00017 	ldw	r3,0(r2)
   26d04:	e0bffb17 	ldw	r2,-20(fp)
   26d08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   26d0c:	040000f4 	movhi	r16,3
   26d10:	84220904 	addi	r16,r16,-30684
   26d14:	e0bffa17 	ldw	r2,-24(fp)
   26d18:	01400304 	movi	r5,12
   26d1c:	1009883a 	mov	r4,r2
   26d20:	00230840 	call	23084 <__mulsi3>
   26d24:	8085883a 	add	r2,r16,r2
   26d28:	10800104 	addi	r2,r2,4
   26d2c:	10c00017 	ldw	r3,0(r2)
   26d30:	e0bffb17 	ldw	r2,-20(fp)
   26d34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26d38:	040000f4 	movhi	r16,3
   26d3c:	84220904 	addi	r16,r16,-30684
   26d40:	e0bffa17 	ldw	r2,-24(fp)
   26d44:	01400304 	movi	r5,12
   26d48:	1009883a 	mov	r4,r2
   26d4c:	00230840 	call	23084 <__mulsi3>
   26d50:	8085883a 	add	r2,r16,r2
   26d54:	10800204 	addi	r2,r2,8
   26d58:	10c00017 	ldw	r3,0(r2)
   26d5c:	e0bffb17 	ldw	r2,-20(fp)
   26d60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   26d64:	e13ffa17 	ldw	r4,-24(fp)
   26d68:	00237d00 	call	237d0 <alt_release_fd>
  }
} 
   26d6c:	0001883a 	nop
   26d70:	e6ffff04 	addi	sp,fp,-4
   26d74:	dfc00217 	ldw	ra,8(sp)
   26d78:	df000117 	ldw	fp,4(sp)
   26d7c:	dc000017 	ldw	r16,0(sp)
   26d80:	dec00304 	addi	sp,sp,12
   26d84:	f800283a 	ret

00026d88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   26d88:	defffb04 	addi	sp,sp,-20
   26d8c:	dfc00415 	stw	ra,16(sp)
   26d90:	df000315 	stw	fp,12(sp)
   26d94:	df000304 	addi	fp,sp,12
   26d98:	e13ffd15 	stw	r4,-12(fp)
   26d9c:	e17ffe15 	stw	r5,-8(fp)
   26da0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   26da4:	01c07fc4 	movi	r7,511
   26da8:	01800044 	movi	r6,1
   26dac:	e17ffd17 	ldw	r5,-12(fp)
   26db0:	010000f4 	movhi	r4,3
   26db4:	21220c04 	addi	r4,r4,-30672
   26db8:	0026ca40 	call	26ca4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   26dbc:	01c07fc4 	movi	r7,511
   26dc0:	000d883a 	mov	r6,zero
   26dc4:	e17ffe17 	ldw	r5,-8(fp)
   26dc8:	010000f4 	movhi	r4,3
   26dcc:	21220904 	addi	r4,r4,-30684
   26dd0:	0026ca40 	call	26ca4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   26dd4:	01c07fc4 	movi	r7,511
   26dd8:	01800044 	movi	r6,1
   26ddc:	e17fff17 	ldw	r5,-4(fp)
   26de0:	010000f4 	movhi	r4,3
   26de4:	21220f04 	addi	r4,r4,-30660
   26de8:	0026ca40 	call	26ca4 <alt_open_fd>
}  
   26dec:	0001883a 	nop
   26df0:	e037883a 	mov	sp,fp
   26df4:	dfc00117 	ldw	ra,4(sp)
   26df8:	df000017 	ldw	fp,0(sp)
   26dfc:	dec00204 	addi	sp,sp,8
   26e00:	f800283a 	ret

00026e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26e04:	defffe04 	addi	sp,sp,-8
   26e08:	dfc00115 	stw	ra,4(sp)
   26e0c:	df000015 	stw	fp,0(sp)
   26e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26e14:	d0a00917 	ldw	r2,-32732(gp)
   26e18:	10000326 	beq	r2,zero,26e28 <alt_get_errno+0x24>
   26e1c:	d0a00917 	ldw	r2,-32732(gp)
   26e20:	103ee83a 	callr	r2
   26e24:	00000106 	br	26e2c <alt_get_errno+0x28>
   26e28:	d0a6cb04 	addi	r2,gp,-25812
}
   26e2c:	e037883a 	mov	sp,fp
   26e30:	dfc00117 	ldw	ra,4(sp)
   26e34:	df000017 	ldw	fp,0(sp)
   26e38:	dec00204 	addi	sp,sp,8
   26e3c:	f800283a 	ret

00026e40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26e40:	defffb04 	addi	sp,sp,-20
   26e44:	dfc00415 	stw	ra,16(sp)
   26e48:	df000315 	stw	fp,12(sp)
   26e4c:	dc000215 	stw	r16,8(sp)
   26e50:	df000304 	addi	fp,sp,12
   26e54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26e58:	e0bffe17 	ldw	r2,-8(fp)
   26e5c:	10800217 	ldw	r2,8(r2)
   26e60:	10d00034 	orhi	r3,r2,16384
   26e64:	e0bffe17 	ldw	r2,-8(fp)
   26e68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26e6c:	e03ffd15 	stw	zero,-12(fp)
   26e70:	00002306 	br	26f00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26e74:	040000f4 	movhi	r16,3
   26e78:	84220904 	addi	r16,r16,-30684
   26e7c:	e0bffd17 	ldw	r2,-12(fp)
   26e80:	01400304 	movi	r5,12
   26e84:	1009883a 	mov	r4,r2
   26e88:	00230840 	call	23084 <__mulsi3>
   26e8c:	8085883a 	add	r2,r16,r2
   26e90:	10c00017 	ldw	r3,0(r2)
   26e94:	e0bffe17 	ldw	r2,-8(fp)
   26e98:	10800017 	ldw	r2,0(r2)
   26e9c:	1880151e 	bne	r3,r2,26ef4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26ea0:	040000f4 	movhi	r16,3
   26ea4:	84220904 	addi	r16,r16,-30684
   26ea8:	e0bffd17 	ldw	r2,-12(fp)
   26eac:	01400304 	movi	r5,12
   26eb0:	1009883a 	mov	r4,r2
   26eb4:	00230840 	call	23084 <__mulsi3>
   26eb8:	8085883a 	add	r2,r16,r2
   26ebc:	10800204 	addi	r2,r2,8
   26ec0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26ec4:	10000b0e 	bge	r2,zero,26ef4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   26ec8:	01400304 	movi	r5,12
   26ecc:	e13ffd17 	ldw	r4,-12(fp)
   26ed0:	00230840 	call	23084 <__mulsi3>
   26ed4:	1007883a 	mov	r3,r2
   26ed8:	008000f4 	movhi	r2,3
   26edc:	10a20904 	addi	r2,r2,-30684
   26ee0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26ee4:	e0bffe17 	ldw	r2,-8(fp)
   26ee8:	18800226 	beq	r3,r2,26ef4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   26eec:	00bffcc4 	movi	r2,-13
   26ef0:	00000806 	br	26f14 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26ef4:	e0bffd17 	ldw	r2,-12(fp)
   26ef8:	10800044 	addi	r2,r2,1
   26efc:	e0bffd15 	stw	r2,-12(fp)
   26f00:	d0a00817 	ldw	r2,-32736(gp)
   26f04:	1007883a 	mov	r3,r2
   26f08:	e0bffd17 	ldw	r2,-12(fp)
   26f0c:	18bfd92e 	bgeu	r3,r2,26e74 <__alt_data_end+0xfffede74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26f10:	0005883a 	mov	r2,zero
}
   26f14:	e6ffff04 	addi	sp,fp,-4
   26f18:	dfc00217 	ldw	ra,8(sp)
   26f1c:	df000117 	ldw	fp,4(sp)
   26f20:	dc000017 	ldw	r16,0(sp)
   26f24:	dec00304 	addi	sp,sp,12
   26f28:	f800283a 	ret

00026f2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   26f2c:	defff604 	addi	sp,sp,-40
   26f30:	dfc00915 	stw	ra,36(sp)
   26f34:	df000815 	stw	fp,32(sp)
   26f38:	df000804 	addi	fp,sp,32
   26f3c:	e13ffd15 	stw	r4,-12(fp)
   26f40:	e17ffe15 	stw	r5,-8(fp)
   26f44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   26f48:	00bfffc4 	movi	r2,-1
   26f4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   26f50:	00bffb44 	movi	r2,-19
   26f54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26f58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   26f5c:	d1600604 	addi	r5,gp,-32744
   26f60:	e13ffd17 	ldw	r4,-12(fp)
   26f64:	00269540 	call	26954 <alt_find_dev>
   26f68:	e0bff815 	stw	r2,-32(fp)
   26f6c:	e0bff817 	ldw	r2,-32(fp)
   26f70:	1000051e 	bne	r2,zero,26f88 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   26f74:	e13ffd17 	ldw	r4,-12(fp)
   26f78:	00274b80 	call	274b8 <alt_find_file>
   26f7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26f80:	00800044 	movi	r2,1
   26f84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   26f88:	e0bff817 	ldw	r2,-32(fp)
   26f8c:	10002b26 	beq	r2,zero,2703c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   26f90:	e13ff817 	ldw	r4,-32(fp)
   26f94:	00275c00 	call	275c0 <alt_get_fd>
   26f98:	e0bff915 	stw	r2,-28(fp)
   26f9c:	e0bff917 	ldw	r2,-28(fp)
   26fa0:	1000030e 	bge	r2,zero,26fb0 <open+0x84>
    {
      status = index;
   26fa4:	e0bff917 	ldw	r2,-28(fp)
   26fa8:	e0bffa15 	stw	r2,-24(fp)
   26fac:	00002506 	br	27044 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   26fb0:	01400304 	movi	r5,12
   26fb4:	e13ff917 	ldw	r4,-28(fp)
   26fb8:	00230840 	call	23084 <__mulsi3>
   26fbc:	1007883a 	mov	r3,r2
   26fc0:	008000f4 	movhi	r2,3
   26fc4:	10a20904 	addi	r2,r2,-30684
   26fc8:	1885883a 	add	r2,r3,r2
   26fcc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   26fd0:	e0fffe17 	ldw	r3,-8(fp)
   26fd4:	00900034 	movhi	r2,16384
   26fd8:	10bfffc4 	addi	r2,r2,-1
   26fdc:	1886703a 	and	r3,r3,r2
   26fe0:	e0bffc17 	ldw	r2,-16(fp)
   26fe4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   26fe8:	e0bffb17 	ldw	r2,-20(fp)
   26fec:	1000051e 	bne	r2,zero,27004 <open+0xd8>
   26ff0:	e13ffc17 	ldw	r4,-16(fp)
   26ff4:	0026e400 	call	26e40 <alt_file_locked>
   26ff8:	e0bffa15 	stw	r2,-24(fp)
   26ffc:	e0bffa17 	ldw	r2,-24(fp)
   27000:	10001016 	blt	r2,zero,27044 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   27004:	e0bff817 	ldw	r2,-32(fp)
   27008:	10800317 	ldw	r2,12(r2)
   2700c:	10000826 	beq	r2,zero,27030 <open+0x104>
   27010:	e0bff817 	ldw	r2,-32(fp)
   27014:	10800317 	ldw	r2,12(r2)
   27018:	e1ffff17 	ldw	r7,-4(fp)
   2701c:	e1bffe17 	ldw	r6,-8(fp)
   27020:	e17ffd17 	ldw	r5,-12(fp)
   27024:	e13ffc17 	ldw	r4,-16(fp)
   27028:	103ee83a 	callr	r2
   2702c:	00000106 	br	27034 <open+0x108>
   27030:	0005883a 	mov	r2,zero
   27034:	e0bffa15 	stw	r2,-24(fp)
   27038:	00000206 	br	27044 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2703c:	00bffb44 	movi	r2,-19
   27040:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   27044:	e0bffa17 	ldw	r2,-24(fp)
   27048:	1000090e 	bge	r2,zero,27070 <open+0x144>
  {
    alt_release_fd (index);  
   2704c:	e13ff917 	ldw	r4,-28(fp)
   27050:	00237d00 	call	237d0 <alt_release_fd>
    ALT_ERRNO = -status;
   27054:	0026e040 	call	26e04 <alt_get_errno>
   27058:	1007883a 	mov	r3,r2
   2705c:	e0bffa17 	ldw	r2,-24(fp)
   27060:	0085c83a 	sub	r2,zero,r2
   27064:	18800015 	stw	r2,0(r3)
    return -1;
   27068:	00bfffc4 	movi	r2,-1
   2706c:	00000106 	br	27074 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   27070:	e0bff917 	ldw	r2,-28(fp)
}
   27074:	e037883a 	mov	sp,fp
   27078:	dfc00117 	ldw	ra,4(sp)
   2707c:	df000017 	ldw	fp,0(sp)
   27080:	dec00204 	addi	sp,sp,8
   27084:	f800283a 	ret

00027088 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   27088:	defff204 	addi	sp,sp,-56
   2708c:	dfc00a15 	stw	ra,40(sp)
   27090:	df000915 	stw	fp,36(sp)
   27094:	df000904 	addi	fp,sp,36
   27098:	e13fff15 	stw	r4,-4(fp)
   2709c:	e1400215 	stw	r5,8(fp)
   270a0:	e1800315 	stw	r6,12(fp)
   270a4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   270a8:	e0800204 	addi	r2,fp,8
   270ac:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   270b0:	e0bfff17 	ldw	r2,-4(fp)
   270b4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   270b8:	00006f06 	br	27278 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   270bc:	e0bff807 	ldb	r2,-32(fp)
   270c0:	10800960 	cmpeqi	r2,r2,37
   270c4:	1000041e 	bne	r2,zero,270d8 <alt_printf+0x50>
        {
            alt_putchar(c);
   270c8:	e0bff807 	ldb	r2,-32(fp)
   270cc:	1009883a 	mov	r4,r2
   270d0:	00272b40 	call	272b4 <alt_putchar>
   270d4:	00006806 	br	27278 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   270d8:	e0bff717 	ldw	r2,-36(fp)
   270dc:	10c00044 	addi	r3,r2,1
   270e0:	e0fff715 	stw	r3,-36(fp)
   270e4:	10800003 	ldbu	r2,0(r2)
   270e8:	e0bff805 	stb	r2,-32(fp)
   270ec:	e0bff807 	ldb	r2,-32(fp)
   270f0:	10006926 	beq	r2,zero,27298 <alt_printf+0x210>
            {
                if (c == '%')
   270f4:	e0bff807 	ldb	r2,-32(fp)
   270f8:	10800958 	cmpnei	r2,r2,37
   270fc:	1000041e 	bne	r2,zero,27110 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   27100:	e0bff807 	ldb	r2,-32(fp)
   27104:	1009883a 	mov	r4,r2
   27108:	00272b40 	call	272b4 <alt_putchar>
   2710c:	00005a06 	br	27278 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   27110:	e0bff807 	ldb	r2,-32(fp)
   27114:	108018d8 	cmpnei	r2,r2,99
   27118:	1000081e 	bne	r2,zero,2713c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2711c:	e0bffe17 	ldw	r2,-8(fp)
   27120:	10c00104 	addi	r3,r2,4
   27124:	e0fffe15 	stw	r3,-8(fp)
   27128:	10800017 	ldw	r2,0(r2)
   2712c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   27130:	e13ffd17 	ldw	r4,-12(fp)
   27134:	00272b40 	call	272b4 <alt_putchar>
   27138:	00004f06 	br	27278 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2713c:	e0bff807 	ldb	r2,-32(fp)
   27140:	10801e18 	cmpnei	r2,r2,120
   27144:	1000341e 	bne	r2,zero,27218 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   27148:	e0bffe17 	ldw	r2,-8(fp)
   2714c:	10c00104 	addi	r3,r2,4
   27150:	e0fffe15 	stw	r3,-8(fp)
   27154:	10800017 	ldw	r2,0(r2)
   27158:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2715c:	e0bffb17 	ldw	r2,-20(fp)
   27160:	1000031e 	bne	r2,zero,27170 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   27164:	01000c04 	movi	r4,48
   27168:	00272b40 	call	272b4 <alt_putchar>
                        continue;
   2716c:	00004206 	br	27278 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   27170:	00800704 	movi	r2,28
   27174:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   27178:	00000306 	br	27188 <alt_printf+0x100>
                        digit_shift -= 4;
   2717c:	e0bff917 	ldw	r2,-28(fp)
   27180:	10bfff04 	addi	r2,r2,-4
   27184:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   27188:	00c003c4 	movi	r3,15
   2718c:	e0bff917 	ldw	r2,-28(fp)
   27190:	1884983a 	sll	r2,r3,r2
   27194:	1007883a 	mov	r3,r2
   27198:	e0bffb17 	ldw	r2,-20(fp)
   2719c:	1884703a 	and	r2,r3,r2
   271a0:	103ff626 	beq	r2,zero,2717c <__alt_data_end+0xfffee17c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   271a4:	00001906 	br	2720c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   271a8:	00c003c4 	movi	r3,15
   271ac:	e0bff917 	ldw	r2,-28(fp)
   271b0:	1884983a 	sll	r2,r3,r2
   271b4:	1007883a 	mov	r3,r2
   271b8:	e0bffb17 	ldw	r2,-20(fp)
   271bc:	1886703a 	and	r3,r3,r2
   271c0:	e0bff917 	ldw	r2,-28(fp)
   271c4:	1884d83a 	srl	r2,r3,r2
   271c8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   271cc:	e0bffc17 	ldw	r2,-16(fp)
   271d0:	108002a8 	cmpgeui	r2,r2,10
   271d4:	1000041e 	bne	r2,zero,271e8 <alt_printf+0x160>
                            c = '0' + digit;
   271d8:	e0bffc17 	ldw	r2,-16(fp)
   271dc:	10800c04 	addi	r2,r2,48
   271e0:	e0bff805 	stb	r2,-32(fp)
   271e4:	00000306 	br	271f4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   271e8:	e0bffc17 	ldw	r2,-16(fp)
   271ec:	108015c4 	addi	r2,r2,87
   271f0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   271f4:	e0bff807 	ldb	r2,-32(fp)
   271f8:	1009883a 	mov	r4,r2
   271fc:	00272b40 	call	272b4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   27200:	e0bff917 	ldw	r2,-28(fp)
   27204:	10bfff04 	addi	r2,r2,-4
   27208:	e0bff915 	stw	r2,-28(fp)
   2720c:	e0bff917 	ldw	r2,-28(fp)
   27210:	103fe50e 	bge	r2,zero,271a8 <__alt_data_end+0xfffee1a8>
   27214:	00001806 	br	27278 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   27218:	e0bff807 	ldb	r2,-32(fp)
   2721c:	10801cd8 	cmpnei	r2,r2,115
   27220:	1000151e 	bne	r2,zero,27278 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   27224:	e0bffe17 	ldw	r2,-8(fp)
   27228:	10c00104 	addi	r3,r2,4
   2722c:	e0fffe15 	stw	r3,-8(fp)
   27230:	10800017 	ldw	r2,0(r2)
   27234:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   27238:	00000906 	br	27260 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2723c:	e0bffa17 	ldw	r2,-24(fp)
   27240:	10c00044 	addi	r3,r2,1
   27244:	e0fffa15 	stw	r3,-24(fp)
   27248:	10800003 	ldbu	r2,0(r2)
   2724c:	10803fcc 	andi	r2,r2,255
   27250:	1080201c 	xori	r2,r2,128
   27254:	10bfe004 	addi	r2,r2,-128
   27258:	1009883a 	mov	r4,r2
   2725c:	00272b40 	call	272b4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   27260:	e0bffa17 	ldw	r2,-24(fp)
   27264:	10800003 	ldbu	r2,0(r2)
   27268:	10803fcc 	andi	r2,r2,255
   2726c:	1080201c 	xori	r2,r2,128
   27270:	10bfe004 	addi	r2,r2,-128
   27274:	103ff11e 	bne	r2,zero,2723c <__alt_data_end+0xfffee23c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   27278:	e0bff717 	ldw	r2,-36(fp)
   2727c:	10c00044 	addi	r3,r2,1
   27280:	e0fff715 	stw	r3,-36(fp)
   27284:	10800003 	ldbu	r2,0(r2)
   27288:	e0bff805 	stb	r2,-32(fp)
   2728c:	e0bff807 	ldb	r2,-32(fp)
   27290:	103f8a1e 	bne	r2,zero,270bc <__alt_data_end+0xfffee0bc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   27294:	00000106 	br	2729c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   27298:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2729c:	0001883a 	nop
   272a0:	e037883a 	mov	sp,fp
   272a4:	dfc00117 	ldw	ra,4(sp)
   272a8:	df000017 	ldw	fp,0(sp)
   272ac:	dec00504 	addi	sp,sp,20
   272b0:	f800283a 	ret

000272b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   272b4:	defffd04 	addi	sp,sp,-12
   272b8:	dfc00215 	stw	ra,8(sp)
   272bc:	df000115 	stw	fp,4(sp)
   272c0:	df000104 	addi	fp,sp,4
   272c4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   272c8:	d0a00117 	ldw	r2,-32764(gp)
   272cc:	10800217 	ldw	r2,8(r2)
   272d0:	100b883a 	mov	r5,r2
   272d4:	e13fff17 	ldw	r4,-4(fp)
   272d8:	00278880 	call	27888 <putc>
#endif
#endif
}
   272dc:	e037883a 	mov	sp,fp
   272e0:	dfc00117 	ldw	ra,4(sp)
   272e4:	df000017 	ldw	fp,0(sp)
   272e8:	dec00204 	addi	sp,sp,8
   272ec:	f800283a 	ret

000272f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   272f0:	defffa04 	addi	sp,sp,-24
   272f4:	df000515 	stw	fp,20(sp)
   272f8:	df000504 	addi	fp,sp,20
   272fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27300:	0005303a 	rdctl	r2,status
   27304:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27308:	e0fffc17 	ldw	r3,-16(fp)
   2730c:	00bfff84 	movi	r2,-2
   27310:	1884703a 	and	r2,r3,r2
   27314:	1001703a 	wrctl	status,r2
  
  return context;
   27318:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2731c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   27320:	e0bfff17 	ldw	r2,-4(fp)
   27324:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   27328:	e0bffd17 	ldw	r2,-12(fp)
   2732c:	10800017 	ldw	r2,0(r2)
   27330:	e0fffd17 	ldw	r3,-12(fp)
   27334:	18c00117 	ldw	r3,4(r3)
   27338:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2733c:	e0bffd17 	ldw	r2,-12(fp)
   27340:	10800117 	ldw	r2,4(r2)
   27344:	e0fffd17 	ldw	r3,-12(fp)
   27348:	18c00017 	ldw	r3,0(r3)
   2734c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   27350:	e0bffd17 	ldw	r2,-12(fp)
   27354:	e0fffd17 	ldw	r3,-12(fp)
   27358:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2735c:	e0bffd17 	ldw	r2,-12(fp)
   27360:	e0fffd17 	ldw	r3,-12(fp)
   27364:	10c00015 	stw	r3,0(r2)
   27368:	e0bffb17 	ldw	r2,-20(fp)
   2736c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27370:	e0bffe17 	ldw	r2,-8(fp)
   27374:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   27378:	0001883a 	nop
   2737c:	e037883a 	mov	sp,fp
   27380:	df000017 	ldw	fp,0(sp)
   27384:	dec00104 	addi	sp,sp,4
   27388:	f800283a 	ret

0002738c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2738c:	defffb04 	addi	sp,sp,-20
   27390:	dfc00415 	stw	ra,16(sp)
   27394:	df000315 	stw	fp,12(sp)
   27398:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2739c:	d0a00e17 	ldw	r2,-32712(gp)
   273a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   273a4:	d0a6d117 	ldw	r2,-25788(gp)
   273a8:	10800044 	addi	r2,r2,1
   273ac:	d0a6d115 	stw	r2,-25788(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   273b0:	00002e06 	br	2746c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   273b4:	e0bffd17 	ldw	r2,-12(fp)
   273b8:	10800017 	ldw	r2,0(r2)
   273bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   273c0:	e0bffd17 	ldw	r2,-12(fp)
   273c4:	10800403 	ldbu	r2,16(r2)
   273c8:	10803fcc 	andi	r2,r2,255
   273cc:	10000426 	beq	r2,zero,273e0 <alt_tick+0x54>
   273d0:	d0a6d117 	ldw	r2,-25788(gp)
   273d4:	1000021e 	bne	r2,zero,273e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   273d8:	e0bffd17 	ldw	r2,-12(fp)
   273dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   273e0:	e0bffd17 	ldw	r2,-12(fp)
   273e4:	10800217 	ldw	r2,8(r2)
   273e8:	d0e6d117 	ldw	r3,-25788(gp)
   273ec:	18801d36 	bltu	r3,r2,27464 <alt_tick+0xd8>
   273f0:	e0bffd17 	ldw	r2,-12(fp)
   273f4:	10800403 	ldbu	r2,16(r2)
   273f8:	10803fcc 	andi	r2,r2,255
   273fc:	1000191e 	bne	r2,zero,27464 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   27400:	e0bffd17 	ldw	r2,-12(fp)
   27404:	10800317 	ldw	r2,12(r2)
   27408:	e0fffd17 	ldw	r3,-12(fp)
   2740c:	18c00517 	ldw	r3,20(r3)
   27410:	1809883a 	mov	r4,r3
   27414:	103ee83a 	callr	r2
   27418:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2741c:	e0bfff17 	ldw	r2,-4(fp)
   27420:	1000031e 	bne	r2,zero,27430 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   27424:	e13ffd17 	ldw	r4,-12(fp)
   27428:	00272f00 	call	272f0 <alt_alarm_stop>
   2742c:	00000d06 	br	27464 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   27430:	e0bffd17 	ldw	r2,-12(fp)
   27434:	10c00217 	ldw	r3,8(r2)
   27438:	e0bfff17 	ldw	r2,-4(fp)
   2743c:	1887883a 	add	r3,r3,r2
   27440:	e0bffd17 	ldw	r2,-12(fp)
   27444:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   27448:	e0bffd17 	ldw	r2,-12(fp)
   2744c:	10c00217 	ldw	r3,8(r2)
   27450:	d0a6d117 	ldw	r2,-25788(gp)
   27454:	1880032e 	bgeu	r3,r2,27464 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   27458:	e0bffd17 	ldw	r2,-12(fp)
   2745c:	00c00044 	movi	r3,1
   27460:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   27464:	e0bffe17 	ldw	r2,-8(fp)
   27468:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2746c:	e0fffd17 	ldw	r3,-12(fp)
   27470:	d0a00e04 	addi	r2,gp,-32712
   27474:	18bfcf1e 	bne	r3,r2,273b4 <__alt_data_end+0xfffee3b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   27478:	0001883a 	nop
}
   2747c:	0001883a 	nop
   27480:	e037883a 	mov	sp,fp
   27484:	dfc00117 	ldw	ra,4(sp)
   27488:	df000017 	ldw	fp,0(sp)
   2748c:	dec00204 	addi	sp,sp,8
   27490:	f800283a 	ret

00027494 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   27494:	deffff04 	addi	sp,sp,-4
   27498:	df000015 	stw	fp,0(sp)
   2749c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   274a0:	000170fa 	wrctl	ienable,zero
}
   274a4:	0001883a 	nop
   274a8:	e037883a 	mov	sp,fp
   274ac:	df000017 	ldw	fp,0(sp)
   274b0:	dec00104 	addi	sp,sp,4
   274b4:	f800283a 	ret

000274b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   274b8:	defffb04 	addi	sp,sp,-20
   274bc:	dfc00415 	stw	ra,16(sp)
   274c0:	df000315 	stw	fp,12(sp)
   274c4:	df000304 	addi	fp,sp,12
   274c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   274cc:	d0a00417 	ldw	r2,-32752(gp)
   274d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   274d4:	00003106 	br	2759c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   274d8:	e0bffd17 	ldw	r2,-12(fp)
   274dc:	10800217 	ldw	r2,8(r2)
   274e0:	1009883a 	mov	r4,r2
   274e4:	00203740 	call	20374 <strlen>
   274e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   274ec:	e0bffd17 	ldw	r2,-12(fp)
   274f0:	10c00217 	ldw	r3,8(r2)
   274f4:	e0bffe17 	ldw	r2,-8(fp)
   274f8:	10bfffc4 	addi	r2,r2,-1
   274fc:	1885883a 	add	r2,r3,r2
   27500:	10800003 	ldbu	r2,0(r2)
   27504:	10803fcc 	andi	r2,r2,255
   27508:	1080201c 	xori	r2,r2,128
   2750c:	10bfe004 	addi	r2,r2,-128
   27510:	10800bd8 	cmpnei	r2,r2,47
   27514:	1000031e 	bne	r2,zero,27524 <alt_find_file+0x6c>
    {
      len -= 1;
   27518:	e0bffe17 	ldw	r2,-8(fp)
   2751c:	10bfffc4 	addi	r2,r2,-1
   27520:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   27524:	e0bffe17 	ldw	r2,-8(fp)
   27528:	e0ffff17 	ldw	r3,-4(fp)
   2752c:	1885883a 	add	r2,r3,r2
   27530:	10800003 	ldbu	r2,0(r2)
   27534:	10803fcc 	andi	r2,r2,255
   27538:	1080201c 	xori	r2,r2,128
   2753c:	10bfe004 	addi	r2,r2,-128
   27540:	10800be0 	cmpeqi	r2,r2,47
   27544:	1000081e 	bne	r2,zero,27568 <alt_find_file+0xb0>
   27548:	e0bffe17 	ldw	r2,-8(fp)
   2754c:	e0ffff17 	ldw	r3,-4(fp)
   27550:	1885883a 	add	r2,r3,r2
   27554:	10800003 	ldbu	r2,0(r2)
   27558:	10803fcc 	andi	r2,r2,255
   2755c:	1080201c 	xori	r2,r2,128
   27560:	10bfe004 	addi	r2,r2,-128
   27564:	10000a1e 	bne	r2,zero,27590 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   27568:	e0bffd17 	ldw	r2,-12(fp)
   2756c:	10800217 	ldw	r2,8(r2)
   27570:	e0fffe17 	ldw	r3,-8(fp)
   27574:	180d883a 	mov	r6,r3
   27578:	e17fff17 	ldw	r5,-4(fp)
   2757c:	1009883a 	mov	r4,r2
   27580:	002776c0 	call	2776c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   27584:	1000021e 	bne	r2,zero,27590 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   27588:	e0bffd17 	ldw	r2,-12(fp)
   2758c:	00000706 	br	275ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   27590:	e0bffd17 	ldw	r2,-12(fp)
   27594:	10800017 	ldw	r2,0(r2)
   27598:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2759c:	e0fffd17 	ldw	r3,-12(fp)
   275a0:	d0a00404 	addi	r2,gp,-32752
   275a4:	18bfcc1e 	bne	r3,r2,274d8 <__alt_data_end+0xfffee4d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   275a8:	0005883a 	mov	r2,zero
}
   275ac:	e037883a 	mov	sp,fp
   275b0:	dfc00117 	ldw	ra,4(sp)
   275b4:	df000017 	ldw	fp,0(sp)
   275b8:	dec00204 	addi	sp,sp,8
   275bc:	f800283a 	ret

000275c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   275c0:	defffa04 	addi	sp,sp,-24
   275c4:	dfc00515 	stw	ra,20(sp)
   275c8:	df000415 	stw	fp,16(sp)
   275cc:	dc000315 	stw	r16,12(sp)
   275d0:	df000404 	addi	fp,sp,16
   275d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   275d8:	00bffa04 	movi	r2,-24
   275dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   275e0:	e03ffc15 	stw	zero,-16(fp)
   275e4:	00001d06 	br	2765c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   275e8:	040000f4 	movhi	r16,3
   275ec:	84220904 	addi	r16,r16,-30684
   275f0:	e0bffc17 	ldw	r2,-16(fp)
   275f4:	01400304 	movi	r5,12
   275f8:	1009883a 	mov	r4,r2
   275fc:	00230840 	call	23084 <__mulsi3>
   27600:	8085883a 	add	r2,r16,r2
   27604:	10800017 	ldw	r2,0(r2)
   27608:	1000111e 	bne	r2,zero,27650 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   2760c:	040000f4 	movhi	r16,3
   27610:	84220904 	addi	r16,r16,-30684
   27614:	e0bffc17 	ldw	r2,-16(fp)
   27618:	01400304 	movi	r5,12
   2761c:	1009883a 	mov	r4,r2
   27620:	00230840 	call	23084 <__mulsi3>
   27624:	8085883a 	add	r2,r16,r2
   27628:	e0fffe17 	ldw	r3,-8(fp)
   2762c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   27630:	d0e00817 	ldw	r3,-32736(gp)
   27634:	e0bffc17 	ldw	r2,-16(fp)
   27638:	1880020e 	bge	r3,r2,27644 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   2763c:	e0bffc17 	ldw	r2,-16(fp)
   27640:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   27644:	e0bffc17 	ldw	r2,-16(fp)
   27648:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2764c:	00000606 	br	27668 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   27650:	e0bffc17 	ldw	r2,-16(fp)
   27654:	10800044 	addi	r2,r2,1
   27658:	e0bffc15 	stw	r2,-16(fp)
   2765c:	e0bffc17 	ldw	r2,-16(fp)
   27660:	10800810 	cmplti	r2,r2,32
   27664:	103fe01e 	bne	r2,zero,275e8 <__alt_data_end+0xfffee5e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   27668:	e0bffd17 	ldw	r2,-12(fp)
}
   2766c:	e6ffff04 	addi	sp,fp,-4
   27670:	dfc00217 	ldw	ra,8(sp)
   27674:	df000117 	ldw	fp,4(sp)
   27678:	dc000017 	ldw	r16,0(sp)
   2767c:	dec00304 	addi	sp,sp,12
   27680:	f800283a 	ret

00027684 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   27684:	defffe04 	addi	sp,sp,-8
   27688:	df000115 	stw	fp,4(sp)
   2768c:	df000104 	addi	fp,sp,4
   27690:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   27694:	e0bfff17 	ldw	r2,-4(fp)
   27698:	10bffe84 	addi	r2,r2,-6
   2769c:	10c00428 	cmpgeui	r3,r2,16
   276a0:	18001a1e 	bne	r3,zero,2770c <alt_exception_cause_generated_bad_addr+0x88>
   276a4:	100690ba 	slli	r3,r2,2
   276a8:	008000b4 	movhi	r2,2
   276ac:	109daf04 	addi	r2,r2,30396
   276b0:	1885883a 	add	r2,r3,r2
   276b4:	10800017 	ldw	r2,0(r2)
   276b8:	1000683a 	jmp	r2
   276bc:	000276fc 	xorhi	zero,zero,2523
   276c0:	000276fc 	xorhi	zero,zero,2523
   276c4:	0002770c 	andi	zero,zero,2524
   276c8:	0002770c 	andi	zero,zero,2524
   276cc:	0002770c 	andi	zero,zero,2524
   276d0:	000276fc 	xorhi	zero,zero,2523
   276d4:	00027704 	movi	zero,2524
   276d8:	0002770c 	andi	zero,zero,2524
   276dc:	000276fc 	xorhi	zero,zero,2523
   276e0:	000276fc 	xorhi	zero,zero,2523
   276e4:	0002770c 	andi	zero,zero,2524
   276e8:	000276fc 	xorhi	zero,zero,2523
   276ec:	00027704 	movi	zero,2524
   276f0:	0002770c 	andi	zero,zero,2524
   276f4:	0002770c 	andi	zero,zero,2524
   276f8:	000276fc 	xorhi	zero,zero,2523
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   276fc:	00800044 	movi	r2,1
   27700:	00000306 	br	27710 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   27704:	0005883a 	mov	r2,zero
   27708:	00000106 	br	27710 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2770c:	0005883a 	mov	r2,zero
  }
}
   27710:	e037883a 	mov	sp,fp
   27714:	df000017 	ldw	fp,0(sp)
   27718:	dec00104 	addi	sp,sp,4
   2771c:	f800283a 	ret

00027720 <atexit>:
   27720:	200b883a 	mov	r5,r4
   27724:	000f883a 	mov	r7,zero
   27728:	000d883a 	mov	r6,zero
   2772c:	0009883a 	mov	r4,zero
   27730:	0027aa81 	jmpi	27aa8 <__register_exitproc>

00027734 <exit>:
   27734:	defffe04 	addi	sp,sp,-8
   27738:	000b883a 	mov	r5,zero
   2773c:	dc000015 	stw	r16,0(sp)
   27740:	dfc00115 	stw	ra,4(sp)
   27744:	2021883a 	mov	r16,r4
   27748:	0027bc00 	call	27bc0 <__call_exitprocs>
   2774c:	008000f4 	movhi	r2,3
   27750:	10a69c04 	addi	r2,r2,-26000
   27754:	11000017 	ldw	r4,0(r2)
   27758:	20800f17 	ldw	r2,60(r4)
   2775c:	10000126 	beq	r2,zero,27764 <exit+0x30>
   27760:	103ee83a 	callr	r2
   27764:	8009883a 	mov	r4,r16
   27768:	0027d400 	call	27d40 <_exit>

0002776c <memcmp>:
   2776c:	01c000c4 	movi	r7,3
   27770:	3980192e 	bgeu	r7,r6,277d8 <memcmp+0x6c>
   27774:	2144b03a 	or	r2,r4,r5
   27778:	11c4703a 	and	r2,r2,r7
   2777c:	10000f26 	beq	r2,zero,277bc <memcmp+0x50>
   27780:	20800003 	ldbu	r2,0(r4)
   27784:	28c00003 	ldbu	r3,0(r5)
   27788:	10c0151e 	bne	r2,r3,277e0 <memcmp+0x74>
   2778c:	31bfff84 	addi	r6,r6,-2
   27790:	01ffffc4 	movi	r7,-1
   27794:	00000406 	br	277a8 <memcmp+0x3c>
   27798:	20800003 	ldbu	r2,0(r4)
   2779c:	28c00003 	ldbu	r3,0(r5)
   277a0:	31bfffc4 	addi	r6,r6,-1
   277a4:	10c00e1e 	bne	r2,r3,277e0 <memcmp+0x74>
   277a8:	21000044 	addi	r4,r4,1
   277ac:	29400044 	addi	r5,r5,1
   277b0:	31fff91e 	bne	r6,r7,27798 <__alt_data_end+0xfffee798>
   277b4:	0005883a 	mov	r2,zero
   277b8:	f800283a 	ret
   277bc:	20c00017 	ldw	r3,0(r4)
   277c0:	28800017 	ldw	r2,0(r5)
   277c4:	18bfee1e 	bne	r3,r2,27780 <__alt_data_end+0xfffee780>
   277c8:	31bfff04 	addi	r6,r6,-4
   277cc:	21000104 	addi	r4,r4,4
   277d0:	29400104 	addi	r5,r5,4
   277d4:	39bff936 	bltu	r7,r6,277bc <__alt_data_end+0xfffee7bc>
   277d8:	303fe91e 	bne	r6,zero,27780 <__alt_data_end+0xfffee780>
   277dc:	003ff506 	br	277b4 <__alt_data_end+0xfffee7b4>
   277e0:	10c5c83a 	sub	r2,r2,r3
   277e4:	f800283a 	ret

000277e8 <_putc_r>:
   277e8:	defffc04 	addi	sp,sp,-16
   277ec:	dc000215 	stw	r16,8(sp)
   277f0:	dfc00315 	stw	ra,12(sp)
   277f4:	2021883a 	mov	r16,r4
   277f8:	20000226 	beq	r4,zero,27804 <_putc_r+0x1c>
   277fc:	20800e17 	ldw	r2,56(r4)
   27800:	10001b26 	beq	r2,zero,27870 <_putc_r+0x88>
   27804:	30800217 	ldw	r2,8(r6)
   27808:	10bfffc4 	addi	r2,r2,-1
   2780c:	30800215 	stw	r2,8(r6)
   27810:	10000a16 	blt	r2,zero,2783c <_putc_r+0x54>
   27814:	30800017 	ldw	r2,0(r6)
   27818:	11400005 	stb	r5,0(r2)
   2781c:	30800017 	ldw	r2,0(r6)
   27820:	10c00044 	addi	r3,r2,1
   27824:	30c00015 	stw	r3,0(r6)
   27828:	10800003 	ldbu	r2,0(r2)
   2782c:	dfc00317 	ldw	ra,12(sp)
   27830:	dc000217 	ldw	r16,8(sp)
   27834:	dec00404 	addi	sp,sp,16
   27838:	f800283a 	ret
   2783c:	30c00617 	ldw	r3,24(r6)
   27840:	10c00616 	blt	r2,r3,2785c <_putc_r+0x74>
   27844:	30800017 	ldw	r2,0(r6)
   27848:	00c00284 	movi	r3,10
   2784c:	11400005 	stb	r5,0(r2)
   27850:	30800017 	ldw	r2,0(r6)
   27854:	11400003 	ldbu	r5,0(r2)
   27858:	28fff11e 	bne	r5,r3,27820 <__alt_data_end+0xfffee820>
   2785c:	8009883a 	mov	r4,r16
   27860:	dfc00317 	ldw	ra,12(sp)
   27864:	dc000217 	ldw	r16,8(sp)
   27868:	dec00404 	addi	sp,sp,16
   2786c:	00279501 	jmpi	27950 <__swbuf_r>
   27870:	d9400015 	stw	r5,0(sp)
   27874:	d9800115 	stw	r6,4(sp)
   27878:	002076c0 	call	2076c <__sinit>
   2787c:	d9800117 	ldw	r6,4(sp)
   27880:	d9400017 	ldw	r5,0(sp)
   27884:	003fdf06 	br	27804 <__alt_data_end+0xfffee804>

00027888 <putc>:
   27888:	008000f4 	movhi	r2,3
   2788c:	defffc04 	addi	sp,sp,-16
   27890:	10a69d04 	addi	r2,r2,-25996
   27894:	dc000115 	stw	r16,4(sp)
   27898:	14000017 	ldw	r16,0(r2)
   2789c:	dc400215 	stw	r17,8(sp)
   278a0:	dfc00315 	stw	ra,12(sp)
   278a4:	2023883a 	mov	r17,r4
   278a8:	80000226 	beq	r16,zero,278b4 <putc+0x2c>
   278ac:	80800e17 	ldw	r2,56(r16)
   278b0:	10001a26 	beq	r2,zero,2791c <putc+0x94>
   278b4:	28800217 	ldw	r2,8(r5)
   278b8:	10bfffc4 	addi	r2,r2,-1
   278bc:	28800215 	stw	r2,8(r5)
   278c0:	10000b16 	blt	r2,zero,278f0 <putc+0x68>
   278c4:	28800017 	ldw	r2,0(r5)
   278c8:	14400005 	stb	r17,0(r2)
   278cc:	28800017 	ldw	r2,0(r5)
   278d0:	10c00044 	addi	r3,r2,1
   278d4:	28c00015 	stw	r3,0(r5)
   278d8:	10800003 	ldbu	r2,0(r2)
   278dc:	dfc00317 	ldw	ra,12(sp)
   278e0:	dc400217 	ldw	r17,8(sp)
   278e4:	dc000117 	ldw	r16,4(sp)
   278e8:	dec00404 	addi	sp,sp,16
   278ec:	f800283a 	ret
   278f0:	28c00617 	ldw	r3,24(r5)
   278f4:	10c00e16 	blt	r2,r3,27930 <putc+0xa8>
   278f8:	28800017 	ldw	r2,0(r5)
   278fc:	01000284 	movi	r4,10
   27900:	14400005 	stb	r17,0(r2)
   27904:	28800017 	ldw	r2,0(r5)
   27908:	10c00003 	ldbu	r3,0(r2)
   2790c:	193ff01e 	bne	r3,r4,278d0 <__alt_data_end+0xfffee8d0>
   27910:	280d883a 	mov	r6,r5
   27914:	180b883a 	mov	r5,r3
   27918:	00000706 	br	27938 <putc+0xb0>
   2791c:	8009883a 	mov	r4,r16
   27920:	d9400015 	stw	r5,0(sp)
   27924:	002076c0 	call	2076c <__sinit>
   27928:	d9400017 	ldw	r5,0(sp)
   2792c:	003fe106 	br	278b4 <__alt_data_end+0xfffee8b4>
   27930:	280d883a 	mov	r6,r5
   27934:	880b883a 	mov	r5,r17
   27938:	8009883a 	mov	r4,r16
   2793c:	dfc00317 	ldw	ra,12(sp)
   27940:	dc400217 	ldw	r17,8(sp)
   27944:	dc000117 	ldw	r16,4(sp)
   27948:	dec00404 	addi	sp,sp,16
   2794c:	00279501 	jmpi	27950 <__swbuf_r>

00027950 <__swbuf_r>:
   27950:	defffb04 	addi	sp,sp,-20
   27954:	dcc00315 	stw	r19,12(sp)
   27958:	dc800215 	stw	r18,8(sp)
   2795c:	dc000015 	stw	r16,0(sp)
   27960:	dfc00415 	stw	ra,16(sp)
   27964:	dc400115 	stw	r17,4(sp)
   27968:	2025883a 	mov	r18,r4
   2796c:	2827883a 	mov	r19,r5
   27970:	3021883a 	mov	r16,r6
   27974:	20000226 	beq	r4,zero,27980 <__swbuf_r+0x30>
   27978:	20800e17 	ldw	r2,56(r4)
   2797c:	10004226 	beq	r2,zero,27a88 <__swbuf_r+0x138>
   27980:	80800617 	ldw	r2,24(r16)
   27984:	8100030b 	ldhu	r4,12(r16)
   27988:	80800215 	stw	r2,8(r16)
   2798c:	2080020c 	andi	r2,r4,8
   27990:	10003626 	beq	r2,zero,27a6c <__swbuf_r+0x11c>
   27994:	80c00417 	ldw	r3,16(r16)
   27998:	18003426 	beq	r3,zero,27a6c <__swbuf_r+0x11c>
   2799c:	2088000c 	andi	r2,r4,8192
   279a0:	9c403fcc 	andi	r17,r19,255
   279a4:	10001a26 	beq	r2,zero,27a10 <__swbuf_r+0xc0>
   279a8:	80800017 	ldw	r2,0(r16)
   279ac:	81000517 	ldw	r4,20(r16)
   279b0:	10c7c83a 	sub	r3,r2,r3
   279b4:	1900200e 	bge	r3,r4,27a38 <__swbuf_r+0xe8>
   279b8:	18c00044 	addi	r3,r3,1
   279bc:	81000217 	ldw	r4,8(r16)
   279c0:	11400044 	addi	r5,r2,1
   279c4:	81400015 	stw	r5,0(r16)
   279c8:	213fffc4 	addi	r4,r4,-1
   279cc:	81000215 	stw	r4,8(r16)
   279d0:	14c00005 	stb	r19,0(r2)
   279d4:	80800517 	ldw	r2,20(r16)
   279d8:	10c01e26 	beq	r2,r3,27a54 <__swbuf_r+0x104>
   279dc:	8080030b 	ldhu	r2,12(r16)
   279e0:	1080004c 	andi	r2,r2,1
   279e4:	10000226 	beq	r2,zero,279f0 <__swbuf_r+0xa0>
   279e8:	00800284 	movi	r2,10
   279ec:	88801926 	beq	r17,r2,27a54 <__swbuf_r+0x104>
   279f0:	8805883a 	mov	r2,r17
   279f4:	dfc00417 	ldw	ra,16(sp)
   279f8:	dcc00317 	ldw	r19,12(sp)
   279fc:	dc800217 	ldw	r18,8(sp)
   27a00:	dc400117 	ldw	r17,4(sp)
   27a04:	dc000017 	ldw	r16,0(sp)
   27a08:	dec00504 	addi	sp,sp,20
   27a0c:	f800283a 	ret
   27a10:	81401917 	ldw	r5,100(r16)
   27a14:	00b7ffc4 	movi	r2,-8193
   27a18:	21080014 	ori	r4,r4,8192
   27a1c:	2884703a 	and	r2,r5,r2
   27a20:	80801915 	stw	r2,100(r16)
   27a24:	80800017 	ldw	r2,0(r16)
   27a28:	8100030d 	sth	r4,12(r16)
   27a2c:	81000517 	ldw	r4,20(r16)
   27a30:	10c7c83a 	sub	r3,r2,r3
   27a34:	193fe016 	blt	r3,r4,279b8 <__alt_data_end+0xfffee9b8>
   27a38:	800b883a 	mov	r5,r16
   27a3c:	9009883a 	mov	r4,r18
   27a40:	00226e40 	call	226e4 <_fflush_r>
   27a44:	1000071e 	bne	r2,zero,27a64 <__swbuf_r+0x114>
   27a48:	80800017 	ldw	r2,0(r16)
   27a4c:	00c00044 	movi	r3,1
   27a50:	003fda06 	br	279bc <__alt_data_end+0xfffee9bc>
   27a54:	800b883a 	mov	r5,r16
   27a58:	9009883a 	mov	r4,r18
   27a5c:	00226e40 	call	226e4 <_fflush_r>
   27a60:	103fe326 	beq	r2,zero,279f0 <__alt_data_end+0xfffee9f0>
   27a64:	00bfffc4 	movi	r2,-1
   27a68:	003fe206 	br	279f4 <__alt_data_end+0xfffee9f4>
   27a6c:	800b883a 	mov	r5,r16
   27a70:	9009883a 	mov	r4,r18
   27a74:	002221c0 	call	2221c <__swsetup_r>
   27a78:	103ffa1e 	bne	r2,zero,27a64 <__alt_data_end+0xfffeea64>
   27a7c:	8100030b 	ldhu	r4,12(r16)
   27a80:	80c00417 	ldw	r3,16(r16)
   27a84:	003fc506 	br	2799c <__alt_data_end+0xfffee99c>
   27a88:	002076c0 	call	2076c <__sinit>
   27a8c:	003fbc06 	br	27980 <__alt_data_end+0xfffee980>

00027a90 <__swbuf>:
   27a90:	008000f4 	movhi	r2,3
   27a94:	10a69d04 	addi	r2,r2,-25996
   27a98:	280d883a 	mov	r6,r5
   27a9c:	200b883a 	mov	r5,r4
   27aa0:	11000017 	ldw	r4,0(r2)
   27aa4:	00279501 	jmpi	27950 <__swbuf_r>

00027aa8 <__register_exitproc>:
   27aa8:	defffa04 	addi	sp,sp,-24
   27aac:	dc000315 	stw	r16,12(sp)
   27ab0:	040000f4 	movhi	r16,3
   27ab4:	84269c04 	addi	r16,r16,-26000
   27ab8:	80c00017 	ldw	r3,0(r16)
   27abc:	dc400415 	stw	r17,16(sp)
   27ac0:	dfc00515 	stw	ra,20(sp)
   27ac4:	18805217 	ldw	r2,328(r3)
   27ac8:	2023883a 	mov	r17,r4
   27acc:	10003726 	beq	r2,zero,27bac <__register_exitproc+0x104>
   27ad0:	10c00117 	ldw	r3,4(r2)
   27ad4:	010007c4 	movi	r4,31
   27ad8:	20c00e16 	blt	r4,r3,27b14 <__register_exitproc+0x6c>
   27adc:	1a000044 	addi	r8,r3,1
   27ae0:	8800221e 	bne	r17,zero,27b6c <__register_exitproc+0xc4>
   27ae4:	18c00084 	addi	r3,r3,2
   27ae8:	18c7883a 	add	r3,r3,r3
   27aec:	18c7883a 	add	r3,r3,r3
   27af0:	12000115 	stw	r8,4(r2)
   27af4:	10c7883a 	add	r3,r2,r3
   27af8:	19400015 	stw	r5,0(r3)
   27afc:	0005883a 	mov	r2,zero
   27b00:	dfc00517 	ldw	ra,20(sp)
   27b04:	dc400417 	ldw	r17,16(sp)
   27b08:	dc000317 	ldw	r16,12(sp)
   27b0c:	dec00604 	addi	sp,sp,24
   27b10:	f800283a 	ret
   27b14:	00800034 	movhi	r2,0
   27b18:	10800004 	addi	r2,r2,0
   27b1c:	10002626 	beq	r2,zero,27bb8 <__register_exitproc+0x110>
   27b20:	01006404 	movi	r4,400
   27b24:	d9400015 	stw	r5,0(sp)
   27b28:	d9800115 	stw	r6,4(sp)
   27b2c:	d9c00215 	stw	r7,8(sp)
   27b30:	00000000 	call	0 <__alt_mem_nios_mem-0x20000>
   27b34:	d9400017 	ldw	r5,0(sp)
   27b38:	d9800117 	ldw	r6,4(sp)
   27b3c:	d9c00217 	ldw	r7,8(sp)
   27b40:	10001d26 	beq	r2,zero,27bb8 <__register_exitproc+0x110>
   27b44:	81000017 	ldw	r4,0(r16)
   27b48:	10000115 	stw	zero,4(r2)
   27b4c:	02000044 	movi	r8,1
   27b50:	22405217 	ldw	r9,328(r4)
   27b54:	0007883a 	mov	r3,zero
   27b58:	12400015 	stw	r9,0(r2)
   27b5c:	20805215 	stw	r2,328(r4)
   27b60:	10006215 	stw	zero,392(r2)
   27b64:	10006315 	stw	zero,396(r2)
   27b68:	883fde26 	beq	r17,zero,27ae4 <__alt_data_end+0xfffeeae4>
   27b6c:	18c9883a 	add	r4,r3,r3
   27b70:	2109883a 	add	r4,r4,r4
   27b74:	1109883a 	add	r4,r2,r4
   27b78:	21802215 	stw	r6,136(r4)
   27b7c:	01800044 	movi	r6,1
   27b80:	12406217 	ldw	r9,392(r2)
   27b84:	30cc983a 	sll	r6,r6,r3
   27b88:	4992b03a 	or	r9,r9,r6
   27b8c:	12406215 	stw	r9,392(r2)
   27b90:	21c04215 	stw	r7,264(r4)
   27b94:	01000084 	movi	r4,2
   27b98:	893fd21e 	bne	r17,r4,27ae4 <__alt_data_end+0xfffeeae4>
   27b9c:	11006317 	ldw	r4,396(r2)
   27ba0:	218cb03a 	or	r6,r4,r6
   27ba4:	11806315 	stw	r6,396(r2)
   27ba8:	003fce06 	br	27ae4 <__alt_data_end+0xfffeeae4>
   27bac:	18805304 	addi	r2,r3,332
   27bb0:	18805215 	stw	r2,328(r3)
   27bb4:	003fc606 	br	27ad0 <__alt_data_end+0xfffeead0>
   27bb8:	00bfffc4 	movi	r2,-1
   27bbc:	003fd006 	br	27b00 <__alt_data_end+0xfffeeb00>

00027bc0 <__call_exitprocs>:
   27bc0:	defff504 	addi	sp,sp,-44
   27bc4:	df000915 	stw	fp,36(sp)
   27bc8:	dd400615 	stw	r21,24(sp)
   27bcc:	dc800315 	stw	r18,12(sp)
   27bd0:	dfc00a15 	stw	ra,40(sp)
   27bd4:	ddc00815 	stw	r23,32(sp)
   27bd8:	dd800715 	stw	r22,28(sp)
   27bdc:	dd000515 	stw	r20,20(sp)
   27be0:	dcc00415 	stw	r19,16(sp)
   27be4:	dc400215 	stw	r17,8(sp)
   27be8:	dc000115 	stw	r16,4(sp)
   27bec:	d9000015 	stw	r4,0(sp)
   27bf0:	2839883a 	mov	fp,r5
   27bf4:	04800044 	movi	r18,1
   27bf8:	057fffc4 	movi	r21,-1
   27bfc:	008000f4 	movhi	r2,3
   27c00:	10a69c04 	addi	r2,r2,-26000
   27c04:	12000017 	ldw	r8,0(r2)
   27c08:	45005217 	ldw	r20,328(r8)
   27c0c:	44c05204 	addi	r19,r8,328
   27c10:	a0001c26 	beq	r20,zero,27c84 <__call_exitprocs+0xc4>
   27c14:	a0800117 	ldw	r2,4(r20)
   27c18:	15ffffc4 	addi	r23,r2,-1
   27c1c:	b8000d16 	blt	r23,zero,27c54 <__call_exitprocs+0x94>
   27c20:	14000044 	addi	r16,r2,1
   27c24:	8421883a 	add	r16,r16,r16
   27c28:	8421883a 	add	r16,r16,r16
   27c2c:	84402004 	addi	r17,r16,128
   27c30:	a463883a 	add	r17,r20,r17
   27c34:	a421883a 	add	r16,r20,r16
   27c38:	e0001e26 	beq	fp,zero,27cb4 <__call_exitprocs+0xf4>
   27c3c:	80804017 	ldw	r2,256(r16)
   27c40:	e0801c26 	beq	fp,r2,27cb4 <__call_exitprocs+0xf4>
   27c44:	bdffffc4 	addi	r23,r23,-1
   27c48:	843fff04 	addi	r16,r16,-4
   27c4c:	8c7fff04 	addi	r17,r17,-4
   27c50:	bd7ff91e 	bne	r23,r21,27c38 <__alt_data_end+0xfffeec38>
   27c54:	00800034 	movhi	r2,0
   27c58:	10800004 	addi	r2,r2,0
   27c5c:	10000926 	beq	r2,zero,27c84 <__call_exitprocs+0xc4>
   27c60:	a0800117 	ldw	r2,4(r20)
   27c64:	1000301e 	bne	r2,zero,27d28 <__call_exitprocs+0x168>
   27c68:	a0800017 	ldw	r2,0(r20)
   27c6c:	10003226 	beq	r2,zero,27d38 <__call_exitprocs+0x178>
   27c70:	a009883a 	mov	r4,r20
   27c74:	98800015 	stw	r2,0(r19)
   27c78:	00000000 	call	0 <__alt_mem_nios_mem-0x20000>
   27c7c:	9d000017 	ldw	r20,0(r19)
   27c80:	a03fe41e 	bne	r20,zero,27c14 <__alt_data_end+0xfffeec14>
   27c84:	dfc00a17 	ldw	ra,40(sp)
   27c88:	df000917 	ldw	fp,36(sp)
   27c8c:	ddc00817 	ldw	r23,32(sp)
   27c90:	dd800717 	ldw	r22,28(sp)
   27c94:	dd400617 	ldw	r21,24(sp)
   27c98:	dd000517 	ldw	r20,20(sp)
   27c9c:	dcc00417 	ldw	r19,16(sp)
   27ca0:	dc800317 	ldw	r18,12(sp)
   27ca4:	dc400217 	ldw	r17,8(sp)
   27ca8:	dc000117 	ldw	r16,4(sp)
   27cac:	dec00b04 	addi	sp,sp,44
   27cb0:	f800283a 	ret
   27cb4:	a0800117 	ldw	r2,4(r20)
   27cb8:	80c00017 	ldw	r3,0(r16)
   27cbc:	10bfffc4 	addi	r2,r2,-1
   27cc0:	15c01426 	beq	r2,r23,27d14 <__call_exitprocs+0x154>
   27cc4:	80000015 	stw	zero,0(r16)
   27cc8:	183fde26 	beq	r3,zero,27c44 <__alt_data_end+0xfffeec44>
   27ccc:	95c8983a 	sll	r4,r18,r23
   27cd0:	a0806217 	ldw	r2,392(r20)
   27cd4:	a5800117 	ldw	r22,4(r20)
   27cd8:	2084703a 	and	r2,r4,r2
   27cdc:	10000b26 	beq	r2,zero,27d0c <__call_exitprocs+0x14c>
   27ce0:	a0806317 	ldw	r2,396(r20)
   27ce4:	2088703a 	and	r4,r4,r2
   27ce8:	20000c1e 	bne	r4,zero,27d1c <__call_exitprocs+0x15c>
   27cec:	89400017 	ldw	r5,0(r17)
   27cf0:	d9000017 	ldw	r4,0(sp)
   27cf4:	183ee83a 	callr	r3
   27cf8:	a0800117 	ldw	r2,4(r20)
   27cfc:	15bfbf1e 	bne	r2,r22,27bfc <__alt_data_end+0xfffeebfc>
   27d00:	98800017 	ldw	r2,0(r19)
   27d04:	153fcf26 	beq	r2,r20,27c44 <__alt_data_end+0xfffeec44>
   27d08:	003fbc06 	br	27bfc <__alt_data_end+0xfffeebfc>
   27d0c:	183ee83a 	callr	r3
   27d10:	003ff906 	br	27cf8 <__alt_data_end+0xfffeecf8>
   27d14:	a5c00115 	stw	r23,4(r20)
   27d18:	003feb06 	br	27cc8 <__alt_data_end+0xfffeecc8>
   27d1c:	89000017 	ldw	r4,0(r17)
   27d20:	183ee83a 	callr	r3
   27d24:	003ff406 	br	27cf8 <__alt_data_end+0xfffeecf8>
   27d28:	a0800017 	ldw	r2,0(r20)
   27d2c:	a027883a 	mov	r19,r20
   27d30:	1029883a 	mov	r20,r2
   27d34:	003fb606 	br	27c10 <__alt_data_end+0xfffeec10>
   27d38:	0005883a 	mov	r2,zero
   27d3c:	003ffb06 	br	27d2c <__alt_data_end+0xfffeed2c>

00027d40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   27d40:	defffd04 	addi	sp,sp,-12
   27d44:	df000215 	stw	fp,8(sp)
   27d48:	df000204 	addi	fp,sp,8
   27d4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   27d50:	0001883a 	nop
   27d54:	e0bfff17 	ldw	r2,-4(fp)
   27d58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   27d5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   27d60:	10000226 	beq	r2,zero,27d6c <_exit+0x2c>
    ALT_SIM_FAIL();
   27d64:	002af070 	cmpltui	zero,zero,43969
   27d68:	00000106 	br	27d70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   27d6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   27d70:	003fff06 	br	27d70 <__alt_data_end+0xfffeed70>
